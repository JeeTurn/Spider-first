<!DOCTYPE html><html><head><title>专利 CN102760219A - 一种Android平台软件保护系统、方法及设备 -  Google 专利</title><script>(function(){(function(){function e(a){this.t={};this.tick=function(a,c,b){var d=void 0!=b?b:(new Date).getTime();this.t[a]=[d,c];if(void 0==b)try{window.console.timeStamp("CSI/"+a)}catch(e){}};this.tick("start",null,a)}var a;window.performance&&(a=window.performance.timing);var f=a?new e(a.responseStart):new e;window.jstiming={Timer:e,load:f};if(a){var c=a.navigationStart,d=a.responseStart;0<c&&d>=c&&(window.jstiming.srt=d-c)}if(a){var b=window.jstiming.load;0<c&&d>=c&&(b.tick("_wtsrt",void 0,c),b.tick("wtsrt_",
"_wtsrt",d),b.tick("tbsd_","wtsrt_"))}try{a=null,window.chrome&&window.chrome.csi&&(a=Math.floor(window.chrome.csi().pageT),b&&0<c&&(b.tick("_tbnd",void 0,window.chrome.csi().startE),b.tick("tbnd_","_tbnd",c))),null==a&&window.gtbExternal&&(a=window.gtbExternal.pageT()),null==a&&window.external&&(a=window.external.pageT,b&&0<c&&(b.tick("_tbnd",void 0,window.external.startE),b.tick("tbnd_","_tbnd",c))),a&&(window.jstiming.pt=a)}catch(g){}})();})();
</script><link rel="stylesheet" href="/patents/css/_50a6672b5f82ffbd39b7a9e87fd4594c/kl_intl_patents_bundle.css" type="text/css" /><script src="/books/javascript/atb_50a6672b5f82ffbd39b7a9e87fd4594c__zh_cn.js"></script><script>function googleTranslateElementInit() {new google.translate.TranslateElement({pageLanguage: "zh",gaTrack: true,gaId: "UA-27188110-1",multilanguagePage: true});}</script><script src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script><meta name="DC.type" content="Patent"><meta name="DC.title" content="一种Android平台软件保护系统、方法及设备"><meta name="DC.contributor" content="李柏松" scheme="inventor"><meta name="DC.contributor" content="肖梓航" scheme="inventor"><meta name="DC.contributor" content="北京安天电子设备有限公司" scheme="assignee"><meta name="DC.date" content="2011-12-20" scheme="dateSubmitted"><meta name="DC.description" content="本发明主要公开了一种在Android系统中保护应用软件不受逆向分析和破解系统和方法。主要方法是：为Android系统中Dalvik虚拟机和Linux系统库增加接口，使Android具有从内存中直接加载DEX格式文件和SO格式文件的能力；将应用软件的核心代码存储在在线服务器中，加密并签名后发送给安装在客户端的应用软件；应用软件接收到核心代码后验证签名并解密，然后将明文存储在内存中，直接加载到系统中，然后调用其中的代码，最后释放内存。该方法极大地增加了攻击者进行逆向分析和破解的难度，能有效保护Android应用软件的安全。"><meta name="DC.date" content="2012-10-31"><meta name="DC.relation" content="CN:102087605:A" scheme="references"><meta name="DC.relation" content="CN:102236757:A" scheme="references"><meta name="DC.relation" content="CN:1606027:A" scheme="references"><meta name="DC.relation" content="US:6343280" scheme="references"><meta name="DC.relation" content="US:7634521" scheme="references"><meta name="citation_reference" content="ZH.WEIR: &quot;Android类动态加载技术&quot;, 《HTTP://WWW.BLOGJAVA.NET/ZH-WEIR/ARCHIVE/2011/10/29/362294.HTML》, 29 October 2011 (2011-10-29), pages 1 - 4"><meta name="citation_patent_publication_number" content="CN:102760219:A"><meta name="citation_patent_application_number" content="CN:201110429661"><link rel="canonical" href="https://www.google.com/patents/CN102760219A?cl=zh"/><meta property="og:url" content="https://www.google.com/patents/CN102760219A?cl=zh"/><meta name="title" content="专利 CN102760219A - 一种Android平台软件保护系统、方法及设备"/><meta name="description" content="本发明主要公开了一种在Android系统中保护应用软件不受逆向分析和破解系统和方法。主要方法是：为Android系统中Dalvik虚拟机和Linux系统库增加接口，使Android具有从内存中直接加载DEX格式文件和SO格式文件的能力；将应用软件的核心代码存储在在线服务器中，加密并签名后发送给安装在客户端的应用软件；应用软件接收到核心代码后验证签名并解密，然后将明文存储在内存中，直接加载到系统中，然后调用其中的代码，最后释放内存。该方法极大地增加了攻击者进行逆向分析和破解的难度，能有效保护Android应用软件的安全。"/><meta property="og:title" content="专利 CN102760219A - 一种Android平台软件保护系统、方法及设备"/><meta property="og:type" content="book"/><meta property="og:site_name" content="Google Books"/><meta property="og:image" content="https://www.google.com/patents?id=&amp;printsec=frontcover&amp;img=1&amp;zoom=1"/><link rel="image_src" href="https://www.google.com/patents?id=&amp;printsec=frontcover&amp;img=1&amp;zoom=1"/><script>if (window['_OC_timingAction']) {window['_OC_timingAction']('patents_refpage');}</script><style>#gbar,#guser{font-size:13px;padding-top:1px !important;}#gbar{height:22px}#guser{padding-bottom:7px !important;text-align:right}.gbh,.gbd{border-top:1px solid #c9d7f1;font-size:1px}.gbh{height:0;position:absolute;top:24px;width:100%}@media all{.gb1{height:22px;margin-right:.5em;vertical-align:top}#gbar{float:left}}a.gb1,a.gb4{text-decoration:underline !important}a.gb1,a.gb4{color:#00c !important}.gbi .gb4{color:#dd8e27 !important}.gbf .gb4{color:#900 !important}

#gbar { padding:.3em .6em !important;}</style></head><body ><div id=gbar><nobr><a class=gb1 href="https://www.google.com/search?cl=zh&hl=zh-CN&sa=N&tab=tw">搜索</a> <a class=gb1 href="https://www.google.com/search?cl=zh&hl=zh-CN&tbm=isch&source=og&sa=N&tab=ti">图片</a> <a class=gb1 href="https://maps.google.com/maps?cl=zh&hl=zh-CN&sa=N&tab=tl">地图</a> <a class=gb1 href="https://play.google.com/?cl=zh&hl=zh-CN&sa=N&tab=t8">Play</a> <a class=gb1 href="https://www.youtube.com/results?cl=zh&hl=zh-CN&sa=N&tab=t1">YouTube</a> <a class=gb1 href="https://news.google.com/nwshp?hl=zh-CN&tab=tn">新闻</a> <a class=gb1 href="https://mail.google.com/mail/?tab=tm">Gmail</a> <a class=gb1 href="https://drive.google.com/?tab=to">云端硬盘</a> <a class=gb1 style="text-decoration:none" href="https://www.google.com/intl/zh-CN/options/"><u>更多</u> &raquo;</a></nobr></div><div id=guser width=100%><nobr><span id=gbn class=gbi></span><span id=gbf class=gbf></span><span id=gbe></span><a target=_top id=gb_70 href="https://www.google.com/accounts/Login?service=&continue=https://www.google.com/patents%3Fcl%3Dzh%26hl%3Dzh-CN&hl=zh-CN" class=gb4>登录</a></nobr></div><div class=gbh style=left:0></div><div class=gbh style=right:0></div><div role="alert" style="position: absolute; left: 0; right: 0;"><a href="https://www.google.com/patents/CN102760219A?cl=zh&amp;hl=zh-CN&amp;output=html_text" title="屏幕阅读器用户请注意：点击此链接可进入无障碍模式。阅读器在无障碍模式下具有同样的基本功能，但可让用户获得更好的体验。"><img border="0" src="//www.google.com/images/cleardot.gif"alt="屏幕阅读器用户请注意：点击此链接可进入无障碍模式。阅读器在无障碍模式下具有同样的基本功能，但可让用户获得更好的体验。"></a></div><div class="kd-appbar"><h2 class="kd-appname"><a href="/patents?hl=zh-CN"> 专利</a></h2><div class="kd-buttonbar left" id="left-toolbar-buttons"><a id="appbar-write-review-link" href=""></a><a id="appbar-view-print-sample-link" href=""></a><a id="appbar-view-ebook-sample-link" href=""></a><a id="appbar-patents-prior-art-finder-link" href="https://www.google.com/patents/related/CN102760219A"></a><a id="appbar-patents-discuss-this-link" href="https://www.google.com/url?id=yW2rBwABERAJ&amp;q=http://patents.stackexchange.com/redirect/google-patents%3Fpublication%3DCN102760219A&amp;usg=AFQjCNENxgQPQLGUtzv3FiljaIIr2YKEsw" data-is-grant="false"></a><a id="appbar-read-patent-link" href="//docs.google.com/viewer?url=patentimages.storage.googleapis.com/pdfs/824624334234c74969c1/CN102760219A.pdf"></a><a id="appbar-download-pdf-link" href="//patentimages.storage.googleapis.com/pdfs/824624334234c74969c1/CN102760219A.pdf"></a><a class="appbar-content-language-link" data-selected="true" data-label="中文" href="/patents/CN102760219A?cl=zh&amp;hl=zh-CN"></a><a class="appbar-content-language-link" data-label="英语" href="/patents/CN102760219A?cl=en&amp;hl=zh-CN"></a><a class="appbar-application-grant-link" data-selected="true" data-label="申请" href="/patents/CN102760219A?hl=zh-CN&amp;cl=zh"></a><a class="appbar-application-grant-link" data-label="授权" href="/patents/CN102760219B?hl=zh-CN&amp;cl=zh"></a></div><div class="kd-buttonbar right" id="right-toolbar-buttons"></div></div><div id="books-microdata" itemscope=""itemtype="http://schema.org/Book"itemid="https://www.google.com/patents/CN102760219A?cl=zh" style="display:none"><span itemprop="description">本发明主要公开了一种在Android系统中保护应用软件不受逆向分析和破解系统和方法。主要方法是：为Android系统中Dalvik虚拟机和Linux系统库增加接口，使Android具有从内存中直接加载DEX格式文件和SO格式文件的能力；将应用软件的 ...</span><span itemprop="url">https://www.google.com/patents/CN102760219A?cl=zh&amp;utm_source=gb-gplus-share</span><span class="main-title" itemprop="name">专利 CN102760219A - 一种Android平台软件保护系统、方法及设备</span><img itemprop="image" src="https://www.google.com/patents?id=&amp;printsec=frontcover&amp;img=1&amp;zoom=1"alt="专利 CN102760219A - 一种Android平台软件保护系统、方法及设备" title="专利 CN102760219A - 一种Android平台软件保护系统、方法及设备"></div><div style="display: none"><ol id="ofe-gear-menu-contents" class="gbmcc"><li class="gbe gbmtc"><a class="gbmt goog-menuitem-content" id="" href="https://www.google.com/advanced_patent_search?hl=zh-CN"> 高级专利搜索</a></li></ol></div><div id="volume-main"><div id="volume-center"><div class=vertical_module_list_row><div id=intl_patents class=about_content><div id=intl_patents_v><table class="patent-bibdata patent-drawings-missing"><tr><td class="patent-bibdata-heading"> 公开号</td><td class="single-patent-bibdata">CN102760219 A</td></tr><tr><td class="patent-bibdata-heading">发布类型</td><td class="single-patent-bibdata">申请</td></tr><tr><td class="patent-bibdata-heading"> 专利申请号</td><td class="single-patent-bibdata">CN 201110429661</td></tr><tr><td class="patent-bibdata-heading">公开日</td><td class="single-patent-bibdata">2012年10月31日</td></tr><tr><td class="patent-bibdata-heading"> 申请日期</td><td class="single-patent-bibdata">2011年12月20日</td></tr><tr><td class="patent-bibdata-heading"> 优先权日<span class="patent-tooltip-anchor patent-question-icon"data-tooltip-text="优先日期属于假设性质，不具任何法律效力。Google 对于所列日期的正确性并没有进行法律分析，也不作任何陈述。"></span></td><td class="single-patent-bibdata">2011年12月20日</td></tr><tr class="patent-bibdata-list-row "><td class="patent-bibdata-heading">公告号</td><td><span class="patent-bibdata-value-list"><span class="patent-bibdata-value"><a href="/patents/CN102760219B?hl=zh-CN&amp;cl=zh">CN102760219B</a></span></span></td></tr><tr class="patent-bibdata-list-row alternate-patent-number"><td class="patent-bibdata-heading"> 公开号</td><td><span class="patent-bibdata-value-list"><span class="patent-bibdata-value">201110429661.2, </span><span class="patent-bibdata-value">CN 102760219 A, </span><span class="patent-bibdata-value">CN 102760219A, </span><span class="patent-bibdata-value">CN 201110429661, </span><span class="patent-bibdata-value">CN-A-102760219, </span><span class="patent-bibdata-value">CN102760219 A, </span><span class="patent-bibdata-value">CN102760219A, </span><span class="patent-bibdata-value">CN201110429661, </span><span class="patent-bibdata-value">CN201110429661.2</span></span></td></tr><tr class="patent-bibdata-list-row "><td class="patent-bibdata-heading"> 发明者</td><td><span class="patent-bibdata-value-list"><span class="patent-bibdata-value"><a href="https://www.google.com/search?tbo=p&amp;tbm=pts&amp;hl=en&amp;q=ininventor:%22%E6%9D%8E%E6%9F%8F%E6%9D%BE%22">李柏松</a>, </span><span class="patent-bibdata-value"><a href="https://www.google.com/search?tbo=p&amp;tbm=pts&amp;hl=en&amp;q=ininventor:%22%E8%82%96%E6%A2%93%E8%88%AA%22">肖梓航</a></span></span></td></tr><tr class="patent-bibdata-list-row "><td class="patent-bibdata-heading"> 申请人</td><td><span class="patent-bibdata-value-list"><span class="patent-bibdata-value"><a href="https://www.google.com/search?tbo=p&amp;tbm=pts&amp;hl=en&amp;q=inassignee:%22%E5%8C%97%E4%BA%AC%E5%AE%89%E5%A4%A9%E7%94%B5%E5%AD%90%E8%AE%BE%E5%A4%87%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%22">北京安天电子设备有限公司</a></span></span></td></tr><tr class="patent-bibdata-list-row "><td class="patent-bibdata-heading">导出引文</td><td><span class="patent-bibdata-value-list"><span class="patent-bibdata-value"><a href="/patents/CN102760219A.bibtex?cl=zh">BiBTeX</a>, </span><span class="patent-bibdata-value"><a href="/patents/CN102760219A.enw?cl=zh">EndNote</a>, </span><span class="patent-bibdata-value"><a href="/patents/CN102760219A.ris?cl=zh">RefMan</a></span></span></td></tr><tr class="patent-internal-links"><td colspan=2><span class="patent-bibdata-value"><a href="#backward-citations">专利引用</a> (5),</span> <span class="patent-bibdata-value"><a href="#npl-citations">非专利引用</a> (1),</span> <span class="patent-bibdata-value"><a href="#forward-citations"> 被以下专利引用</a> (5),</span> <span class="patent-bibdata-value"><a href="#classifications">分类</a> (1),</span> <span class="patent-bibdata-value"><a href="#legal-events">法律事件</a> (4)</span> </td></tr><tr><td colspan=2 class="patent-bibdata-external-link-spacer-top"></td></tr><tr class="patent-bibdata-external-link-spacer-bottom"></tr><tr><td colspan=2><span class="patent-bibdata-heading">外部链接:&nbsp;</span><span><span class="patent-bibdata-value"><a href="https://www.google.com/url?id=yW2rBwABERAJ&amp;q=http://211.157.104.87:8080/sipo/zljs/hyjs-yx-new.jsp%3Frecid%3D201110429661&amp;usg=AFQjCNErPWeLIkmhoLj9hS3hzm3t5WTq9g"> 中国国家知识产权局</a>, </span><span class="patent-bibdata-value"><a href="https://www.google.com/url?id=yW2rBwABERAJ&amp;q=http://worldwide.espacenet.com/publicationDetails/biblio%3FCC%3DCN%26NR%3D102760219A%26KC%3DA%26FT%3DD&amp;usg=AFQjCNFmlY17pE2V9joEAjoGuZXrsGjw2g"> 欧洲专利数据库 (Espacenet)</a></span></span></td></tr><tr class="patent-bibdata-group-spacer"></tr></table><div class="number-and-title"><span class="patent-title"><invention-title mxw-id="PT116603714" lang="ZH" load-source="patent-office">一种Android平台软件保护系统、方法及设备</invention-title>
      </span><br><span class="patent-number">CN 102760219 A</span></div><div class="patent-section patent-abstract-section"><div class="patent-section-header"><span class="patent-section-title"> 摘要</span></div><div class="patent-text"><abstract mxw-id="PA101662105" lang="ZH" load-source="patent-office">
    <div class="abstract">本发明主要公开了一种在Android系统中保护应用软件不受逆向分析和破解系统和方法。主要方法是：为Android系统中Dalvik虚拟机和Linux系统库增加接口，使Android具有从内存中直接加载DEX格式文件和SO格式文件的能力；将应用软件的核心代码存储在在线服务器中，加密并签名后发送给安装在客户端的应用软件；应用软件接收到核心代码后验证签名并解密，然后将明文存储在内存中，直接加载到系统中，然后调用其中的代码，最后释放内存。该方法极大地增加了攻击者进行逆向分析和破解的难度，能有效保护Android应用软件的安全。</div>
  </abstract>
  </div></div><div class="patent-section patent-claims-section"><div class="patent-section-header"><span class="patent-section-title">权利要求<span class="patent-section-count">(11)</span></span></div><div class="patent-text"><div mxw-id="PCLM46032329" lang="ZH" load-source="patent-office" class="claims">
    <div class="claim"> <div num="1" class="claim">
      <div class="claim-text">1.	一种Android平台软件保护系统，其特征在于，包括智能终端和在线服务器：  所述智能终端包括修改后的Android操作系统和应用软件的非核心代码；所述修改后的Android操作系统对Android操作系统的源代码进行修改，实现应用软件的核心代码在内存中的动态加载；所述应用软件的非核心代码在完整的Android应用程序之中，具备应用软件所需要的功能以外的功能，包括：向在线服务器发送请求，接收在线服务器发来的核心代码，经过验证之后在内存中加载应用软件的核心代码，根据需要通过API接口调用应用软件的核心代码；  在线服务器存储应用软件的核心代码，接收智能终端中应用软件非核心代码发来的请求，将被请求的核心代码经过处理之后发送给智能终端中的应用软件非核心代码。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="2" class="claim">
      <div class="claim-text">2.如权利要求I所述的Android平台软件保护系统，其特征在于，应用软件的核心代码包括DEX格式文件和SO格式文件。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="3" class="claim">
      <div class="claim-text">3.如权利要求I所述的Android平台软件保护系统，其特征在于，在线服务器存储应用软件的核心代码，接收智能终端中应用软件非核心代码发来的请求，将部分或者全部被请求的核心代码进行加密和/或将被请求的核心代码进行数字签名之后发送给智能终端中的应用软件非核心代码。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="4" class="claim">
      <div class="claim-text">4.	一种Android操作系统的源代码修改方法，其特征在于，适用于权利要求I所述的系统，所述方法包括：   对 Android 操作系统的 Dalvik 虚拟机，扩展 Android Framework 中 dalvik. system.DexClassLoader类的功能，扩展后的dalvik. system. DexClassLoader类提供调用接口，接收内存中的DEX格式文件，以加载DEX格式文件的方式加载所述的DEX格式文件；  在Android源码中Linux内核和系统库的源码部分增加一个接口，所述接口从指定的内存地址加载SO格式文件；  编译整个Android源码工程，生成相应的系统镜像和开发工具。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="5" class="claim">
      <div class="claim-text">5.如权利要求4所述的Android操作系统的源代码修改方法，其特征在于，加载所述的DEX格式文件时产生的.odex临时文件保存在内存中。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="6" class="claim">
      <div class="claim-text">6.	一种Android平台软件保护方法，其特征在于，适用于权利要求I所述的系统，所述方法包括：  在线服务器对存储的部分或全部的应用软件的核心代码进行加密；  在线服务器对存储的应用软件的核心代码进行数字签名；  将应用软件的核心代码所在的文件以及相应的密文发送给智能终端。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="7" class="claim">
      <div class="claim-text">7.	一种服务器，其特征在于，所述服务器为权利要求I所述系统中的在线服务器，所述服务器包括：  加密单元，用于对存储的部分或全部的应用软件的核心代码进行加密；  数字签名单元，用于对存储的应用软件的核心代码进行数字签名；  发送单元，用于将应用软件的核心代码所在的文件以及相应的密文发送给智能终端。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="8" class="claim">
      <div class="claim-text">8.	&#8212;种Android平台软件保护方法，其特征在于，适用于权利要求I所述的系统，所述方法包括： 智能终端接收在线服务器发送来的应用软件的核心代码所在的文件以及相应的密文；根据接收到的文件验证数字签名并解密得到应用软件的核心代码文件；  将应用软件的核心代码文件拷贝到内存中，调用修改后的Android操作系统的接口完成核心代码文件的加载；  根据需要通过API接口调用应用软件的核心代码；  释放掉存储核心代码的内存。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="9" class="claim">
      <div class="claim-text">9.如权利要求8所述的Android平台软件保护方法,其特征在于,智能终端在接收在线服务器发送来的应用软件的核心代码所在的文件以及相应的密文之前，向在线服务器发送需要应用软件核心代码的请求。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="10" class="claim">
      <div class="claim-text">10.	一种智能终端，其特征在于所述智能终端为权利要求I所述系统中的智能终端，所述智能终端包括修改后的Android操作系统,还包括：  接收单元，用于接收在线服务器发送来的应用软件的核心代码所在的文件以及相应的密文；  验证单元，用于根据接收到的文件验证数字签名并解密得到应用软件的核心代码文件；  加载单元，用于将应用软件的核心代码文件拷贝到内存中，调用修改后的Android操作系统的接口完成核心代码文件的加载；  调用单元，用于根据需要通过API接口调用应用软件的核心代码；  释放单元，用于释放掉存储核心代码的内存。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="11" class="claim">
      <div class="claim-text">11.如权利要求10所述的智能终端，其特征在于，还包括：  发送单元，用于向在线服务器发送需要应用软件核心代码的请求。</div>
    </div>
  </div> </div>
  </div></div><div class="patent-section patent-description-section"><div class="patent-section-header"><span class="patent-section-title"> 说明</span></div><div class="patent-text"><div mxw-id="PDES52381408" lang="ZH" load-source="patent-office" class="description">
    <p>一种Android平台软件保护系统、方法及设备</p>
    <p>技术领域</p>
    <p>[0001]	本发明涉及一种计算机软件保护技术，特别是用于Android平台的软件防泄密和版权保护系统及方法、服务器和智能终端。</p>
    <p>背景技术</p>
    <p>[0002]	目前，由Google公司主导开发的Android操作系统已经是全球市场占有率最高的移动智能终端平台。Android的应用软件数量不断增长，并建立了良好的软件销售模式。与传统PC平台一样，Android应用软件的成功商业化,也引发了对它们的逆向分析和破解。</p>
    <p>[0003]	对应用软件的逆向分析（reversing analysis)包括：</p>
    <p>  一、对软件的可执行代码采用反汇编、反编译、调试等方法进行分析，以了解其代码的 执行流程和算法实现等；</p>
    <p>  二、对软件的配置文件和数据文件进行分析，以获得这些文件的格式和语义等；</p>
    <p>  三、对软件的网络通信数据进行分析，以获得软件与服务器通信的协议格式、协议语义、数据加密方法和数据具体含义等。</p>
    <p>[0004]	其中，后两类分析建立在第一类分析的基础之上，即需要先分析可执行代码，才能进一步分析配置文件、数据文件、网络通信数据等。</p>
    <p>[0005]	通过逆向分析，攻击者可以获得软件中的商业机密。例如，在手机的反病毒软件中，恶意代码检测算法、特征匹配算法等可执行代码，以及恶意代码特征库等数据文件，一旦被攻击者逆向分析得到具体细节，既可能被其他同类软件所利用，也可能被恶意代码作者进行针对性防御或攻击。再比如，在手机的网银支付软件中，通过网络传输的数据涉及用户的身份认证和金融账户信息，一旦软件代码、配置文件、网络通信数据等被攻击者通过逆向分析彻底了解，就有可能导致进一步的恶意攻击，对个人和银行造成直接的经济损失。</p>
    <p>[0006]	破解（cracking)是在逆向分析基础上的一种具有专门目的的攻击。商业软件需要用户付费后使用。对未付费用户，一般不允许使用，或只能使用少量功能，或只能使用一段试用期。为了保障这一策略，商业软件通常包含对用户许可（License)和用户身份的鉴别(以下将负责这一鉴别工作的代码片段称为“鉴权代码”)，以判断用户是否已经付费。攻击者通过对鉴权代码的逆向分析，并进一步篡改代码执行流程、篡改、复制或伪造相关配置文件、篡改网络数据、修改内存数据等，使未付费用户也可以获得付费用户才拥有的功能。这种攻击称之为破解，它极大地损害了软件开发者的经济权益，违反了知识产权保护的相关法律。</p>
    <p>[0007]	Android平台的应用软件开发一般采用Java语言。源代码被编译成Java类文件，再用Android SDKCSoftware Development Kit,软件开发工具包)中的工具转换为DEX格式的二进制可执行文件，最后与软件配置、资源文件等一起打包成APK格式文件，即Android应用软件安装包。用户下载APK格式文件，并安装到Android终端。应用软件运行时，DEX格式文件中的指令在Android系统中的Dalvik虚拟机之中执行。</p>
    <p>[0008]	Android是一个源代码完全开放的操作系统。无论是DEX格式文件的指令编码方法，还是Dalvik虚拟机的工作原理，都因为源码公开而已经被人们所知。目前已经出现了针对DEX格式文件的各类逆向分析工具，包括反汇编工具smali、反编译工具dex2jar，以及针对APK格式文件的apktool等自动化工具。此外，逆向分析和破解的技术在传统PC平台上已经出现多年，Android平台的攻击者已经借鉴了传统的方法。在这些工具和方法的帮助下，目前攻击者已经可以轻易地对绝大部分Android应用软件进行逆向分析和破解。</p>
    <p>[0009]	例如，常见的破解流程是：使用apktool解开APK文件，apktool会调用smali对其中的DEX格式文件进行反汇编；攻击者分析smali的反汇编结果，了解该应用软件的代码流程；然后找到鉴权代码，对关键的部分进行修改，例如把鉴权时的条件跳转指令改成无条件跳转指令；再使用apktool将这些修改过的代码重新打包成APK格式文件，并重新签名。这样就得到了一个破解后的APK文件。</p>
    <p>[0010]	此外，Android应用程序还可以使用NDK (Native Development Kit,原生开发工具包）开发。Android系统运行于Linux之上,每个应用软件所在的Dalvik虚拟机是一个独立的Linux进程。Android NDK提供了这样一种开发方法：程序员用C语言编写软件的 部分功能，由NDK的工具将源码编译为Linux中的动态链接文件（SO格式文件）;用Java语言编写其他功能，用SDK工具编译为DEX格式文件；最后由SDK将SO格式文件和DEX格式文件一起打包为APK格式文件。在运行时，DEX中的代码加载SO格式文件，并调用其提供的函数接口。</p>
    <p>[0011]	NDK开发中的SO格式文件是Linux ELF格式标准的一种，其中的指令格式是ARM体系结构的ARM指令集或Thumb指令集。目前有IDA Pro等反汇编工具和x86/ARMDecompiler等反编译工具可以对这种文件进行逆向分析。</p>
    <p>[0012]目前这一平台防御逆向分析和破解方法包括：</p>
    <p>  一、代码混淆。即自动化地用等效但冗余复杂的代码替换开发人员手写的Java源代码，提高攻击者进行逆向分析的工作量。</p>
    <p>[0013]	二、更改字符串信息。在高质量的Java源代码中，包、类、方法、变量的名字往往具有较好的可读性，即具有明确含义，因此可以通过名称猜测其功能。DEX文件完整地保存了这些名字，为逆向分析提供了方便。但大部分名字只在应用程序内部使用，例如自定义的类。如果将这些名字替换为无意义的字符串，并不会影响程序的运行，但会使逆向分析陷入理解困难。Android SDK中的ProGuard工具就利用这种方法来保护软件。</p>
    <p>[0014]	三、使用NDK开发。如前所述，对SO文件的逆向分析涉及对ARM格式汇编语言的理解，一定程度上提高了对软件代码进行逆向分析的难度。</p>
    <p>[0015]	这些方法存在以下问题：</p>
    <p>  1.无论是代码还是加密后的数据，都以文件形式长期存在于Android安装文件和Android设备之中，攻击者可以轻易地获得；</p>
    <p>  2.通过代码混淆，代码依然可以被反汇编和反编译，只是提高了理解代码所需要的时</p>
    <p>间；</p>
    <p>  3.通过更改字符串信息，代码本身的逻辑并未发生改变，依然可以被反汇编和反编译，同样只是提高了理解代码所需要的时间；</p>
    <p>  4.随着攻击者逐渐了解熟悉ARM格式汇编语言，并随着该平台反编译工具的不断成熟，采用NDK开发的方法所提高的逆向分析难度会越来越低。[0016]	理论上来说，应用软件在计算设备中的执行最终都无法躲避被逆向分析。软件保护的本质是不断提高逆向分析和破解的难度与时间成本，使攻击者得到有价值信息需要付出的成本高于其所能获得的利益。</p>
    <p>[0017]	软件保护会带来额外的软件开发成本，例如增加开发难度、延长开发时间等。因此，从是否需要特别保护的角度，逻辑上可以将应用软件的代码分为两部分：</p>
    <p>  一、非核心代码，不需要特别保护，例如与用户交互的界面、复用的第三方库代码等；</p>
    <p>  二、核心代码，需要特别保护，例如重要的算法、鉴权代码、重要配置数据等。</p>
    <p>[0018]	这两个部分如何划分，没有通用的方法，由每个应用软件的实际情况决定。例如，在反病毒软件中，恶意代码检测算法、特征匹配算法等都是核心模块；在网银软件中，用户登陆代码、金融交易代码等都是核心模块；在收费商业软件中，付费代码、鉴权代码等都是核心模块。</p>
    <p>&#183;[0019]	本发明还涉及对Android系统中DEX文件动态加载技术的修改。</p>
    <p>[0020]	通常情况下，Android应用软件中的DEX文件是在安装时由系统保存在指定的位置。为了扩展应用软件的能力，Android提供了 DEX文件动态加载技术。具体而言，应用软件在运行时，可以通过dalvik. system. DexClassLoader类加载一个之前没有安装的APK格式或JAR格式文件，并将该文件中所包含的名为“classes, dex”的DEX格式文件加载至Dalvik虚拟机；进一步地,可以通过该类的findClassO等方法,调用这个DEX格式文件中实现的代码。</p>
    <p>[0021 ] 到目前为止的Android版本(从I. 0至4. 0)，通过上述方法动态加载DEX格式文件存在下列要求：包含了“classes, dex”的APK或JAR格式文件必须是一个物理文件，保存在设备内置的NAND闪存或外置的SD卡中；动态加载时，系统会在设备内置的NAND闪存或外置的SD卡中生成一个临时文件，该文件是对DEX格式文件的优化(扩展名为.odex)。</p>
    <p>发明内容</p>
    <p>[0022]	针对以上技术问题，本发明主要公开了一种在Android系统中保护应用软件不受逆向分析和破解系统和方法。为Android系统中Dalvik虚拟机和Linux系统库增加接口，使Android具有从内存中直接加载DEX格式文件和SO格式文件的能力；将应用软件的核心代码存储在在线服务器中，加密并签名后发送给安装在客户端的应用软件；应用软件接收到核心代码后验证签名并解密，然后将明文存储在内存中，直接加载到系统中，然后调用其中的代码，最后释放内存。该方法极大地增加了攻击者进行逆向分析和破解的难度，能有效保护Android应用软件的安全。</p>
    <p>[0023]	本发明由三部分组成：</p>
    <p>  1、修改过的Android操作系统，实现DEX格式文件在内存中的动态加载；</p>
    <p>  2、应用软件的非核心代码，安装在智能终端(包括手机、平板电脑等）中，且该智能终端使用上述修改过的Android操作系统；</p>
    <p>  3、应用软件的核心代码，存储在长期在线的服务器中。</p>
    <p>[0024]	首先，对Android操作系统的源代码进行修改。在Dalvik虚拟机上增加这样的功能，使Dalvik虚拟机可以从指定的内存地址直接加载一个DEX格式文件，并使得应用程序可以通过其中代码的包名、类名、方法名，调用这些代码在Dalvik虚拟机中执行。在Android底层的Linux上增加这样的功能，使Linux可以从指定的内存地址直接加载一个SO格式文件，并使得应用程序可以通过其中代码的API接口，调用这些代码在Linux中执行。</p>
    <p>[0025]	应用软件的核心代码是由Java源代码经过Android SDK中的工具编译成的DEX格式文件，或者是由C源代码经过Android NDK中的工具编译成的SO格式文件。存储这些核心代码的服务器接收智能终端中应用软件非核心代码发来的请求，将其请求的核心代码加密、进行数字签名，然后发送给智能终端中的应用软件。</p>
    <p>[0026]	应用软件的非核心代码位于完整的Android应用程序（即APK格式文件)之中。软件开发者将这一应用程序公开分发，用户将其安装至智能终端中。非核心代码除了完成应用软件所需要的功能以外，还具备以下功能：向服务器发送请求，接收发来的核心代码，并验证其数字签名；申请一段内存，将核心代码解密至这段内存；根据核心代码是DEX格式还是SO格式，使Dalvik虚拟机或Linux从这段内存中直接加载核心代码，然后根据需要通过API接口调用核心代码的功能；最后当应用软件不再使用核心代码时，释放掉这一段内存。 [0027]	具体而言，本发明提供了一种Android平台软件保护系统，包括智能终端和在线服务器：</p>
    <p>  所述智能终端包括修改后的Android操作系统和应用软件的非核心代码；所述修改后的Android操作系统对Android操作系统的源代码进行修改，实现应用软件的核心代码在内存中的动态加载；所述应用软件的非核心代码在完整的Android应用程序之中，具备应用软件所需要的功能以外的功能，包括：向在线服务器发送请求，接收在线服务器发来的核心代码，经过验证之后在内存中加载应用软件的核心代码，根据需要通过API接口调用应用软件的核心代码；</p>
    <p>  在线服务器存储应用软件的核心代码，接收智能终端中应用软件非核心代码发来的请求，将被请求的核心代码经过处理之后发送给智能终端中的应用软件非核心代码。</p>
    <p>[0028]	所述系统应用软件的核心代码包括DEX格式文件和SO格式文件。</p>
    <p>[0029]	所述系统的在线服务器存储应用软件的核心代码，接收智能终端中应用软件非核心代码发来的请求，将部分或者全部被请求的核心代码进行加密和/或将被请求的核心代码进行数字签名之后发送给智能终端中的应用软件非核心代码。</p>
    <p>[0030]	本发明还提供了一种Android操作系统的源代码修改方法，适用于所述的系统，所述方法包括：</p>
    <p>   对 Android 操作系统的 Dalvik 虚拟机，扩展 Android Framework 中 dalvik. system.DexClassLoader类的功能，扩展后的dalvik. system. DexClassLoader类提供调用接口，接收内存中的DEX格式文件，以加载DEX格式文件的方式加载所述的DEX格式文件；</p>
    <p>  在Android源码中Linux内核和系统库的源码部分增加一个接口，所述接口从指定的内存地址加载SO格式文件；</p>
    <p>  编译整个Android源码工程，生成相应的系统镜像和开发工具。</p>
    <p>[0031]	所述方法加载所述的DEX格式文件时产生的.odex临时文件保存在内存中。</p>
    <p>[0032]	本发明还提供了一种Android平台软件保护方法，适用于所述的系统，所述方法包括：</p>
    <p>  在线服务器对存储的部分或全部的应用软件的核心代码进行加密；在线服务器对存储的应用软件的核心代码进行数字签名；</p>
    <p>  将应用软件的核心代码所在的文件以及相应的密文发送给智能终端。</p>
    <p>[0033]	本发明提供的一种服务器，所述服务器所述系统中的在线服务器，所述服务器包括：</p>
    <p>  加密单元，用于对存储的部分或全部的应用软件的核心代码进行加密；</p>
    <p>  数字签名单元，用于对存储的应用软件的核心代码进行数字签名；</p>
    <p>  发送单元，用于将应用软件的核心代码所在的文件以及相应的密文发送给智能终端。</p>
    <p>[0034]	本发明提供的一种Android平台软件保护方法，适用于所述的系统，所述方法包括：</p>
    <p> 智能终端接收在线服务器发送来的应用软件的核心代码所在的文件以及相应的密 </p>
    <p>文；</p>
    <p>  根据接收到的文件验证数字签名并解密得到应用软件的核心代码文件；</p>
    <p>  将应用软件的核心代码文件拷贝到内存中，调用修改后的Android操作系统的接口完成核心代码文件的加载；</p>
    <p>  根据需要通过API接口调用应用软件的核心代码；</p>
    <p>  释放掉存储核心代码的内存。</p>
    <p>[0035]	进一步的，智能终端在接收在线服务器发送来的应用软件的核心代码所在的文件以及相应的密文之前，向在线服务器发送需要应用软件核心代码的请求。</p>
    <p>[0036]	本发明提供了一种智能终端，所述智能终端为所述系统中的智能终端，所述智能终端包括修改后的Android操作系统,还包括：</p>
    <p>  接收单元，用于接收在线服务器发送来的应用软件的核心代码所在的文件以及相应的密文；</p>
    <p> 验证单元，用于根据接收到的文件验证数字签名并解密得到应用软件的核心代码文</p>
    <p>件；</p>
    <p>  加载单元，用于将应用软件的核心代码文件拷贝到内存中，调用修改后的Android操作系统的接口完成核心代码文件的加载；</p>
    <p>  调用单元，用于根据需要通过API接口调用应用软件的核心代码；</p>
    <p>  释放单元，用于释放掉存储核心代码的内存。</p>
    <p>[0037]	所述的智能终端还包括：</p>
    <p>  发送单元，用于向在线服务器发送需要应用软件核心代码的请求。</p>
    <p>[0038]	本发明的有益效果是：</p>
    <p>  其一，与现有的软件保护方案相比，本发明所述方法使攻击者极难获得应用软件的核心代码，因而无法对其进行逆向分析。</p>
    <p>[0039]	首先，公开分发的应用软件不包含核心代码，攻击者无法像以往从软件市场或下载站点下载到应用软件，直接对其做静态的反汇编就能看到所有代码，要获得这一部分代码必须将该应用软件运行起来，使其连接服务器。</p>
    <p>[0040]	其次，在服务器和智能终端上应用软件之间的通信完全采用加密和数字签名，SP便攻击者抓取了网络通信数据，在没有密钥的情况下，无法解出明文的核心代码。使用数字签名，也保证了攻击者无法在这一过程中伪造出虚假的核心代码，骗取应用软件加载。[0041]	最后，在智能终端的Android操作系统中，核心代码始终只存在于内存中，而且只在应用软件需要其中功能时存在于内存中，而没有以文件形式存在于设备内置的NAND闪存或外置的SD卡中。目前,Android应用程序所运行的Dalvik虚拟机位于独立的Linux进程上，且进程权限为该应用程序独有的用户创建，攻击者难以读取到核心代码所在的虚拟内存空间。即便攻击者能够读到，由于存储核心代码的内存空间是运行时动态分配的，考虑到Linux和Dalvik在内存管理的复杂性，攻击者也很难准确找到核心代码在内存中具体哪个地址，以及这段内存的实际长度。此外，目前的Linux内核和Android 4. 0以后都开始采用ASLR (地址空间分布随机化）技术，这进一步加大了攻击者定位核心代码内存地址的的难度。</p>
    <p>[0042]	再者，即便攻击者最终获得了核心代码，对其逆向分析和修改后，也极难将其植入应用软件所在进程的内存空间中，更难以要求应用程序加载这份被植入的内存段(这涉及新的内存分配、程序指令的动态修改等)。因此，无法对应用软件进行破解。</p>
    <p>[0043]	此外，本发明所述软件保护技术与其他现有软件保护技术的保护原理并不相同， 因此也不冲突，可以与现有其他保护技术共同使用，例如代码混淆、更改字符串信息等。因此，这一方案可以与现有技术共同使用，更为全面地保护软件安全。</p>
    <p>附图说明</p>
    <p>[0044]	为了更清楚地说明本发明或现有技术中的技术方案，下面将对实施例或现有技术描述中所需要使用的附图作简单地介绍，显而易见地，下面描述中的附图仅仅是本发明中记载的一些实施例，对于本领域普通技术人员来讲，在不付出创造性劳动的前提下，还可以根据这些附图获得其他的附图。</p>
    <p>[0045]	图I为本发明一种Android平台软件保护系统示意图；</p>
    <p>  图2为本发明一种Android操作系统的源代码修改方法流程图；</p>
    <p>  图3为本发明在线服务器工作流程图；</p>
    <p>  图4为本发明在线服务器系统示意图；</p>
    <p>  图5为本发明智能终端工作流程图；</p>
    <p>  图6为本发明智能终端系统示意图。</p>
    <p>具体实施方式</p>
    <p>[0046]	为了使本技术领域的人员更好地理解本发明实施例中的技术方案，并使本发明的上述目的、特征和优点能够更加明显易懂，下面结合附图对本发明中技术方案作进一步详细的说明。</p>
    <p>[0047]	首先介绍本发明提供的一种Android平台软件保护系统，如图I所示，包括智能终端101和在线服务器102 ：</p>
    <p>  所述智能终端101包括修改后的Android操作系统和应用软件的非核心代码；所述修改后的Android操作系统对Android操作系统的源代码进行修改,实现应用软件的核心代码在内存中的动态加载；所述应用软件的非核心代码在完整的Android应用程序之中，具备应用软件所需要的功能以外的功能，包括：向在线服务器102发送请求，接收在线服务器102发来的核心代码，经过验证之后在内存中加载应用软件的核心代码，根据需要通过API接口调用应用软件的核心代码；</p>
    <p>  在线服务器102存储应用软件的核心代码，接收智能终端101中应用软件非核心代码发来的请求，将被请求的核心代码经过处理之后发送给智能终端101中的应用软件非核心代码。</p>
    <p>[0048]	应用软件的核心代码包括DEX格式文件和SO格式文件。</p>
    <p>[0049]	在线服务器102存储应用软件的核心代码，接收智能终端101中应用软件非核心代码发来的请求，将部分或者全部被请求的核心代码进行加密和/或将被请求的核心代码进行数字签名之后发送给智能终端101中的应用软件非核心代码。</p>
    <p>[0050]	本发明包括修改Dalvik虚拟机和Linux系统的方法，主要流程如图2所示。</p>
    <p>[0051]	S201 :修改 Dalvik 虚拟机   修改Dalvik虚拟机的主要工作是，扩展Android Framework中dalvik. system.DexClassLoader类的能力，使其接收内存中一段DEX格式文件的数据，以加载DEX格式文件的方式加载这段数据，并提供与现有接口类似的调用其中代码的接口。此外，从安全的角度考虑，还要使加载过程中产生的.odex临时文件不存储在设备内置的NAND闪存或外置的SD卡中，而是也保存在内存中。</p>
    <p>[0052]	在Android 4. 0. l_rl版的源码中，已经实现了上述功能的一部分代码。</p>
    <p>[0053]具体而言，在源码的	libcore/dalvik/src/main/java/dalvik/system/DexFile.java文件中，存在如下的 JNI 接口声明：native private static int openDexFile (byte []fileContents)，该接口的功能是从内存中的字节数组中读取一个DEX格式文件。该JNI接口的函数实现位于源码的 dalvik/vm/native/dalvik_system_DexFile. cpp 文件(第248 行），函数名是 Dalvik_dalvik_system_DexFile_openDexFile_bytearray,它调用了dvmRawDexFiIeOpenArray 函数，后者的实现位于源码的 dalvik/vm/RawDexFile. cpp 文件(第249行)。分析这两个函数可知，它在构造一个DEX格式文件结构时，产生的.odex临时文件也保存在了内存里。</p>
    <p>[0054]	接下来开始在源码中增加一些代码，以完成对Dalvik虚拟机的修改。</p>
    <p>[0055]在源码的	libcore/dalvik/src/main/java/dalvik/system/DexFile. java 文件中，为 DexFile类增加一个构造函数,原型为 private DexFile (byte [] fileContents, intflags),其代石马与现有的private DexFile (String sourceName, String outputName, intflags)函数的代码一样,但其中的openDexFile调用使用前面所述的那个JNI接口。</p>
    <p>[0056]在源码的	libcore/dalvik/src/main/java/dalvik/system/DexFile. java 文件中，为 DexFile 类增加一个方法，原型为 static public DexFile IoadDex (byte []fileContents, int flags),其代码与现有的IoadDex方法相似,区别是调用前面实现的这个DexFile构造函数。</p>
    <p>[0057]	在源码的 libcore/dalvik/src/main/java/dalvik/system/DexPathList.java文件中，为DexPathList类增加一个方法，原型为private static DexFileIoadDexFile (byte [] fileContents),其实现代码与现有IoadDexFile方法相似,但调用前面实现的DexFile类的IoadDex方法。</p>
    <p>[0058]	在源码的 libcore/dalvik/src/main/java/dalvik/system/DexPathList.java 文件中，为 DexPathList 类增加一个方法，原型为 private static Element[]makeDexElements (byte [] fileContents)，其实现代码与现有的 makeDexElements 方法相似，但在第207行的if■语句中只进入第一条分支，并调用前面实现的DexPathList类的IoadDexFile 方法。</p>
    <p>[0059]在源码的	libcore/dalvik/src/ main/java/dalvik/system/DexPathList. java文件中，为DexPathList类增加一个构造函数，原型为public DexPathList (ClassLoaderdefiningContext, byte[] fileContents)，其实现代码与现有构造函数相似，但调用前面实现的 DexPathList 类的 makeDexElements 方法。</p>
    <p>[0060]	在源码的Iib core/dalvik/src/main/java/dalvik/system/BaseDexClassLoader. java文件中，为BaseDexClassLoader类增加一个构造函数，原型为public BaseDexClassLoader (byte [] fileContents)，其实现代码与现有构造函数相似，但调用前面实现的DexPathList类的构造函数。</p>
    <p>[0061]在源码的	libcore/dalvik/src/ main/java/dalvik/system/DexClassLoader. java文件中，为DexClassLoader类增加一个构造函数，原型为publicDexClassLoader (byte[] fileContents),其实现代码与现有构造函数一样，但调用前面实现的BaseDexClassLoader类的构造函数。</p>
    <p>[0062]	至此，我们得到了符合本发明所要求的修改后的Dalvik虚拟机源代码。</p>
    <p>[0063]	S202 :修改 Linux 系统    修改Linux系统的主要目的是,在Android源码工程中的Linux内核和系统库部分增加部分代码，使其增加一个接口，该接口的主要功能是从指定的内存地址加载一段SO格式文件的数据。</p>
    <p>[0064]	这一工作目前在业界已有多种方法实现。例如，在glibc中增加一个dlopen_mem()的系统调用，原型为 void *dlopen_mem (char *addr, size_t len, int flag),其实现代码是在glibc标准库中现有dlopenO系统调用的源码基础上修改而成。具体而言，dlopen ()的第一个参数是要打开的SO格式文件的磁盘路径，它会打开这个文件并将其全部内容读取出来。在dlopen_mem()的实现中，直接从参数addr和Ien读取数据,然后继续执行dlopenO的后续代码即可。</p>
    <p>[0065]	至此，我们得到了符合本发明所要求的修改后的Linux系统源代码。</p>
    <p>[0066]	S203 :编译 Android 工程</p>
    <p>  采用常规方法将整个Android源码工程编译，生成相应的系统镜像、SDK开发工具、NDK开发工具。</p>
    <p>[0067]	这样，在得到的SDK开发工具中，就可以使用新增的DexClassLoader (byte口fileContents)接口，从内存中动态加载DEX格式文件；在得到的NDK开发工具中，就可以使用新增的dlopenjnemO系统调用，从内存中动态加载SO格式文件；在新的系统镜像中，使用了上述接口和系统调用的应用软件就可以正常运行。</p>
    <p>[0068]	本发明还提供了存储核心代码的在线服务器的工作流程，如图3所示，包括：</p>
    <p>  S301 :加密核心代码</p>
    <p>  核心代码以DEX格式文件或SO格式文件的形式存在，对核心代码的全部或一部分采用通用的密码学算法进行加密，以保证其在传输过程中的保密性。可以使用对称加密，也可以使用非对称加密。[0069]	例如，选择对称加密算法AES，使用的密钥记为akey，对核心代码所在的文件file进行加密，得到加密后的文件file_enc。</p>
    <p>[0070]	再选择一个非对称加密算法,例如RSA,将使用的公钥记为rkey_pub,私钥记为rkey_pri。使用私钥rkey_pri对AES密钥akey加密,得到akey的密文akey_enc。</p>
    <p>[0071]	在这里，RSA算法使用的公钥和私钥在事先就生成，并将公钥rkey_pub编写到相应的客户端应用软件中。</p>
    <p>[0072]	S302 :签名核心代码</p>
    <p>  对核心代码采用通用的数字签名算法进行签名，以保证文件的完整性。</p>
    <p>[0073]	例如，采用一种最经典的数字签名方法。使用哈希算法SHAl对核心代码所在文件密文file_enc进行数字摘要,得到一个哈希值hvalue。 </p>
    <p>[0074]	使用RSA算法以及上述私钥rkey_pri对这个哈希值hvalue进行加密,得到密文hvalue_enc。</p>
    <p>[0075]	S303 :发送给客户端</p>
    <p>  将核心代码所在文件密文file_enc、AES算法所用密钥的密文akey_enc、哈希值的密文hvalue_enc, &#8212;同发送给客户端。</p>
    <p>[0076]	相应的，本发明还提供了一种服务器，如图4所示，所述服务器为所述系统中的在线服务器102，所述服务器包括：</p>
    <p>  加密单元401，用于对存储的部分或全部的应用软件的核心代码进行加密；</p>
    <p>  数字签名单元402，用于对存储的应用软件的核心代码进行数字签名；</p>
    <p>  发送单元403，用于将应用软件的核心代码所在的文件以及相应的密文发送给智能终端。</p>
    <p>[0077]	本发明还提供了应用软件中非核心代码的工作流程，在安装到客户端的应用软件中，包含了非核心的代码。这些代码可以分为两部分：一、与该软件具体应用相关的代码；二、负责加载核心代码的代码。本发明只涉及后一部分代码，下面给出其主要工作流程和实现方法。如图5所示,包括：</p>
    <p>   S501 :从服务器接收S303发送给客户端的file_enc、akey_enc、hvalue_enc。</p>
    <p>[0078]	S502 :验证数字签名，以保证文件的完整性。</p>
    <p>[0079]	例如，对S302中所述的签名方法，首先用事先选择并编写到应用软件的RSA公钥rkey_pub,解密 hvalue_enc,得到哈希值 hvalue。</p>
    <p>[0080]	接下来，用SHAl算法对发送来的file_enc进行数字摘要，得到另一个哈希值hvalue2,比较hvalue和hvalue2是否完全相同。</p>
    <p>[0081]	若不相同，则认为接收到的核心代码是不完整的，有可能被篡改，报告异常并退出软件。</p>
    <p>[0082]	若相同，则认为接收到的核心代码是完整的，进入下一步。</p>
    <p>[0083]	S503 :用 RSA 公钥 rkey_pub 解密 akey_enc,得到 AES 算法密钥 akey。用 AES 算法，以akey作为密钥，解密file_enc，得到核心代码所在文件file的完整内容。</p>
    <p>[0084]	S504 :根据核心代码所在文件是DEX格式还是SO格式，在Java中或者C中申请该文件大小的内存，并将文件内容拷贝至其中。</p>
    <p>[0085]	具体而言，若文件是DEX格式,贝U采用Java语言中的byte数组记录内存地址,通过new方法申请内存,使用System, arraycopy方法拷贝；若文件是SO格式,则在NDK中使用C语言的char *指针记录内存地址,通过malIoc函数申请内存，使用memcpy函数拷贝，使用int型变量记录数据长度。</p>
    <p>[0086]	S505 :调用此前修改Dalvik虚拟机和Linux系统得到的新的函数接口，从前一步的内存中直接加载核心代码。</p>
    <p>[0087]若文件是	DEX 格式，则调用 S201 中得到的 public DexClassLoader (byte []fileContents)构造函数,将内存地址作为参数，得到一个DexClassLoader对象，即完成了DEX格式对象的动态加载；</p>
    <p>   若文件是SO格式，则调用 S202 中得到的 void *dlopen_mem(char *addr, size_t len,int flag)系统调用，其参数addr为S504中得到的内存地址，参数len为S504中记录的数据长度，参数flag为0，得到一个void *型的句柄，即完成了 SO格式对象的动态加载。 </p>
    <p>[0088]	S506:根据应用软件的具体需求，调用核心代码中的类、方法、函数等。</p>
    <p>[0089]	若文件是DEX格式，则使用S505中得到的DexClassLoader对象的IoadClassO方法，根据核心代码中Java类的名称得到该类的Class对象；进一步，使用该Class对象的getDeclaredMethod方法，根据核心代码中的Java类的方法的名称，得到该类中的方法的Method对象。现在,就可以调用这个Method对象的invoke方法,来调用该方法了。</p>
    <p>[0090]	若文件是SO格式，则使用S505中得到的void *型的句柄，根据核心代码中C语言函数的名称，通过dlsymO系统调用，得到这个函数的指针。现在，就可以直接调用这个函数指针，来运行其中实现的代码了。</p>
    <p>[0091]	S507 :但应用软件不再需要使用核心代码时，释放掉存储了核心代码的内存。当核心代码所在文件是DEX格式,则调用Java语言中byte[]对象的delete方法；当文件是SO格式，则调用C语言中的free方法。</p>
    <p>[0092]	相应的，本发明还提供了一种智能终端，所述智能终端为所述系统中的智能终端101,所述智能终端101包括修改后的Android操作系统,还包括：</p>
    <p>  接收单元601，用于接收在线服务器发送来的应用软件的核心代码所在的文件以及相应的密文；</p>
    <p>  验证单元602，用于根据接收到的文件验证数字签名并解密得到应用软件的核心代码文件；</p>
    <p>  加载单元603，用于将应用软件的核心代码文件拷贝到内存中，调用修改后的Android操作系统的接口完成核心代码文件的加载；</p>
    <p>  调用单元604，用于根据需要通过API接口调用应用软件的核心代码；</p>
    <p>  释放单元605，用于释放掉存储核心代码的内存。</p>
    <p>[0093]	所述的智能终端101，还包括：</p>
    <p>  发送单元600，用于向在线服务器发送需要应用软件核心代码的请求。</p>
    <p>[0094]	本说明书中方法的实施例采用递进的方式描述，对于系统的实施例而言，由于其基本相似于方法实施例，所以描述的比较简单，相关之处参见方法实施例的部分说明即可。</p>
    <p>[0095]	虽然通过实施例描绘了本发明，本领域普通技术人员知道，本发明有许多变形和变化而不脱离本发明的精神，希望所附的权利要求包括这些变形和变化而不脱离本发明的精神。</p>
  </div>
  </div></div><div class="patent-section patent-tabular-section"><a id="backward-citations"></a><div class="patent-section-header"><span class="patent-section-title">专利引用</span></div><table class="patent-data-table"><thead class="patent-data-table-thead"><tr class="patent-data-table"><th class="patent-data-table-th">引用的专利</th><th class="patent-data-table-th"> 申请日期</th><th class="patent-data-table-th">公开日</th><th class="patent-data-table-th"> 申请人</th><th class="patent-data-table-th">专利名</th></tr></thead><tr><td class="patent-data-table-td citation-patent"><a href="/patents/CN1606027A?cl=zh">CN1606027A</a><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td patent-date-value">2003年10月10日</td><td class="patent-data-table-td patent-date-value">2005年4月13日</td><td class="patent-data-table-td ">深圳市派思数码科技有限公司</td><td class="patent-data-table-td ">利用指纹进行软件版权保护的方法及其应用装置</td></tr><tr><td class="patent-data-table-td citation-patent"><a href="/patents/CN102087605A?cl=zh">CN102087605A</a><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td patent-date-value">2011年1月28日</td><td class="patent-data-table-td patent-date-value">2011年6月8日</td><td class="patent-data-table-td ">宇龙计算机通信科技(深圳)有限公司</td><td class="patent-data-table-td ">一种基于android平台应用安装控制方法及系统</td></tr><tr><td class="patent-data-table-td citation-patent"><a href="/patents/CN102236757A?cl=zh">CN102236757A</a><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td patent-date-value">2011年6月30日</td><td class="patent-data-table-td patent-date-value">2011年11月9日</td><td class="patent-data-table-td ">北京邮电大学</td><td class="patent-data-table-td ">一种适用于Android系统的软件保护方法及系统</td></tr><tr><td class="patent-data-table-td citation-patent"><a href="/patents/US6343280">US6343280</a><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td patent-date-value">1998年12月15日</td><td class="patent-data-table-td patent-date-value">2002年1月29日</td><td class="patent-data-table-td ">Jonathan Clark</td><td class="patent-data-table-td ">Distributed execution software license server</td></tr><tr><td class="patent-data-table-td citation-patent"><a href="/patents/US7634521">US7634521</a><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td patent-date-value"></td><td class="patent-data-table-td patent-date-value">2009年12月15日</td><td class="patent-data-table-td ">Symantec Corporation</td><td class="patent-data-table-td ">Technique for scanning stealthed, locked, and encrypted files</td></tr></table><div class="patent-section-footer">* 由审查员引用</div></div><div class="patent-section patent-tabular-section"><a id="npl-citations"></a><div class="patent-section-header"><span class="patent-section-title">非专利引用</span></div><table class="patent-data-table"><thead class="patent-data-table-thead"><tr class="patent-data-table"><th colspan="3"class="patent-data-table-th">参考文献</th></tr></thead><tr><td class="patent-data-table-td ">1</td><td class="patent-data-table-td "><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td ">ZH.WEIR: "<a href='http://scholar.google.com/scholar?q="Android%E7%B1%BB%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E6%8A%80%E6%9C%AF"'>Android类动态加载技术</a>", 《HTTP://WWW.BLOGJAVA.NET/ZH-WEIR/ARCHIVE/2011/10/29/362294.HTML》, 29 October 2011 (2011-10-29), pages 1 - 4</td></tr></table><div class="patent-section-footer">* 由审查员引用</div></div><div class="patent-section patent-tabular-section"><a id="forward-citations"></a><div class="patent-section-header"><span class="patent-section-title"> 被以下专利引用</span></div><table class="patent-data-table"><thead class="patent-data-table-thead"><tr class="patent-data-table"><th class="patent-data-table-th">引用专利</th><th class="patent-data-table-th"> 申请日期</th><th class="patent-data-table-th">公开日</th><th class="patent-data-table-th"> 申请人</th><th class="patent-data-table-th">专利名</th></tr></thead><tr><td class="patent-data-table-td citation-patent"><a href="/patents/CN103365699A?cl=zh">CN103365699A</a><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td patent-date-value">2012年12月21日</td><td class="patent-data-table-td patent-date-value">2013年10月23日</td><td class="patent-data-table-td ">北京安天电子设备有限公司</td><td class="patent-data-table-td ">基于apk的系统api和运行时字符串提取方法及系统</td></tr><tr><td class="patent-data-table-td citation-patent"><a href="/patents/CN103544414B?cl=zh">CN103544414B</a><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td patent-date-value">2013年10月25日</td><td class="patent-data-table-td patent-date-value">2015年8月19日</td><td class="patent-data-table-td ">江苏通付盾信息科技有限公司</td><td class="patent-data-table-td ">一种Android系统应用的深度代码混淆方法</td></tr><tr><td class="patent-data-table-td citation-patent"><a href="/patents/CN103902910A?cl=zh">CN103902910A</a><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td patent-date-value">2013年12月30日</td><td class="patent-data-table-td patent-date-value">2014年7月2日</td><td class="patent-data-table-td ">北京奇虎科技有限公司</td><td class="patent-data-table-td ">检测智能终端中恶意代码的方法及装置</td></tr><tr><td class="patent-data-table-td citation-patent"><a href="/patents/CN104539432A?cl=zh">CN104539432A</a><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td patent-date-value">2014年12月31日</td><td class="patent-data-table-td patent-date-value">2015年4月22日</td><td class="patent-data-table-td ">北京奇虎科技有限公司</td><td class="patent-data-table-td ">一种对文件进行签名的方法和装置</td></tr><tr><td class="patent-data-table-td citation-patent"><a href="/patents/WO2015058620A1?cl=zh">WO2015058620A1</a><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td patent-date-value">2014年10月10日</td><td class="patent-data-table-td patent-date-value">2015年4月30日</td><td class="patent-data-table-td ">Tencent Technology (Shenzhen) Company Limited</td><td class="patent-data-table-td ">Method and apparatus for generating installation package corresponding to an application and executing application</td></tr></table><div class="patent-section-footer">* 由审查员引用</div></div><div class="patent-section patent-tabular-section"><a id="classifications"></a><div class="patent-section-header"><span class="patent-section-title">分类</span></div><table class="patent-data-table"><thead class="patent-data-table-thead"><tr class="patent-data-table"><th class="patent-data-table-th"> </th><th class="patent-data-table-th"> </th></tr></thead><tr><td class="patent-data-table-td ">国际分类号</td><td class="patent-data-table-td "><span class="nested-value"><a href="https://www.google.com/url?id=yW2rBwABERAJ&amp;q=http://web2.wipo.int/ipcpub/&amp;usg=AFQjCNER44F5jlVoswCkvW3YEcB5lW4moA#refresh=page&amp;notion=scheme&amp;version=20130101&amp;symbol=G06F0021220000">G06F21/22</a></span></td></tr></table><div class="patent-section-footer"></div></div><div class="patent-section patent-tabular-section"><a id="legal-events"></a><div class="patent-section-header"><span class="patent-section-title">法律事件</span></div><table class="patent-data-table"><thead class="patent-data-table-thead"><tr class="patent-data-table"><th class="patent-data-table-th"> 日期</th><th class="patent-data-table-th">代码</th><th class="patent-data-table-th">事件</th><th class="patent-data-table-th">说明</th></tr></thead><tr><td class="patent-data-table-td patent-date-value">2012年10月31日</td><td class="patent-data-table-td ">C06</td><td class="patent-data-table-td ">Publication</td><td class="patent-data-table-td "></td></tr><tr><td class="patent-data-table-td patent-date-value">2012年12月26日</td><td class="patent-data-table-td ">C10</td><td class="patent-data-table-td ">Entry into substantive examination</td><td class="patent-data-table-td "></td></tr><tr><td class="patent-data-table-td patent-date-value">2013年8月14日</td><td class="patent-data-table-td ">C53</td><td class="patent-data-table-td ">Correction of patent for invention or patent application</td><td class="patent-data-table-td "></td></tr><tr><td class="patent-data-table-td patent-date-value">2015年12月16日</td><td class="patent-data-table-td ">C14</td><td class="patent-data-table-td ">Grant of patent or utility model</td><td class="patent-data-table-td "></td></tr></table><div class="patent-section-footer"></div></div><div class="modal-dialog" id="patent-images-lightbox"><div class="patent-lightbox-controls"><div class="patent-lightbox-rotate-controls"><div class="patent-lightbox-rotation-text">旋转</div><div class="rotate-icon rotate-ccw-icon"></div><div class="rotate-icon rotate-cw-icon"></div></div><div class="patent-lightbox-index-counter"></div><a class="patent-lightbox-fullsize-link" target="_blank">原始图片</a><div class="patent-drawings-control patent-drawings-next"><img class="patent-drawings-button-img"src="/googlebooks/images/kennedy/page_right.png" alt="Next page"width="21" height="21" /></div><div class="patent-drawings-control patent-drawings-prev"><img class="patent-drawings-button-img"src="/googlebooks/images/kennedy/page_left.png" alt="Previous page"width="21" height="21" /></div></div><div class="modal-dialog-content"><div class="patent-lightbox-image-holder"><div class="patent-lightbox-placeholder"></div></div></div></div><script>_OC_initPatentsAtb({image_not_available_html: " 未提供图片。\x3ca href\x3d//docs.google.com/viewer?url\x3dpatentimages.storage.googleapis.com/pdfs/824624334234c74969c1/CN102760219A.pdf\x3e查看 PDF\x3c/a\x3e"});</script></div></div></div></div></div><script>(function() {var href = window.location.href;if (href.indexOf('?') !== -1) {var parameters = href.split('?')[1].split('&');for (var i = 0; i < parameters.length; i++) {var param = parameters[i].split('=');if (param[0] == 'focus') {var elem = document.getElementById(param[1]);if (elem) {elem.focus();}}}}})();</script><script>_OC_addFlags({LockSrc:"/books/javascript/lock_50a6672b5f82ffbd39b7a9e87fd4594c.js", Host:"https://www.google.com/", IsBooksRentalEnabled:1, IsBrowsingHistoryEnabled:1, IsWebReaderSvgEnabled:0, IsImageModeNotesEnabled:1, IsOfflineBubbleEnabled:1, IsFutureOnSaleVolumesEnabled:1, IsBooksUnifiedLeftNavEnabled:1, IsMobileRequest:0, IsZipitFolderCollectionEnabled:1, IsAdsDisabled:0, IsEmbeddedMediaEnabled:1, IsImageModeAnnotationsEnabled:1, IsMyLibraryGooglePlusEnabled:1, IsImagePageProviderEnabled:1, IsBookcardListPriceSmall:0, IsInternalUser:0, IsBooksShareButtonEnabled:0, IsDisabledRandomBookshelves:0});_OC_Run({"enable_p13n":false,"is_cobrand":false,"sign_in_url":"https://www.google.com/accounts/Login?service=\u0026continue=https://www.google.com/patents%3Fcl%3Dzh%26hl%3Dzh-CN\u0026hl=zh-CN"}, {"volume_id":"","is_ebook":true,"volumeresult":{"has_flowing_text":false,"has_scanned_text":true,"can_download_pdf":false,"can_download_epub":false,"is_pdf_drm_enabled":false,"is_epub_drm_enabled":false,"download_pdf_url":"https://www.google.com/patents/download/%E4%B8%80%E7%A7%8DAndroid%E5%B9%B3%E5%8F%B0%E8%BD%AF%E4%BB%B6%E4%BF%9D%E6%8A%A4%E7%B3%BB%E7%BB%9F.pdf?id=yW2rBwABERAJ\u0026hl=zh-CN\u0026output=pdf\u0026sig=ACfU3U1qHiXi31q2RlHmjES4NktBA2u65g"},"sample_url":"https://www.google.com/patents/reader?id=yW2rBwABERAJ\u0026hl=zh-CN\u0026printsec=frontcover\u0026output=reader\u0026source=gbs_atb_hover","is_browsable":true,"is_public_domain":true}, {});</script><div id="footer_table" style="font-size:83%;text-align:center;position:relative;top:20px;height:4.5em;margin-top:2em"><div style="margin-bottom:8px"><a href="https://www.google.com/search?hl=zh-CN"><nobr>Google&nbsp;首页</nobr></a> - <a href="//www.google.com/patents/sitemap/"><nobr>站点地图</nobr></a> - <a href="http://www.google.com/googlebooks/uspto.html"><nobr>美国专利商标局 (USPTO) 专利信息批量下载</nobr></a> - <a href="/intl/zh-CN/privacy/"><nobr>隐私权政策</nobr></a> - <a href="/intl/zh-CN/policies/terms/"><nobr>服务条款</nobr></a> - <a href="https://support.google.com/faqs/answer/2539193?hl=zh-CN"><nobr> 关于 Google 专利</nobr></a> - <a href="//www.google.com/tools/feedback/intl/zh-CN/error.html" onclick="try{_OC_startFeedback({productId: '72792',locale: 'zh-CN'});return false;}catch(e){}"><nobr>发送反馈</nobr></a></div></div> <script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script><script type="text/javascript">var pageTracker = _gat._getTracker("UA-27188110-1");pageTracker._setCookiePath("/patents/");pageTracker._trackPageview();</script> </body></html>