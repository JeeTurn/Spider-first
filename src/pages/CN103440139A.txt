<!DOCTYPE html><html><head><title>专利 CN103440139A - 一种面向主流微博网站微博id的采集方法及工具 -  Google 专利</title><script>(function(){(function(){function e(a){this.t={};this.tick=function(a,c,b){var d=void 0!=b?b:(new Date).getTime();this.t[a]=[d,c];if(void 0==b)try{window.console.timeStamp("CSI/"+a)}catch(e){}};this.tick("start",null,a)}var a;window.performance&&(a=window.performance.timing);var f=a?new e(a.responseStart):new e;window.jstiming={Timer:e,load:f};if(a){var c=a.navigationStart,d=a.responseStart;0<c&&d>=c&&(window.jstiming.srt=d-c)}if(a){var b=window.jstiming.load;0<c&&d>=c&&(b.tick("_wtsrt",void 0,c),b.tick("wtsrt_",
"_wtsrt",d),b.tick("tbsd_","wtsrt_"))}try{a=null,window.chrome&&window.chrome.csi&&(a=Math.floor(window.chrome.csi().pageT),b&&0<c&&(b.tick("_tbnd",void 0,window.chrome.csi().startE),b.tick("tbnd_","_tbnd",c))),null==a&&window.gtbExternal&&(a=window.gtbExternal.pageT()),null==a&&window.external&&(a=window.external.pageT,b&&0<c&&(b.tick("_tbnd",void 0,window.external.startE),b.tick("tbnd_","_tbnd",c))),a&&(window.jstiming.pt=a)}catch(g){}})();})();
</script><link rel="stylesheet" href="/patents/css/_6e802a6b2b28d51711baddc2f3bec198/kl_intl_patents_bundle.css" type="text/css" /><script src="/books/javascript/atb_6e802a6b2b28d51711baddc2f3bec198__zh_cn.js"></script><script>function googleTranslateElementInit() {new google.translate.TranslateElement({pageLanguage: "zh",gaTrack: true,gaId: "UA-27188110-1",multilanguagePage: true});}</script><script src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script><meta name="DC.type" content="Patent"><meta name="DC.title" content="一种面向主流微博网站微博id的采集方法及工具"><meta name="DC.contributor" content="闫丹凤" scheme="inventor"><meta name="DC.contributor" content="杨翔" scheme="inventor"><meta name="DC.contributor" content="张丽莹" scheme="inventor"><meta name="DC.contributor" content="蓝田" scheme="inventor"><meta name="DC.contributor" content="黄俊霖" scheme="inventor"><meta name="DC.contributor" content="唐皓瑾" scheme="inventor"><meta name="DC.contributor" content="邹文涛" scheme="inventor"><meta name="DC.contributor" content="徐佳" scheme="inventor"><meta name="DC.contributor" content="北京邮电大学" scheme="assignee"><meta name="DC.date" content="2013-9-11" scheme="dateSubmitted"><meta name="DC.description" content="一种面向主流微博网站微博ID的采集方法及工具，系统架构分为两个层次，分别为采集层和存储层，层次和系统间的接口清晰，每层内部都由若干模块组成，模块之间的松耦合，有利于每层功能的扩展。采集层实现认证用户微博ID的爬取以及长期的认证用户粉丝ID的采集；存储层实现将微博ID在本地进行数据库存储，并对外提供开放式的微博ID检索功能。该系统的用户可以是任何基于微博数据的第三方应用的开发人员，利用该系统提供的微博ID进行进一步的微博内容抓取、分析等相关第三方应用的开发；也可以是微博网站的管理人员，利用该系统提供的微博ID进行相关统计，从而对微博相关指标进行分析，如微博活跃程度分析、微博影响力分析等。"><meta name="DC.date" content="2013-12-11"><meta name="DC.relation" content="CN:102622443:A" scheme="references"><meta name="DC.relation" content="US:20110246457:A1" scheme="references"><meta name="citation_reference" content="于留宝: &quot;基于MapReduce的微博文本采集平台&quot;, 《计算机科学》, 30 November 2012 (2012-11-30), pages 143 - 145"><meta name="citation_reference" content="周小丽: &quot;基于网络爬虫和Lucene索引的互联网舆情监测系统设计与实现&quot;, 《中国优秀硕士学位论文全文数据库 信息科技辑》, 31 August 2013 (2013-08-31), pages 138 - 747"><meta name="citation_reference" content="陈舜华等: &quot;基于微博API的分布式抓取技术&quot;, 《电信科学》, 31 August 2013 (2013-08-31), pages 146 - 150"><meta name="citation_patent_publication_number" content="CN:103440139:A"><meta name="citation_patent_application_number" content="CN:201310412348"><link rel="canonical" href="https://www.google.com/patents/CN103440139A?cl=zh"/><meta property="og:url" content="https://www.google.com/patents/CN103440139A?cl=zh"/><meta name="title" content="专利 CN103440139A - 一种面向主流微博网站微博id的采集方法及工具"/><meta name="description" content="一种面向主流微博网站微博ID的采集方法及工具，系统架构分为两个层次，分别为采集层和存储层，层次和系统间的接口清晰，每层内部都由若干模块组成，模块之间的松耦合，有利于每层功能的扩展。采集层实现认证用户微博ID的爬取以及长期的认证用户粉丝ID的采集；存储层实现将微博ID在本地进行数据库存储，并对外提供开放式的微博ID检索功能。该系统的用户可以是任何基于微博数据的第三方应用的开发人员，利用该系统提供的微博ID进行进一步的微博内容抓取、分析等相关第三方应用的开发；也可以是微博网站的管理人员，利用该系统提供的微博ID进行相关统计，从而对微博相关指标进行分析，如微博活跃程度分析、微博影响力分析等。"/><meta property="og:title" content="专利 CN103440139A - 一种面向主流微博网站微博id的采集方法及工具"/><meta property="og:type" content="book"/><meta property="og:site_name" content="Google Books"/><meta property="og:image" content="https://www.google.com/patents?id=&amp;printsec=frontcover&amp;img=1&amp;zoom=1"/><link rel="image_src" href="https://www.google.com/patents?id=&amp;printsec=frontcover&amp;img=1&amp;zoom=1"/><script>if (window['_OC_timingAction']) {window['_OC_timingAction']('patents_refpage');}</script><style>#gbar,#guser{font-size:13px;padding-top:1px !important;}#gbar{height:22px}#guser{padding-bottom:7px !important;text-align:right}.gbh,.gbd{border-top:1px solid #c9d7f1;font-size:1px}.gbh{height:0;position:absolute;top:24px;width:100%}@media all{.gb1{height:22px;margin-right:.5em;vertical-align:top}#gbar{float:left}}a.gb1,a.gb4{text-decoration:underline !important}a.gb1,a.gb4{color:#00c !important}.gbi .gb4{color:#dd8e27 !important}.gbf .gb4{color:#900 !important}

#gbar { padding:.3em .6em !important;}</style></head><body ><div id=gbar><nobr><a class=gb1 href="https://www.google.com/search?cl=zh&hl=zh-CN&sa=N&tab=tw">搜索</a> <a class=gb1 href="https://www.google.com/search?cl=zh&hl=zh-CN&tbm=isch&source=og&sa=N&tab=ti">图片</a> <a class=gb1 href="https://maps.google.com/maps?cl=zh&hl=zh-CN&sa=N&tab=tl">地图</a> <a class=gb1 href="https://play.google.com/?cl=zh&hl=zh-CN&sa=N&tab=t8">Play</a> <a class=gb1 href="https://www.youtube.com/results?cl=zh&hl=zh-CN&sa=N&tab=t1">YouTube</a> <a class=gb1 href="https://news.google.com/nwshp?hl=zh-CN&tab=tn">新闻</a> <a class=gb1 href="https://mail.google.com/mail/?tab=tm">Gmail</a> <a class=gb1 href="https://drive.google.com/?tab=to">云端硬盘</a> <a class=gb1 style="text-decoration:none" href="https://www.google.com/intl/zh-CN/options/"><u>更多</u> &raquo;</a></nobr></div><div id=guser width=100%><nobr><span id=gbn class=gbi></span><span id=gbf class=gbf></span><span id=gbe></span><a target=_top id=gb_70 href="https://www.google.com/accounts/Login?service=&continue=https://www.google.com/patents%3Fcl%3Dzh%26hl%3Dzh-CN&hl=zh-CN" class=gb4>登录</a></nobr></div><div class=gbh style=left:0></div><div class=gbh style=right:0></div><div role="alert" style="position: absolute; left: 0; right: 0;"><a href="https://www.google.com/patents/CN103440139A?cl=zh&amp;hl=zh-CN&amp;output=html_text" title="屏幕阅读器用户请注意：点击此链接可进入无障碍模式。阅读器在无障碍模式下具有同样的基本功能，但可让用户获得更好的体验。"><img border="0" src="//www.google.com/images/cleardot.gif"alt="屏幕阅读器用户请注意：点击此链接可进入无障碍模式。阅读器在无障碍模式下具有同样的基本功能，但可让用户获得更好的体验。"></a></div><div class="kd-appbar"><h2 class="kd-appname"><a href="/patents?hl=zh-CN"> 专利</a></h2><div class="kd-buttonbar left" id="left-toolbar-buttons"><a id="appbar-write-review-link" href=""></a><a id="appbar-view-print-sample-link" href=""></a><a id="appbar-view-ebook-sample-link" href=""></a><a id="appbar-patents-prior-art-finder-link" href="https://www.google.com/patents/related/CN103440139A"></a><a id="appbar-patents-discuss-this-link" href="https://www.google.com/url?id=wA3nCAABERAJ&amp;q=http://patents.stackexchange.com/redirect/google-patents%3Fpublication%3DCN103440139A&amp;usg=AFQjCNEL1e3DmcR6s0BHjnY6X-M5icYoEA" data-is-grant="false"></a><a id="appbar-read-patent-link" href="//docs.google.com/viewer?url=patentimages.storage.googleapis.com/pdfs/35521a35614fb45ad9e9/CN103440139A.pdf"></a><a id="appbar-download-pdf-link" href="//patentimages.storage.googleapis.com/pdfs/35521a35614fb45ad9e9/CN103440139A.pdf"></a><a class="appbar-content-language-link" data-selected="true" data-label="中文" href="/patents/CN103440139A?cl=zh&amp;hl=zh-CN"></a><a class="appbar-content-language-link" data-label="英语" href="/patents/CN103440139A?cl=en&amp;hl=zh-CN"></a></div><div class="kd-buttonbar right" id="right-toolbar-buttons"></div></div><div id="books-microdata" itemscope=""itemtype="http://schema.org/Book"itemid="https://www.google.com/patents/CN103440139A?cl=zh" style="display:none"><span itemprop="description">一种面向主流微博网站微博ID的采集方法及工具，系统架构分为两个层次，分别为采集层和存储层，层次和系统间的接口清晰，每层内部都由若干模块组成，模块之间的松耦合，有利于每层功能的扩展。采集层实现认证用户微博I...</span><span itemprop="url">https://www.google.com/patents/CN103440139A?cl=zh&amp;utm_source=gb-gplus-share</span><span class="main-title" itemprop="name">专利 CN103440139A - 一种面向主流微博网站微博id的采集方法及工具</span><img itemprop="image" src="https://www.google.com/patents?id=&amp;printsec=frontcover&amp;img=1&amp;zoom=1"alt="专利 CN103440139A - 一种面向主流微博网站微博id的采集方法及工具" title="专利 CN103440139A - 一种面向主流微博网站微博id的采集方法及工具"></div><div style="display: none"><ol id="ofe-gear-menu-contents" class="gbmcc"><li class="gbe gbmtc"><a class="gbmt goog-menuitem-content" id="" href="https://www.google.com/advanced_patent_search?hl=zh-CN"> 高级专利搜索</a></li></ol></div><div id="volume-main"><div id="volume-center"><div class=vertical_module_list_row><div id=intl_patents class=about_content><div id=intl_patents_v><table class="patent-bibdata patent-drawings-missing"><tr><td class="patent-bibdata-heading"> 公开号</td><td class="single-patent-bibdata">CN103440139 A</td></tr><tr><td class="patent-bibdata-heading">发布类型</td><td class="single-patent-bibdata">申请</td></tr><tr><td class="patent-bibdata-heading"> 专利申请号</td><td class="single-patent-bibdata">CN 201310412348</td></tr><tr><td class="patent-bibdata-heading">公开日</td><td class="single-patent-bibdata">2013年12月11日</td></tr><tr><td class="patent-bibdata-heading"> 申请日期</td><td class="single-patent-bibdata">2013年9月11日</td></tr><tr><td class="patent-bibdata-heading"> 优先权日<span class="patent-tooltip-anchor patent-question-icon"data-tooltip-text="优先日期属于假设性质，不具任何法律效力。Google 对于所列日期的正确性并没有进行法律分析，也不作任何陈述。"></span></td><td class="single-patent-bibdata">2013年9月11日</td></tr><tr class="patent-bibdata-list-row alternate-patent-number"><td class="patent-bibdata-heading"> 公开号</td><td><span class="patent-bibdata-value-list"><span class="patent-bibdata-value">201310412348.7, </span><span class="patent-bibdata-value">CN 103440139 A, </span><span class="patent-bibdata-value">CN 103440139A, </span><span class="patent-bibdata-value">CN 201310412348, </span><span class="patent-bibdata-value">CN-A-103440139, </span><span class="patent-bibdata-value">CN103440139 A, </span><span class="patent-bibdata-value">CN103440139A, </span><span class="patent-bibdata-value">CN201310412348, </span><span class="patent-bibdata-value">CN201310412348.7</span></span></td></tr><tr class="patent-bibdata-list-row "><td class="patent-bibdata-heading"> 发明者</td><td><span class="patent-bibdata-value-list"><span class="patent-bibdata-value"><a href="https://www.google.com/search?tbo=p&amp;tbm=pts&amp;hl=en&amp;q=ininventor:%22%E9%97%AB%E4%B8%B9%E5%87%A4%22">闫丹凤</a>, </span><span class="patent-bibdata-value"><a href="https://www.google.com/search?tbo=p&amp;tbm=pts&amp;hl=en&amp;q=ininventor:%22%E6%9D%A8%E7%BF%94%22">杨翔</a>, </span><span class="patent-bibdata-value"><a href="https://www.google.com/search?tbo=p&amp;tbm=pts&amp;hl=en&amp;q=ininventor:%22%E5%BC%A0%E4%B8%BD%E8%8E%B9%22">张丽莹</a>, </span><span class="patent-bibdata-value"><a href="https://www.google.com/search?tbo=p&amp;tbm=pts&amp;hl=en&amp;q=ininventor:%22%E8%93%9D%E7%94%B0%22">蓝田</a>, </span><span class="patent-bibdata-value"><a href="https://www.google.com/search?tbo=p&amp;tbm=pts&amp;hl=en&amp;q=ininventor:%22%E9%BB%84%E4%BF%8A%E9%9C%96%22">黄俊霖</a>, </span><span class="patent-bibdata-value"><a href="https://www.google.com/search?tbo=p&amp;tbm=pts&amp;hl=en&amp;q=ininventor:%22%E5%94%90%E7%9A%93%E7%91%BE%22">唐皓瑾</a>, </span><span class="patent-bibdata-value"><a href="https://www.google.com/search?tbo=p&amp;tbm=pts&amp;hl=en&amp;q=ininventor:%22%E9%82%B9%E6%96%87%E6%B6%9B%22">邹文涛</a>, </span><span class="patent-bibdata-value"><a href="https://www.google.com/search?tbo=p&amp;tbm=pts&amp;hl=en&amp;q=ininventor:%22%E5%BE%90%E4%BD%B3%22">徐佳</a></span></span></td></tr><tr class="patent-bibdata-list-row "><td class="patent-bibdata-heading"> 申请人</td><td><span class="patent-bibdata-value-list"><span class="patent-bibdata-value"><a href="https://www.google.com/search?tbo=p&amp;tbm=pts&amp;hl=en&amp;q=inassignee:%22%E5%8C%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6%22">北京邮电大学</a></span></span></td></tr><tr class="patent-bibdata-list-row "><td class="patent-bibdata-heading">导出引文</td><td><span class="patent-bibdata-value-list"><span class="patent-bibdata-value"><a href="/patents/CN103440139A.bibtex?cl=zh">BiBTeX</a>, </span><span class="patent-bibdata-value"><a href="/patents/CN103440139A.enw?cl=zh">EndNote</a>, </span><span class="patent-bibdata-value"><a href="/patents/CN103440139A.ris?cl=zh">RefMan</a></span></span></td></tr><tr class="patent-internal-links"><td colspan=2><span class="patent-bibdata-value"><a href="#backward-citations">专利引用</a> (2),</span> <span class="patent-bibdata-value"><a href="#npl-citations">非专利引用</a> (3),</span> <span class="patent-bibdata-value"><a href="#classifications">分类</a> (3),</span> <span class="patent-bibdata-value"><a href="#legal-events">法律事件</a> (2)</span> </td></tr><tr><td colspan=2 class="patent-bibdata-external-link-spacer-top"></td></tr><tr class="patent-bibdata-external-link-spacer-bottom"></tr><tr><td colspan=2><span class="patent-bibdata-heading">外部链接:&nbsp;</span><span><span class="patent-bibdata-value"><a href="https://www.google.com/url?id=wA3nCAABERAJ&amp;q=http://211.157.104.87:8080/sipo/zljs/hyjs-yx-new.jsp%3Frecid%3D201310412348&amp;usg=AFQjCNFrAPvC4mZMbH6BsGfEzdAd6IGlfA"> 中国国家知识产权局</a>, </span><span class="patent-bibdata-value"><a href="https://www.google.com/url?id=wA3nCAABERAJ&amp;q=http://worldwide.espacenet.com/publicationDetails/biblio%3FCC%3DCN%26NR%3D103440139A%26KC%3DA%26FT%3DD&amp;usg=AFQjCNGHzjol_v5PfmoNk7wW_yKJv1wu2w"> 欧洲专利数据库 (Espacenet)</a></span></span></td></tr><tr class="patent-bibdata-group-spacer"></tr></table><div class="number-and-title"><span class="patent-title"><invention-title mxw-id="PT131927681" lang="ZH" load-source="patent-office">一种面向主流微博网站微博id的采集方法及工具</invention-title>
      </span><br><span class="patent-number">CN 103440139 A</span></div><div class="patent-section patent-abstract-section"><div class="patent-section-header"><span class="patent-section-title"> 摘要</span></div><div class="patent-text"><abstract mxw-id="PA127136579" lang="ZH" load-source="patent-office">
    <div class="abstract">一种面向主流微博网站微博ID的采集方法及工具，系统架构分为两个层次，分别为采集层和存储层，层次和系统间的接口清晰，每层内部都由若干模块组成，模块之间的松耦合，有利于每层功能的扩展。采集层实现认证用户微博ID的爬取以及长期的认证用户粉丝ID的采集；存储层实现将微博ID在本地进行数据库存储，并对外提供开放式的微博ID检索功能。该系统的用户可以是任何基于微博数据的第三方应用的开发人员，利用该系统提供的微博ID进行进一步的微博内容抓取、分析等相关第三方应用的开发；也可以是微博网站的管理人员，利用该系统提供的微博ID进行相关统计，从而对微博相关指标进行分析，如微博活跃程度分析、微博影响力分析等。</div>
  </abstract>
  </div></div><div class="patent-section patent-claims-section"><div class="patent-section-header"><span class="patent-section-title">权利要求<span class="patent-section-count">(10)</span></span></div><div class="patent-text"><div mxw-id="PCLM57158142" lang="ZH" load-source="patent-office" class="claims">
    <div class="claim"> <div num="1" class="claim">
      <div class="claim-text">1.一种面向主流微博网站微博ID的采集方法及工具，其特征在于:所述系统架构分为两个层次，分别为采集层和存储层，层次和系统间的接口清晰，每层内部都由若干模块组成，模块之间的松耦合，有利于每层功能的扩展。采集层实现微博ID的采集，存储层实现本地数据库存储，并提供开放式检索功能。其中:采集层，实现认证用户ID爬取和认证用户粉丝ID的采集工作，由网络爬取模块和微博API模块组成。存储层，负责对采集层中获取的微博ID进行去重操作以及将微博ID进行分布式存储，并提供微博ID查询接口，由去重与索引模块和数据存储模块组成。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="2" class="claim">
      <div class="claim-text">2.根据权利要求1所述的面向主流微博网站微博ID的采集方法及工具，其特征在于:所述采集层的各模块的功能分别是:网络爬取模块，负责针对新浪、腾讯微博认证用户网页中微博ID的抓取工作，主要包括网页爬取、ID解析和ID本地存储的操作。其中网页爬取及ID解析操作通过编写浏览器插件的方式来完成，本地存储操作通过编写Webserver代码的方式来完成。流程包括请求微博认证用户首页，一级、二级和三级分类页面，解析页面中的分类名称及对应的URL，请求并解析各级分类页面中的微博ID，并将微博ID存储到本地的认证用户ID采集目录中的认证用户ID文件中。微博API模块，使用新浪、腾讯微博开放平台提供的微博API，获取微博认证用户的粉丝ID。其操作流程包括首先获得两大微博开放平台的授权令牌，其次根据不同微博的API接口，构造不同的参数给相应的API接口，得到JSON格式的微博ID数据，并将解析出的微博ID存入本地的粉丝ID采集目录的粉丝ID文件中。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="3" class="claim">
      <div class="claim-text">3.根据权利要求1所述 的面向主流微博网站微博ID的采集方法及工具，其特征在于:所述存储层的各模块的功能分别是:去重与索引模块，负责利用开源的索引工具Lucene对微博API模块采集的微博ID进行去重操作并建立索引，定期从索引中导出微博ID以供数据存储模块处理。导出的微博ID存储在本地的微博ID导出目录的微博ID导出文件中。数据存储模块，负责从本地的微博ID导出目录中读取微博ID导出文件，并使用开源的分布式系统Hadoop中的存储工具Hbase将文件中的微博ID进行分布式存储，同时提供微博ID查询接口。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="4" class="claim">
      <div class="claim-text">4.根据权利要求2所述的采集层，其特征在于:所述的网络爬取模块的各子模块的功能分别是:微博ID爬取子模块，通过编写浏览器插件的方式请求并解析微博认证用户分类页面，并将解析出的ID发送给该模块的存储子模块。由于浏览器插件使用Javascript语言编写，采用jQuery等Javascript库简化请求页面和解析HTML文档的操作；由于浏览器插件代码会在浏览器加载完指定的页面后自动执行，通过设置代码在微博登陆后执行来避开对微博登陆过程的开发；利用Javascript能够向同一域名内的任何资源发起Get/Post请求的特性，请求到所有的微博认证用户的页面；利用浏览器插件支持跨域XMLHttpRequest请求的特点(XMLHttpRequest是Javascript发送Get/Post请求的基础),将爬取的ID通过Get/Post请求发送到自己编写的Webserver上进行本地存储。存储子模块，使用Webserver接收新浪、腾讯微博ID爬取子模块的Get/Post请求，按照一级和二级分类分别在本地建立一级和二级认证用户ID采集目录并以分类名称命名，并将微博ID按照所属分类存入相应的认证用户ID采集目录的认证用户ID文件中。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="5" class="claim">
      <div class="claim-text">5.根据权利要求2所述的采集层，其特征在于:所述的微博API模块，自动化获取授权令牌以支持长期地通过API的方式不断地获取认证用户的粉丝ID。其中新浪微博的授权令牌需要通过模拟HTTPS请求的方式自动化获取，腾讯微博的授权令牌只需要定期调用腾讯微博提供的令牌刷新API即可在3个月内实现自动化获取。通过API的方式获取的粉丝ID数量达到一定阈值时，将粉丝ID存入粉丝ID采集目录的粉丝ID文件中，粉丝ID文件以换行符分隔各个ID，以“当前时间戳.txt”的格式命名。包括新浪授权令牌获取子模块、腾讯授权令牌获取子模块和粉丝采集子模块。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="6" class="claim">
      <div class="claim-text">6.根据权利要求3所述的存储层，其特征在于:所述的去重与索引模块，为已采集过的微博ID进行去重操作并建立索引，定期将微博ID导出到指定目录的文件中供数据存储模块处理，在索引中设置标记字段防止重复导出ID。索引中包括微博ID和标记两列，存储方式都是“不分词”。标记有三种取值:“未导出”、“已导出”和“已导入Hbase”。其中“未导出”表不微博ID未从Lucene中导出；“已导出”表不微博ID已从Lucene中导出，但未导入到Hbase中；“已导入Hbase”表示微博ID已导入到Hbase中。该模块包括索引建立子模块、ID导出子模块和标记更新子模块。索引建立模块实现将采集的ID去重，并将去重后的ID并入索引，将对应ID的标记字段置为“未导出”。ID导出子模块负责定期检索索引中未导出的ID，存入本地的微博ID导出目录中的微博ID导出文件(微博ID导出目录需要在系统运行前创建，微博ID导出文 件在每次导出时自动创建)，文件命名格式为“年-月-日_时-分.txt”，并提供给数据存储模块处理，将对应ID的标记置为“已导出”。标记更新子模块负责检查数据存储模块是否已处理完导出的ID，若处理完成，则将对应ID的标记置为“已导入Hbase”。新浪微博ID和腾讯微博ID分别存储在Hbase的不同的表中，表的主键设计为“DDDDD微博ID”的格式，其中DDDDD表示一个五位十进制数字，该数字前缀是为后期的数据分析预留的标记空间，可以用于标记该微博ID的状态或者属性。该模块定期从微博ID导出目录中读取以“年-月-日_时-分.txt”格式命名的文件，调用Hbase提供的API将文件中的微博ID存入Hbase相应的表中，将该文件重命名为“Hbase-年-月-日_时-分.txt”。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="7" class="claim">
      <div class="claim-text">7.根据权利要求5所述的微博API模块，其特征在于:所述的各个子模块的功能分别是:新浪授权令牌获取子模块，通过模拟HTTPS请求自动获取新浪微博SDK访问令牌，保证令牌不过期，其他模块只需利用得到的令牌，遵循0Auth2.0协议通过认证，即可对SDK提供的API进行调用。腾讯授权令牌获取子模块，通过定期调用腾讯微博提供的访问令牌刷新API获取新的令牌，以保证令牌在3个月内不过期。该模块需要用户在系统运行前进行一次手动授权(即通过腾讯微博开发平台规定的方式进行授权)，此后3个月内只需定期刷新授权令牌，而无需手动授权。粉丝采集子模块，从认证用户ID采集目录中读取认证用户ID文件，获取并遍历认证用户ID，使用授权令牌调用新浪、腾讯微博开放的API，随机获取认证用户随机的至多5000名粉丝的ID，并将粉丝ID缓存在一个缓存文件中，当粉丝ID数量达到一定阈值时，将缓存文件中的ID存入粉丝ID采集目录的粉丝ID文件中。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="8" class="claim">
      <div class="claim-text">8.根据权利要求6所述的去重与索引模块，其特征在于:所述的各个子模块的功能分别是:索引建立模块，定期从微博粉丝ID采集目录中读取粉丝ID文件，将文件中的ID存入Set容器实现自动去重，在Lucene索引中查询Set容器中的微博ID，如果ID已存在于索引中，则将其从Set容器中删除，然后将Set容器中剩余的ID存入Lucene索引，将新并入索引的ID标记为“未导出”，将已处理的粉丝ID文件删除。ID导出子模块，定期从Lucene中检索出一定数量的标记为“未导出”的微博ID，在本地已建立好的微博ID导出目录中创建微博ID导出文件，将导出的微博ID以换行符分隔存入文件中，文件根据当前系统时间以“年-月-日_时-分.txt”的格式命名，并将对应ID的标记置为“已导出”。标记更新子模块，定期检查本地的微博ID导出目录中的微博ID导出文件，如果文件名被存储模块处理并被重命名为“Hbase-年-月_日_时-分.txt”的格式，则在Lucene中将该文件中的ID对应的标记置为“已导入Hbase”，并将该文件删除。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="9" class="claim">
      <div class="claim-text">9.根据权利要求7所述的微博API模块，其特征在于:所述的新浪授权令牌获取子模±夹，新浪微博开放平台对测试用户的授权有效时间是24小时，测试授权的用户每隔24小时就需要登录授权页面重新申请新的AccessToken，这给第三方应用开发团队带来了很大的不便。而新浪授权令牌获取子模块则可以将这一手动过程自动化，从而使得低权限的第三方开发团队能忽略这一限制，实现自动化采集数据，为微博用户提供更好的服务。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="10" class="claim">
      <div class="claim-text">10.根据权利要求7所述的微博API模块，其特征在于:所述的粉丝采集子模块，通过使用多个微博应用测试用户轮询、多台机器同时抓取的方式，在不违背新浪微博、腾讯微博限制API调用次数的初衷的前 提下提高采集的效率。多测试用户方式轮询采集是指在同一个程序中首先使用多个测试用户分别获取授权令牌，其次轮询地使用这些授权令牌调用API，以增加每小时内API的调用次数，该方式能够使API调用频率达到IP级别的调用频率上限。多台机器同时抓取的方式是指将多测试用户方式轮询采集程序部署到多台机器上同时运行，每台机器的API调用频率都可以达到IP级别的API调用频率上限，因此该方式能够使API调用频率达到机器数*IP级别API调用频率上限。在使用多台机器同时抓取的采集方式时，每台机器分别将已采集的微博ID缓存在自己的缓存文件中，当缓存的ID数量达到一定阈值时，使用Ftp接口将缓存的文件上传至索引和去重模块所在机器的粉丝ID采集目录中。</div>
    </div>
  </div> </div>
  </div></div><div class="patent-section patent-description-section"><div class="patent-section-header"><span class="patent-section-title"> 说明</span></div><div class="patent-text"><div mxw-id="PDES64127455" lang="ZH" load-source="patent-office" class="description">
    <p>&#8212;种面向主流微博网站微博ID的采集方法及工具</p>
    <p>技术领域</p>
    <p>[0001]	本发明涉及社交网站的ID采集技术特别是一种以主流微博网站开放API为基础的微博ID采集方法及工具。</p>
    <p>背景技术</p>
    <p>[0002]	微博作为社交网络应用技术之一实现了基于用户关系的信息分享、传播以及获取平台，承载了大量基于社交网络的信息。用户通过WEB、WAP以及各种客户端组件个人社区，以140字左右的文字更新信息，并实现即时分享。中国互联网络信息中心(CNNIC)发布的《第31次中国互联网络发展状况统计报告》显示，截至2012年12月底，我国微博用户规模为3.09亿，较2011年底增长了 5873万。微博急速扩张的阶段已经结束，但年增幅仍能达到23.5%。巨大的用户量给微博带来了巨大的信息量，对微博信息进行再利用的应用也随之出现。新浪和腾讯等主流微博网站都开放了针对微博操作的API，用于支持和鼓励基于微博数据信息的第三方应用的发展。基于API的第三方应用开发模式将微博信息作为基础的数据信息，进一步提供针对微博的分类、分析、检索等等升级应用，提升了微博数据的利用价值，是推动社交网络信息有效地再利用的典范。现有已经出现部分应用在一定程度上实现了对微博信息的再利用，但是对信息的采集工作任然是一项艰巨的任务，截至2013年4月底，新浪微博的注册用户规模为5.03亿，日活跃用户4620万，用户id为int64(8Bytes)，总的数据量约为4G ;腾讯微博的注册用户为5.4亿，日活跃用户I亿，用户id为32个char的字符串(32Bytes)，总的数据量约为16G ;搜狐微博的注册用户约为I亿；以新浪微博为例，假设平均每个用户发布50条微博，每条微博平均含有20个汉字，每条微博平均包括4条评论，则微博信息的总体数据量为4G*50*20*2* (4+1)=400Τ。面对海量的微博信息，只能针对已知微博的URL链接采集微博数据，这种方式只是小范围采集微博信息，所以急需一种能够更加完整、全面的、并且支持大数据量存储的数据采集工具用于采集微博唯一标识符-微博ID，进而通过微博ID采集具体的微博信息，从而实现更广泛的微博信息的再利用，为上层应用提供更好的数据支持。</p>
    <p>发明内容</p>
    <p>[0003]	有鉴于此，本发明的目的是提供一种面向主流微博网站的微博ID采集方法及工具，本发明的方法及工具基于网络爬虫和微博开放API，结合现有的索引和非结构化数据库存储方法，提出一套面向主流微博网站微博ID的采集方法及工具，本发明能自动化采集已存在的微博账号ID，方便开发者进行再利用，为上层应用提供更好的数据支持。特有的分布式数据存储方法让本发明具备更好的可扩展性。</p>
    <p>[0004]	为了达到上述目的，本发明的目的是提供一种面向主流微博网站微博ID的采集方法及工具，其架构分为两个层次，分别为采集层和存储层。采集层实现微博ID的采集，存储层实现本地存储，并提供开放式的检索功能；其中:</p>
    <p>[0005]	采集层，实现认证用户ID爬取和认证用户粉丝ID的采集工作，由网络爬取模块和微博API模块组成。</p>
    <p>[0006]	存储层，负责对采集层中获取的微博ID进行去重操作以及将微博ID进行存储，提供微博ID查询接口，并预留字段，为后续操作提供一定的扩展性能。</p>
    <p>[0007]	所述采集层的各模块的功能分别是:</p>
    <p>[0008]	网络爬取模块，负责针对新浪、腾讯微博认证用户网页中微博ID的抓取工作，主要包括网页爬取及解析和本地存储的操作。其中网页爬取及解析操作通过编写浏览器插件的方式来完成，本地存储操作通过编写Webserver代码的方式来完成。包括请求微博认证用户首页，一级、二级和三级分类页面，解析页面中的分类名称及对应的URL，请求并解析各级分类页面中的微博ID，并将微博ID存储到本地的认证用户ID采集目录中的认证用户ID文件中。其中认证用户ID目录是本地目录，依据微博网站的认证用户分类等级以及名称自动分级建立；认证用户ID文件以换行符分隔各个ID，并以“最下级分类名称.txt”的格式命名。该模块包括微博ID爬取子模块和存储子模块。</p>
    <p>[0009]	微博API模块，使用新浪、腾讯微博开放平台提供的微博API，获取微博认证用户的粉丝ID。其操作流程包括首先获得两大微博开放平台的授权令牌，其次根据不同微博的API接口，构造不同的参数给相应的API接口，得到JSON格式的微博ID数据，并将解析出的微博ID存入本地的粉丝ID采集目录的粉丝ID文件中。其中，粉丝ID采集目录是一个存储粉丝ID文件的目录，粉丝ID文件是存放该模块获取的ID的文本文件，以换行符分隔各个ID，每个文件存放一定数量的ID，文件以“当前时间戳.txt”的格式命名。</p>
    <p>[0010]	所述存储层的各模块的功能分别是:</p>
    <p>[0011]	去重与索引模块，所述的去重与索引模块，为已采集过的微博ID进行去重操作并建立索引，其中新浪、腾讯微博对应的索引名称分别为化(1以_4和index_B，定期将微博ID导出到指定目录的文件中供数据存储模块处理，在索引中设置标记字段防止重复导出ID。索引中包括微博ID和标记两列，存储方式都是“不分词”。标记有三种取值:“未导出”、“已导出”和“已导入Hbase”。其中“未导出”表不微博ID未从Lucene中导出已导出”表不微博ID已从Lucene中导出，但未导入到Hbase中；“已导入Hbase”表不微博ID已导入到Hbase中。该模块包括索引建立子模块、ID导出子模块和标记更新子模块。索引建立模块实现将采集的ID去重，并将去重后的ID并入索引，将对应ID的标记字段置为“未导出”。ID导出子模块负责定期检索索引中未导出的ID，存入本地的微博ID导出目录中的微博ID导出文件(微博ID导出目录需要在系统运行前创建，微博ID导出文件在每次导出时自动创建)，文件命名格式为“年-月-日_时-分.txt”，并提供给数据存储模块处理，将对应ID的标记置为“已导出”。标记更新子模块负责检查数据存储模块是否已处理完导出的ID，若处理完成，则将对应ID的标记置为“已导入Hbase”。</p>
    <p>[0012]	数据存储模块，负责从本地的微博ID导出目录中读取微博ID导出文件，并使用开源的分布式系统Hadoop中的存储工具Hbase将文件中的微博ID进行分布式存储，同时提供微博ID查询接口。该模块使用Linux的Crontab命令定期执行。每次执行时,读取本地的微博ID导出目录中的微博ID导出文件，将新浪微博ID和腾讯微博ID分别存储在Hbase的不同的表中，表的主键设计为“DDDDD微博ID”的格式，其中DDDDD表示一个五位十进制数字，该数字前缀是为后期的数据分析预留的标记空间，可以用于标记该微博ID的状态或者属性。该模块定期从Lucene中检索出标记值等于“未导出”的微博ID，调用Hbase提供的API，将这些微博ID存入Hbase相应的表中，并在Lucene中将这些微博ID对应的标记值改为“已导出”，以防止以后重复导出。</p>
    <p>[0013]	所述的网络爬取模块的各子模块的功能分别是:</p>
    <p>[0014]	微博ID爬取子模块，通过编写Chrome浏览器插件的方式请求并解析微博认证用户分类页面，并将解析出的ID发送给该模块的存储子模块。针对新浪、腾讯微博编写不同的浏览器插件进行爬取。为两个插件分别建立插件根目录，在插件根目录中创建manifest,json配置文件,指定在新浪微博认证用户首页加载完成之后加载jquery.js和content_script, js 两个 Javascript 文件，其中 jquery.js 是 jQuery 函数库，content_script.js 中为该子模块爬取认证用户ID的逻辑,通过配置文件中的permissions字段指定该插件能够请求认证用户页面和本地Webserver的任何资源。腾讯微博爬取插件的相关配置除了将新浪微博认证用户首页改为腾讯微博认证用户首页外其余项基本相同。新浪、腾讯微博的认证用户页面结构有所不同，具体的爬取过程也有所不同。针对新浪微博认证用户页面，首先使用jQuery获取所有class=nav_barMain的div元素中的ul元素中所有第一级Ii元素，再从每一个Ii元素中获取第一个a元素，其href属性即为一级分类的链接，a元素内的文字为一级分类的名称。其次获取第一级Ii元素中的ul元素，其内的Ii元素中的a元素内的文字及href属性为二级分类名称及链接。然后对于每一个二级分类，向其链接通过jQuery提供的$.post函数发送请求,在post函数返回的responseText中使用正则表达式找出三 级分类名称及链接。对于所有的三级分类链接，在链接后添上参数letter=a、letter=b、…、Ietter=Z构成26个新的链接，向这些链接分别发送post请求,在返回的页面中使用正则表达式找出出所有的微博ID。最后，将微博ID以及对应的分类分别构造成Javascript数组，调用jQuery提供的t post函数将该数组发送给该模块的存储子模块相应的的处理页面。针对腾讯微博认证用户页面，首先使用jQuery获取class=peopleNav的div元素中ul元素中的所有第一级Ii元素，每个Ii元素中第一个a元素的文本及href属性为一级分类名称及链接；其次使用jQuery触发每个Ii的mouseover事件,使得页面自动发送AJAX请求获取每个一级分类下的二级分类并写入当前页面。然后获取第一级Ii元素中class=navLayer的div元素，其中dt元素中的strong元素中的文本为二级分类名称，dt元素后的dd元素中所有的a元素的文本及href属性为三级分类名称及链接。对于每一个三级分类链接，在链接后添力口 sort=char&amp;char=a、sort=char&amp;char=b、...&gt;sort=char&amp;char=z 构成 26 个新的链接，向这些链接分别发送Post请求，在返回的页面中使用正则匹配表达式找出所有的微博ID。后续步骤与新浪微博相似，除了向存储子模块中对应腾讯微博ID的处理页面发送ID及对应的分类名称外，其他步骤基本相同。</p>
    <p>[0015]	存储子模块，使用PHP语言分别编写新浪、腾讯的saveld.php文件，接收新浪、腾讯微博ID爬取子模块的Get/Post请求，获取分类名称数组和微博ID数组，按照数组中除最后一级分类外的分类名称分别建立认证用户ID采集目录并以分类名称命名(如果目录已存在则不再建立)，以“最后一级分类名称.txt”的格式创建认证用户ID文件，并将ID数组中的ID以换行符隔开存入认证用户ID文件(如果认证用户ID文件已存在则只往文件中添加ID)。其中建立目录和创建文件之前需要将不允许出现在目录名或文件名中的字符“/”和“ \ ”替换为“、”。如分类名称数组为[“娱乐”，“娱乐产业”，“策划/宣传”]，则建立的目录应为“娱乐/娱乐产业/”，并在目录中创建文件“策划、宣传.txt”，将ID存入该文件中。</p>
    <p>[0016]	微博API模块，自动化获取授权令牌以支持长期地通过API的方式不断地获取认证用户的粉丝ID。其中新浪微博的授权令牌需要通过模拟HTTPS请求的方式自动化获取，腾讯微博的授权令牌只需要定期调用腾讯微博提供的令牌刷新API即可实现在3个月内自动化获取。通过API的方式获取的粉丝ID数量达到一定阈值时，将粉丝ID存入本地的粉丝ID采集目录的粉丝ID文件中，粉丝ID文件以换行符分隔各个ID，以“当前时间戳.txt”的格式命名。包括新浪授权令牌获取子模块、腾讯授权令牌获取子模块和粉丝采集子模块。</p>
    <p>[0017]	所述的微博API模块的各个子模块的功能分别是:</p>
    <p>[0018]	新浪授权令牌获取子模块，新浪微博开放平台的授权页面采用的是HTTPS协议，链接经过加密保护，如果采用常规方法，调用java.net.URLconnection建立通信将会失败。为此，需要采用其他方法:经过仔细调研，得到用户登录新浪微博授权页面需要的参数。采用Apache公司的HttpClient开源工具提供的相关接口，仓Il建一个PostMethod对象，将登陆新浪微博所需的参数加入到该对象中。然后创建一个消息头链表，链表中的每个元素初始化为一个HttpClient中的Header对象,构造请求消息的消息头,填入相关信息,包括Referer&gt; Host、User_Agent。创建Protocol对象，填入相关参数从而打开到服务端的链接，具体如下:协议名称设为“https”,端口为443, ProtocolSocketFactory参数通过创建MySSLSocketFactory对象(由微博平台提供)得到。创建HttpClient对象,通过调用相关接口，提交消息头链表。从而得到服务端的返回信息，之后解析返回消息，切分字符串，便得至Ij了 AccessToken。</p>
    <p>[0019]	腾讯授权令牌获取子模块，通过定期调用腾讯微博提供的访问令牌刷新API获取新的令牌，以保证令牌在3个月内不过期。该模块需要用户在系统运行前进行一次手动授权，此后3个月内只需定期刷新授权令牌，而无需手动授权。</p>
    <p>[0020]	粉丝采集子模块，从认证用户ID采集目录中读取认证用户ID文件，获取并遍历认证用户ID，使用授权令牌调用新浪、腾讯微博开放的API，随机获取认证用户随机的至多5000名粉丝的ID，并将粉丝ID缓存在一个缓存文件中，当粉丝ID数量达到一定阈值时，将缓存文件中的ID存入粉丝ID采集目录的粉丝ID文件中，粉丝ID文件以“当前时间戳.txt”的格式命名。虽然遍历一次认证用户ID只能获取每位认证用户的至多5000名粉丝的ID，但是通过多次遍历使得获取的ID趋于完全。多次遍历需要调用较多次数的API，但新浪、腾讯微博对调用频率进行了限制，因此影响了采集的效率。通过使用多个微博应用测试用户轮询、多台机器同时抓取的方式，在不违背新浪微博、腾讯微博限制API调用次数的初衷的前提下提高采集的效率。其中微博应用测试用户(以下简称测试用户)是能够获取授权令牌的最小单位。微博对API调用次数的限制分为3个级别:测试用户级别(每小时内一个测试用户调用API的频率不能超过此上限)，微博应用级别(每小时内同一微博应用中多个测试用户调用API的次数总和不能超过此上限)和IP级别(每小时内同一台机器上的多个微博应用调用API的次数总和不能超过此上限)。多测试用户方式轮询采集是指在同一个程序中首先使用多个测试用户分别获取授权令牌，其次轮询地使用这些授权令牌调用API，以增加每小时内API的调用次数，该方式能够使API调用频率达到IP级别的调用频率上限。在新浪、腾讯微博中，微博应用级别和IP级别的API调用频率上限相等，因此不需要研究在一台机器上通过多个微博应用同时采集的方式提高采集速率。多台机器同时抓取的方式是指将多测试用户方式轮询采集程序部署到多台机器上同时运行，每台机器的API调用频率都可以达到IP级别的API调用频率上限，因此该方式能够使API调用频率达到机器数*IP级别API调用频率上限。在使用多台机器同时抓取的采集方式时，每台机器分别将已采集的微博ID缓存在自己的缓存文件中，当缓存的ID数量达到一定阈值时，使用Ftp接口将缓存的文件上传至索引和去重模块所在机器的粉丝ID采集目录中。假设需要采集新浪微博的55000位认证用户的粉丝ID，需要遍历5次认证用户ID，如果不使用多个测试用户轮询、多台机器同时采集的方式，由于测试用户级别API调用频率限制(150次/小时)，需要(55000*5)/150=1833.33小时=76.4天才能采集完成。如果需要更快地采集微博ID而不对微博网站构成潜在的风险，可以采用多测试用户的方式，由于IP级别API调用频率限制(1000次/小时)，最多可以使用7个测试用户，则上述需求只需(55000*5)/1000=275小时=11.5天即可完成。如果还需要进一步提高采集的速率，可以采用多机器的方式，此时API调用频率可以达到1000*机器数/每小时，如果使用5台机器进行采集，则上述需求只需(55000*5)/(1000*5) =55小时&#12316;2.3天即可完成。用户可以根据具体需求及条件采取合适的采集方案。</p>
    <p>[0021]	所述的述的去重与索引模块的各个子模块的功能分别是:</p>
    <p>[0022]	索引建立模块,使用Linux的Crontab工具定期执行。模块使用Java编写，每次执行时从微博粉丝ID采集目录中读取粉丝ID文件，将文件中的ID存入HashSet容器实现自动去重(HashSet容器是基于哈希算法实现的容器，具有集合特性，能保证其中的元素不重复出现)，在Lucene索引中查询HashSet容器中的ID，如果ID已存在于索引中，则将ID从HashSet容器中删除，然后将HashSet容器中的ID存入Lucene索引，将新并入索引的ID标记为“未导出”，将已处理的粉丝ID文件删除。</p>
    <p>[0023]	ID导出子模块,使用Linux的Crontab工具定期执行。每次执行时调用Lucene提供的API，从Lucene中检索出一定数量的标记为“未导出”的微博ID，在本地已建立好的微博ID导出目录中创建微博ID导出文件，将导出的微博ID以换行符分隔存入文件中，文件根据当前系统时间以“年-月-日_时-分.txt”的格式命名，并将对应ID的标记置为“已导出”。</p>
    <p>[0024]	标记更新子模块，使用Linux的Crontab工具定期执行。每次执行时检查本地的微博ID导出目录中的微博ID导出文件，如果文件名被存储模块处理并重命名为“Hbase-年-月_日_时-分.txt”的格式，则在Lucene中将该文件中的ID对应的标记置为“已导入Hbase”，并将该文件删除。</p>
    <p>[0025]	所述方法包括下列操作步骤:</p>
    <p>[0026]	(I)工具通过采集层收集来自微博网站的微博ID ；</p>
    <p>[0027]	(2)工具通过存储层对微博ID进行去重和分布式存储操作。</p>
    <p>[0028]	所述步骤(I)进一步包括下列操作:</p>
    <p>[0029]	(1.1)采集层中的网络爬取模块通过编写浏览器插件的方式从新浪、腾讯两大微博网站上爬取所有认证用户的ID，并存储到本地的文件中；</p>
    <p>[0030]	(1.2)采集层中的微博API模块首先自动获取新浪、腾讯微博的API调用授权令牌，其次通过调用API的方式获取认证用户的粉丝ID，最后将粉丝ID存储在本地的粉丝ID采集目录的粉丝ID文件中。[0031]	所述步骤(1.1)中，网络爬取模块的爬取和存储的操作进一步包括下列内容:</p>
    <p>[0032]	(1.1.1)通过编写Chrome浏览器插件的方式请求并解析微博认证用户分类页面，并将解析出的ID发送给该模块的存储子模块。针对新浪、腾讯微博编写不同的浏览器插件进行爬取。为两个插件分别建立插件根目录，在插件根目录中创建manifest, json配置文件，指定在新浪微博认证用户首页加载完成之后加载jquery.js和content_script.js两个Javascript文件,其中jquery.js是jQuery函数库,content_script.js中为该子模块爬取认证用户ID的逻辑,通过配置文件中的permissions字段指定该插件能够请求认证用户页面和本地Webserver的任何资源。腾讯微博爬取插件的相关配置除了将新浪微博认证用户首页改为腾讯微博认证用户首页外其余项基本相同。新浪、腾讯微博的认证用户页面结构有所不同，具体的爬取过程也有所不同。</p>
    <p>[0033]	(1.1.2)针对新浪微博认证用户页面，爬取过程为:</p>
    <p>[0034]	首先使用jQuery获取所有class=nav_barMain的div元素中的ul元素中所有第一级Ii元素。</p>
    <p>[0035]	从每一个Ii元素中获取第一个a元素，其href属性即为一级分类的链接，a元素内的文字为一级分类的名称。</p>
    <p>[0036]	获取第一级Ii元素中的ul元素，其内的Ii元素中的a元素内的文字及href属性为二级分类名称及链接。</p>
    <p>[0037]	然后对于每一个二级分类，向`其链接通过jQuery提供的$.post函数发送请求,在post函数返回的responseText中使用正则表达式找出三级分类名称及链接。</p>
    <p>[0038]	对于所有的三级分类链接，在链接后添上参数letter=a、letter=b、…、Ietter=Z构成26个新的链接，向这些链接分别发送post请求,在返回的页面中使用正则表达式找出所有的微博ID。</p>
    <p>[0039]	最后，将微博ID以及对应的分类分别构造成Javascript数组,调用jQuery提供的$.post函数将该数组发送给该模块的存储子模块相应的的处理页面。</p>
    <p>[0040]	(1.1.3)网络爬取模块中的腾讯微博ID爬取子模块，针对腾讯微博认证用户页面，爬取过程如下:</p>
    <p>[0041]	首先使用jQuery获取class=peopleNav的div元素中ul元素中的所有第一级Ii元素，每个Ii元素中第一个a元素的文本及href属性为一级分类名称及链接。</p>
    <p>[0042]	使用jQuery触发每个Ii的mouseover事件,使得页面自动发送AJAX请求获取每个一级分类下的二级分类并写入当前页面。</p>
    <p>[0043]	然后获取第一级Ii元素中class=navLayer的div元素,其中dt元素中的strong元素中的文本为二级分类名称，dt元素后的dd元素中所有的a元素的文本及href属性为三级分类名称及链接。</p>
    <p>[0044]	对于每一个三级分类链接，在链接后添加sort=char&amp;char=a、sort=char&amp;char=b&gt;…、sort=char&amp;char=z构成26个新的链接，向这些链接分别发送post请求，在返回的页面中使正则表达式找出所有的微博ID。</p>
    <p>[0045]	后续步骤与新浪微博相似，除了向存储子模块中相应的处理页面发送ID及对应的分类名称外，其他步骤基本相同。</p>
    <p>[0046]	(1.1.4)网络爬取模块中的存储子模块，使用PHP语言编写新浪、腾讯的saveld.Php文件，接收新浪、腾讯微博ID爬取子模块在(1.1.2)与(1.1.3)中发送的Get/Post请求，获取分类名称数组和微博ID数组，按照数组中除最后一级分类外的分类名称分别建立认证用户ID采集目录并以分类名称命名(如果目录已存在则不再建立)，以“最后一级分类名称.txt”的格式创建认证用户ID文件，并将ID数组中的ID以换行符隔开存入认证用户ID文件(如果认证用户ID文件已存在则只往文件中添加ID)。其中建立目录和创建文件之前需要将不允许出现在目录名或文件名中的字符“/”和“\ ”替换为“、”。如分类名称数组为[“娱乐”，“娱乐产业”，“策划/宣传”]，则建立的目录应为“娱乐/娱乐产业/”，并在目录中创建文件“策划、宣传.txt”。</p>
    <p>[0047]	所述步骤(1.2)中，微博API模块的采集和存储的操作进一步包括下列内容:</p>
    <p>[0048]	(1.2.1)微博API模块中的新浪授权令牌获取子模块，通过模拟HTTPS请求自动获取新浪微博SDK访问令牌，保证令牌不过期，其他模块只需利用得到的令牌，遵循0Auth2.0协议通过认证，即可对SDK提供的API进行调用。具体的方式是:</p>
    <p>[0049]	经过仔细调研，得到用户登录新浪微博授权页面需要的参数。</p>
    <p>[0050]	采用Apache公司的HttpClient开源工具提供的相关接口，仓Il建一个PostMethod对象，将登陆新浪微博所需的参数加入到该对象中。</p>
    <p>[0051]	创建一个消息头链表，链表中的每个元素初始化为一个HttpClient中的Header对象，构造请求消息的消息头，填入相关信息，包括Referer、Host、User_Agent。</p>
    <p>[0052]	创建Protocol对象，填入相关参数从而打开到服务端的链接，具体如下:协议名称设为 “https”,端口为 443, ProtocolSocketFactory 参数通过创建 MySSLSocketFactory对象(由微博平台提供)得到。</p>
    <p>[0053]	创建HttpClient对象,通过调用相关接口，提交消息头链表。</p>
    <p>[0054]	完成以上步骤之后即可得到服务端的返回信息，之后解析返回消息，切分字符串，便得到了 AccessToken。</p>
    <p>[0055]	(1.2.2)微博API模块中的腾讯授权令牌获取子模块，程序运行前，用户手动运行使用一次手动授权之后得到的访问令牌，通过定期调用腾讯微博提供的访问令牌刷新API，获取新的令牌，以保证令牌在3个月内不过期。其中手动授权的过程为，运行授权程序，程序将弹出浏览器，显示腾讯微博授权页面，输入用户名密码后页面自动跳转，将跳转后页面的URL中#号后面的部分复制，粘贴到程序中并输入回车，即可完成一个测试用户的授权。</p>
    <p>[0056]	(1.2.3)微博API模块中的粉丝采集子模块，从认证用户ID采集目录中读取认证用户ID文件，其中认证用户ID采集目录和认证用户ID文件由(1.1.4)产生，将文件中的所有ID存储于一个数组中；</p>
    <p>[0057]	(1.2.4)对于(1.2.3)中的数组中的每一个认证用户ID，使用授权令牌调用新浪、腾讯微博开放的API，随机获取该认证用户随机的至多5000名粉丝的ID，并将粉丝ID保存在一个缓存文件中；</p>
    <p>[0058]	(1.2.5)当粉丝ID数量达到一定阈值时，将缓存文件中的ID存入粉丝ID采集目录的粉丝ID文件中，粉丝ID文件以“当前时间戳.txt”的格式命名；</p>
    <p>[0059]	(1.2.6)经以上步骤遍历认证用户ID,只能获取每位认证用户随机的至多5000名粉丝ID，因此需要重复(1.2.3) (1.2.4) (1.2.5)步骤，多次遍历认证用户ID抓取其粉丝ID，使得系统获取的ID逐渐趋于完整；[0060]	(1.2.7)在(1.2.6)中所述的多次重复遍历需要较多的API调用次数，但由于API调用次数存在限制，多次遍历需要较长时间。通过使用多个微博应用测试用户轮询、多台机器同时抓取的方式，在不违背新浪微博、腾讯微博限制API调用次数的初衷的前提下提高采集的效率。其中微博应用测试用户(以下简称测试用户)是能够获取授权令牌的最小单位。微博对API调用次数的限制分为3个级别:</p>
    <p>[0061]	表IAPI调用次数限制说明</p>
    <p>[0062]</p>
    <p>限制&#32026;别	测试用户级别	每小时内一个测试用户调用API #频率不能超过 此上限微博应用级别	每小时内同一微博应用中多个测试用户调用API  的次数总和不能超过此上F艮IP级别	每小时内同一台机器上的多个徽博应用调&#29246;API 的次数总和不能超过此上跟</p>
    <p>[0063]	多测试用户方式轮询采集是指在同一个程序中首先使用多个测试用户分别获取授权令牌，其次轮询地使用这些授权令牌调用API，以增加每小时内API的调用次数，该方式能够使API调用频率达到IP级别的调用频率上限。</p>
    <p>[0064]	在新浪、腾讯微博中，微博应用级别和IP级别的API调用频率上限相等，因此不需要研究在一台机器上通过多个微博应用同时采集的方式提高采集速率。</p>
    <p>[0065]	多台机器同时抓取的方式是指将多测试用户方式轮询采集程序部署到多台机器上同时运行，每台机器的API调用频率都可以达到IP级别的API调用频率上限，因此该方式能够使API调用频率达到机器数*IP级别API调用频率上限。</p>
    <p>[0066]	在使用多台机器同时抓取的采集方式时，每台机器分别将已采集的微博ID缓存在自己的缓存文件中，当缓存的ID数量达到一定阈值时，使用ftp接口将缓存的文件上传至索引和去重模块所在机器的粉丝ID采集目录中。</p>
    <p>[0067]	经过加入多测试用户轮询、多台机器部署等机制，系统的性能有了明显改进。假设需要采集新浪微博的55000位认证用户的粉丝ID，需要遍历5次认证用户ID，如果不使用多个测试用户轮询、多台机器同时采集的方式，由于测试用户级别API调用频率限制(150次/小时)，需要(55000*5)/150=1833.33小时=76.4天才能采集完成。如果需要更快地采集微博ID而不对微博网站构成潜在的风险，可以采用多测试用户的方式，由于IP级别API调用频率限制(1000次/小时)，最多可以使用7个测试用户，则上述需求只需(55000*5)/1000=275小时=11.5天即可完成。如果还需要进一步提高采集的速率，可以采用多机器的方式，此时API调用频率可以达到1000*机器数/每小时，如果使用5台机器进行采集，则上述需求只需(55000*5)/(1000*5) =55小时&#12316;2.3天即可完成。用户可以根据具体需求及条件采取合适的采集方案。</p>
    <p>[0068]	所述步骤(2)进一步包括下列操作:</p>
    <p>[0069]	(2.1)存储层中的去重与索引模块，去重与索引模块，调用Lucene提供的API为已采集过的微博ID建立索引，其中新浪、腾讯微博对应的索引名称分别为丨11(1以_4和index_B，定期将微博ID导出到指定目录的文件中供数据存储模块处理。索引中包括微博ID和标记两列。微博ID和标记都会被检索，存储方式都是“不分词”。标记有三种取值:“未导出”、“已导出”和“已导入Hbase”。其中“未导出”表不微博ID未从Lucene中导出；“已导出”表不微博ID已从Lucene中导出，但未导入到Hbase中；“已导入Hbase”表不微博ID已导入到Hbase中。</p>
    <p>[0070]	(2.2)数据存储模块，负责从去重与索引模块导出已采集的微博ID，利用存储模块，将微博id存入Hbase中同时提供微博ID查询接口。该模块使用Linux的Crontab命令定期执行。每次执行时，调用Iucene提供的API从index_A和index_B两个索引中分别检索出数据存储模块，将新浪微博ID和腾讯微博ID分别存储在Hbase的不同的表中，表的主键为“DDDDD微博ID”的格式，其中DDDDD表示一个五位十进制数字，该数字前缀是为后期的数据分析预留的标记空间，可以用于标记该微博ID的状态或者属性。该模块定期从Lucene中检索出标记值等于“未导出”的微博ID，调用Hbase提供的API，将这些微博ID存入Hbase相应的表中，并在Lucene中将这些微博ID对应的标记值改为“已导出”，以防止以后重复导出。</p>
    <p>[0071]	所述步骤(2.1)中，去重与索引模块的操作进一步包括下列内容:</p>
    <p>[0072]	(2.1.1)索引模块中的索引建立子模块调用Lucene提供的API索引建立模块，使用Linux的Crontab工具定期执行。每次执行时从微博粉丝ID采集目录中读取粉丝ID文件，将文件中的ID存入HashSet容器实现自动去重(HashSet容器是基于哈希算法实现的容器，具有集合特性，能保证其中的元素不重复出现)，调用Lucene提供的检索API在Lucene索引中查询HashSet容器中的ID，如果ID已存在于索引中，则将ID从HashSet容器中删除，然后调用Lucene提供的索引API将HashSet容器中的ID并入Lucene索引，将新并入索引的ID标记为“未导出”，将已处理的粉丝ID文件删除。</p>
    <p>[0073]	(2.1.2)索引模块中的ID导出子模块，使用Linux的Crontab工具定期执行。每次执行时调用Lucene提供的API，从Lucene中检索出一定数量的标记为“未导出”的微博ID，在本地已建立好的微博ID导出目录中创建微博ID导出文件，将导出的微博ID以换行符分隔存入文件中，文件根据当前系统时间以“年-月-日_时-分.txt”的格式命名，并将对应ID的标记置为“已导出”。</p>
    <p>[0074]	(2.1.3)索引模块中的标记更新子模块,使用Linux的Crontab工具定期执行。每次执行时检查本地的微博ID导出目录中的是否存在文件名为“Hbase-年-月-日_时-分.txt”的格式的文件，如果存在，表示该文件中的ID已被数据存储模块处理完毕，则在Lucene中将这些文件中的ID对应的标记置为“已导入Hbase”，并将该文件删除。</p>
    <p>[0075]	所述步骤(2.2)中，数据存储模块的存储操作进一步包括下列内容:</p>
    <p>[0076]	(2.2.1)利用Linux提供的Contab工具定期地从新浪、腾讯微博的微博ID导出目录中读取由(2.1.2)产生的以“年-月-日_时-分.txt”格式命名的文件，获取文件中的微博ID ；</p>
    <p>[0077]	(2.2.2)调用Hbase提供的API，将(2.2.1)中获取的新浪、腾讯微博ID分别存入Hbase相应的微博ID表中，其中新浪微博ID存入表author_A中，腾讯微博ID存入表author_B中。表的主键设计为“DDDDD微博ID”的格式，其中DDDDD表示一个五位十进制数字，该数字前缀是为后期的数据分析预留的标记空间，可以用于标记该微博ID的状态或者属性；</p>
    <p>[0078]	(2.2.3)调用Lucene提供的字段更新API，将新浪、腾讯微博的微博ID导出目录中已被(2.2.1)和(2.2.2)处理过的文件加上前缀“Hbase-”，即重命名为“Hbase-年-月-日_时-分.txt”的格式。</p>
    <p>附图说明</p>
    <p>[0079]	图1是本发明一种面向主流微博网站微博ID的采集方法及工具的架构组成示意图。</p>
    <p>[0080]	图2是面向主流微博网站微博ID的采集方法及工具的操作流程示意图。</p>
    <p>具体实施方式</p>
    <p>[0081]	为使本发明的目的、技术方案和优点更加清楚，下面结合附图对本发明作进一步的详细描述。</p>
    <p>[0082]	参见图1，本发明的架构分为两个层次，分别为采集层和存储层，层次和系统间的接口清晰，每层内部都由若干模块组成，模块之间的松耦合，有利于每层功能的扩展。采集层实现微博ID的采集，存储层实现本地分布式存储，并提供检索功能；其中:</p>
    <p>[0083]	采集层，实现认证用户ID爬取和认证用户粉丝ID的采集工作，由网络爬取模块和微博API模块组成。</p>
    <p>[0084]	存储层，负责对采集层中获取的微博ID进行去重操作以及将微博ID进行分布式存储，并提供微博ID查询接口，由去重模块和数据存储模块组成。</p>
    <p>[0085]	所述采集层的各模块的功能分别是:</p>
    <p>[0086]	网络爬取模块，负责针对新浪、腾讯微博认证用户网页中微博ID的抓取工作，主要包括网页爬取及解析和本地存储的操作。其中网页爬取及解析操作通过编写浏览器插件的方式来完成，本地存储操作通过编写Webserver代码的方式来完成。包括请求微博认证用户首页，一级、二级和三级分类页面，解析页面中的分类名称及对应的URL，请求并解析各级分类页面中的微博ID，并将微博ID存储到本地的认证用户ID采集目录中的认证用户ID文件中。其中认证用户ID目录是本地目录，依据微博网站的认证用户分类等级以及名称自动分级建立；认证用户ID文件以换行符分隔各个ID，并以“最下级分类名称.txt”的格式命名。该模块包括微博ID爬取子模块和存储子模块。</p>
    <p>[0087]	微博API模块，使用新浪、腾讯微博开放平台提供的微博API，获取微博认证用户的粉丝ID。其操作流程包括首先获得两大微博开放平台的授权令牌，其次根据业务需求，构造不同的参数给相应的API接口，并发送Get/Post请求，得到JSON格式的微博ID数据，并将解析出的微博ID存入粉丝ID采集目录的粉丝ID文件中。其中，粉丝ID采集目录是一个存储粉丝ID文件的目录，粉丝ID文件是存放该模块获取的ID的文本文件，以换行符分隔各个ID，每个文件存放一定数量的ID，文件以“当前时间戳.txt”的格式命名。</p>
    <p>[0088]	所述存储层的各模块的功能分别是:</p>
    <p>[0089]	去重与索引模块，所述的去重与索引模块，为已采集过的微博ID进行去重操作并建立索引，其中新浪、腾讯微博对应的索引名称分别为化(1以_4和index_B，定期将微博ID导出到指定目录的文件中供数据存储模块处理，在索引中设置标记字段防止重复导出ID。索引中包括微博ID和标记两列，存储方式都是“不分词”。标记有三种取值:“未导出”、“已导出”和“已导入Hbase”。其中“未导出”表不微博ID未从Lucene中导出已导出”表不微博ID已从Lucene中导出，但未导入到Hbase中；“已导入Hbase”表不微博ID已导入到Hbase中。该模块包括索引建立子模块、ID导出子模块和标记更新子模块。索引建立模块实现将采集的ID去重，并将去重后的ID并入索引，将对应ID的标记字段置为“未导出”。ID导出子模块负责定期检索索引中未导出的ID，存入本地的微博ID导出目录中的微博ID导出文件(微博ID导出目录需要在系统运行前创建，微博ID导出文件在每次导出时自动创建)，文件命名格式为“年-月-日_时-分.txt”，并提供给数据存储模块处理，将对应ID的标记置为“已导出”。标记更新子模块负责检查数据存储模块是否已处理完导出的ID，若处理完成，则将对应ID的标记置为“已导入Hbase”。</p>
    <p>[0090]	数据存储模块，负责从本地的微博ID导出目录中读取微博ID导出文件，并使用开源的分布式系统Hadoop中的存储工具Hbase将文件中的微博ID进行分布式存储，同时提供微博ID查询接口。该模块使用Linux的Crontab命令定期执行。每次执行时,读取本地的微博ID导出目录中的微博ID导出文件，将新浪微博ID和腾讯微博ID分别存储在Hbase的不同的表中，表的主键设计为“DDDDD微博ID”的格式，其中DDDDD表示一个五位十进制数字，该数字前缀是为后期的数据分析预留的标记空间，可以用于标记该微博ID的状态或者属性。该模块定期从Lucene中检索出标记值等于“未导出”的微博ID，调用Hbase提供的API，将这些微博ID存入Hbase相应的表中，并在Lucene中将这些微博ID对应的标记值改为“已导出”，以防止以后重复导出。</p>
    <p>[0091]	所述的网络爬取模块的各子模块的功能分别是:</p>
    <p>[0092]	新浪微博ID爬取子模块，通过编写浏览器插件的方式解析新浪微博的认证用户主页，获取一级分类列表及其URL，并对一级分类列表中的URL发送AJAX请求获取相应的页面，如果没有下一级分类，则向该分类中以每个字母开头的认证用户页面发送AJAX请求，从获取的页面中解析出认证用户ID，并使用Get/Post请求将解析出来的微博ID及其对应的分类发送给该模块的存储子模块。否则，从一级分类页面中解析出二级分类列表及其URL,进行同上的操作。</p>
    <p>[0093]	腾讯微博ID爬取子模块，通过编写浏览器插件的方式解析腾讯微博的认证用户主页，获取一级和二级分类列表及其URL，并对二级分类中以每个字母开头的认证用户页面发送AJAX请求,从获取的页面中解析出认证用户的ID,并使用Get/Post请求将解析出的微博ID及其对应的分类发送给该模块的存储子模块。</p>
    <p>[0094]	存储子模块，使用Webserver接收新浪、腾讯微博ID爬取子模块的Get/Post请求，按照一级、二级分类分别建立一级、二级目录并以分类名称命名，其中建立目录之前需要将不允许出现在目录名中的字符“/”和“\”替换为“、”，并将微博ID分类存入相应的文件中。[0095]	微博API模块，自动化获取授权令牌以支持长期地通过API的方式不断地获取认证用户的粉丝ID。其中新浪微博的授权令牌需要通过模拟HTTPS请求的方式自动化获取，腾讯微博的授权令牌只需要定期调用腾讯微博提供的令牌刷新API即可实现自动化获取。通过API的方式获取的粉丝ID数量达到一定阈值时，将粉丝ID存入粉丝ID采集目录的粉丝ID文件中，粉丝ID文件以“当前时间戳.txt”的格式命名。包括新浪授权令牌获取子模块、腾讯授权令牌获取子模块和粉丝采集子模块。</p>
    <p>[0096]	所述的微博API模块的各个子模块的功能分别是:</p>
    <p>[0097]	新浪授权令牌获取子模块，通过模拟HTTPS请求自动获取新浪微博SDK访问令牌，保证令牌不过期，其他模块只需利用得到的令牌，遵循0Auth2.0协议通过认证，即可对SDK提供的API进行调用。具体的方式是:通过构造新浪微博授权页面登录动作所需要的参数，依据HTTPS协议的特点,利用Apache公司提供的HttpClient开源工具,构造请求所需消息头，设置PostMethod，加上开放平台提供的通用Socket接口连通客户端到服务器的通信，发送Post请求，从而成功获取服务器端的响应，并解析响应消息体，获取认证令牌。</p>
    <p>[0098]	腾讯授权令牌获取子模块，使用一次手动授权之后得到的访问令牌，通过定期调用腾讯微博提供的访问令牌刷新API，获取新的令牌，以保证令牌在3个月以内不过期。其中手动授权的过程为，运行授权程序，程序将弹出浏览器，显示腾讯微博授权页面，输入用户名密码后页面自动跳转，将跳转后页面的URL中#号后面的部分复制，粘贴到程序中并输入回车，即可完成一个测试用户的授权。</p>
    <p>[0099]	粉丝采集子模块，从认证用户ID采集目录中读取认证用户ID文件，获取并遍历认证用户ID，使用授权令牌调用新浪、腾讯微博开放的API，随机获取认证用户随机的至多5000名粉丝的ID，并将粉丝ID缓存在一个缓存文件中，当粉丝ID数量达到一定阈值时，将缓存文件中的ID存入粉丝ID采集目录的粉丝ID文件中，粉丝ID文件以“当前时间戳.txt”的格式命名。该模块通过使用多个微博应用测试用户、多台机器同时抓取的方式，突破新浪微博、腾讯微博对于API调用次数的限制。其中微博应用测试用户(以下简称测试用户)是能够获取授权令牌的最小单位。由于一个测试用户在一个IP上的一个应用中每小时的API调用次数不能超过150次，而多个测试用户在一个IP上的一个或多个应用中每小时API调用次数的总和不能超过1000次，因此该模块采用多测试用户、多台机器的方式以增加API的调用次数。</p>
    <p>[0100]	参看图2，所述的面向主流微博网站的微博ID采集方法及工具的具体操作流程为:爬取新浪、腾讯微博认证用户微博ID，并存储在本地文件中；获取新浪、腾讯微博授权令牌，使用授权令牌调用相关API，获取认证用户的粉丝ID，并存储在本地文件中，受新浪、腾讯微博API调用次数的限制，该操作需要较长时间；定期将上一步骤采集的粉丝ID去重并为其建立索引；定期从索引中检索出ID，将其存入Hbase中。</p>
    <p>[0101]	所述方法包括下列操作步骤:</p>
    <p>[0102]	(I)工具通过采集层收集来自微博网站的微博ID ；</p>
    <p>[0103]	(2)系统通过存储层对微博ID进行去重和分布式存储操作。</p>
    <p>[0104]	所述步骤(I)进一步包括下列操作:</p>
    <p>[0105]	(1.1)采集层中的网络爬取模块通过编写浏览器插件的方式从新浪、腾讯两大微博网站上爬取所有认证用户的ID，并存储到本地的文件中；[0106]	(1.2)米集层中的微博API模块首先自动获取新浪、腾讯微博的API调用授权令牌，其次通过调用API的方式获取认证用户的粉丝ID，并将粉丝ID存储在本地的粉丝ID采集目录的粉丝ID文件中。</p>
    <p>[0107]	所述步骤(1.1)中，网络爬取模块的爬取和存储的操作进一步包括下列内容:</p>
    <p>[0108]	(1.1.1)通过编写Chrome浏览器插件的方式请求并解析微博认证用户分类页面，并将解析出的ID发送给该模块的存储子模块。针对新浪、腾讯微博编写不同的浏览器插件进行爬取。为两个插件分别建立插件根目录，在插件根目录中创建manifest, json配置文件，其中新浪微博爬取插件的manifest, json文件中的相关配置代码为:</p>
    <p>[0109]</p>
    <div class="patent-image small-patent-image"> <a href="//patentimages.storage.googleapis.com/CN103440139A/CN103440139AD00171.png"> <img id="idf0001" file="CN103440139AD00171.tif" img-content="drawing" img-format="tif" src="//patentimages.storage.googleapis.com/CN103440139A/CN103440139AD00171.png" class="patent-full-image" alt="Figure CN103440139AD00171"> </a> </div>
    <p>[0110]其中	content_scripts 字段指定在 http: //verified, weib0.com/fame/ 页面加载完成之后加载 jquery.js 和 content_script.js 两个 Javascript 文件,其中 jquery.js 是jQuery函数库，content_script.js中为该子模块爬取认证用户ID的逻辑。permissions字段指定该插件能够请求认证用户页面和本地Webserver的任何资源。</p>
    <p>[0111]	腾讯微博爬取插件的相关配置与新浪微博爬取插件的基本相同。除了将matches和 permissions 字段中 -http://verified, weib0.com/fame/- 改为 〃http://zhaoren.t.qq.com/people, php"。具体代码为:</p>
    <p>[0112]</p>
    <div class="patent-image small-patent-image"> <a href="//patentimages.storage.googleapis.com/CN103440139A/CN103440139AD00181.png"> <img id="idf0002" file="CN103440139AD00181.tif" img-content="drawing" img-format="tif" src="//patentimages.storage.googleapis.com/CN103440139A/CN103440139AD00181.png" class="patent-full-image" alt="Figure CN103440139AD00181"> </a> </div>
    <p>[0113]	新浪、腾讯微博的认证用户页面结构有所不同，content_script.js中实现的爬取过程也有所不同。</p>
    <p>[0114]	(1.1.2)网络爬取模块中的新浪微博ID爬取子模块，针对新浪微博认证用户页面,其content_script.js文件中的代码执行流程为:</p>
    <p>[0115]	首先使用jQuery获取所有`class=nav_barMain的div元素中的ul元素中所有第一级Ii元素，再从每一个Ii元素中获取第一个a元素，其href属性即为一级分类的链接，a元素内的文字为一级分类的名称。其次获取第一级Ii元素中的ul元素，其内的Ii元素中的a元素内的文字及href属性为二级分类名称及链接。</p>
    <p>[0116]	得到二级分类的名称和连接后，对每一个二级分类，向其链接通过jQuery提供的$.post函数发送请求，在post函数返回的responseText中使用正则匹配模式 /&lt;spanclass=\\\"cat_B\\\"&gt;〈aclass=\\\"W_linkc\\\"href=\\\" ([A-Za-z0_9\</p>
    <p>&#8226; \/\\=\?%_ &#12316;&#39347;#:{4} I (\\\/) |\w))+X\\\/a&gt;&lt;\\\/span〉/匹配出所有含有三级分类名称及链接的字符串(匹配模式两端的/表示正则式的开始与结束)，并使用正则匹配模式/href=\\\〃 ([A-Za-z0-9\.\/\\=\?%_&#12316;i&amp;#:;\+\-]+)\\\//X((\\u[0-9a-f] {4}) I (\\\/) \w)+)〈\\\/a&gt;/从其中提取出链接和名称，将名称中的\u替换为％u并使用javascript的unescape函数做逆转义操作，以将已转义为utf-8表示方式的中文字符编码转换为浏览器能够识别的中文字符。[0117]	对于所有的三级分类链接,在链接后添上参数letter=a、letter=b、…、Ietter=Z即可构成26个新的链接，向这些链接分别发送Post请求，之后在返回的页面中使用正则匹配模式/action-data=\\\〃uid=[0_9]+\\\〃/匹配出所有的含有认证用户微博ID的字符串，使用正则匹配模式/[0-9]+/提取出其中的微博ID。最后，将微博ID以及对应的分类分别构造成Javascript数组,调用jQuery提供的$.post函数将该数组发送给该模块的存储子模块的处理页面 http://localhost/sina/saveId.php。</p>
    <p>[0118]	(1.1.3)网络爬取模块中的腾讯微博ID爬取子模块，针对腾讯微博认证用户页面,其content_script.js文件中的代码执行流程为:</p>
    <p>[0119]	首先使用jQuery获取class=peopleNav的div元素中ul元素中的所有第一级Ii元素，每个Ii元素中第一个a元素的文本及href属性为一级分类名称及链接；其次使用j Query触发每个Ii的mouseover事件,使得页面自动发送AJAX请求获取每个一级分类下的二级分类并写入当前页面。</p>
    <p>[0120]	然后获取第一级Ii元素中class=navLayer的div元素,其中dt元素中的strong元素中的文本为二级分类名称，dt元素后的dd元素中所有的a元素的文本及href属性为三级分类名称及链接。对于每一个三级分类链接，在链接后添加sort=char&amp;char=a、sort=char&amp;char=b、…、sort=char&amp;char=z构成26个新的链接，向这些链接分别发送Post请求,在返回的页面中使用正则匹配模式/&lt;atarget=\〃_blank\〃href=\〃http: \/\/t.qq.com\/[a-zA-Z0_9\-_]{6, 20}\"title=\"[\u0000-\uffffa-zA-Z0-9\-_]{I, 12}\(i[\uOOOO-\uffffa-zA-ZO-9\-J {I, 20}\)\"&gt;[\u0000-\u9999a-zA-Z0_9\-_] {I, 12}〈\/a&gt;/匹配出所有包含认证用户微博ID的字符串，使用正则匹配模式/\〃http:\/\/t.qq.com\/([a-zA-Z0-9\-_] {6，20})\V 提取出其中的微博 ID。</p>
    <p>[0121]	最后，将微博ID以及对应的分类分别构造成javascript数组,调用jQuery提供的$.post函数将该数组发送给该模块的存储子模块的处理页面http://localhost/qq/saveld.php。</p>
    <p> [0122]	(1.1.4)网络爬取模块中的存储子模块，使用PHP语言编写新浪、腾讯的saveld.Php文件，接收新浪、腾讯微博ID爬取子模块的Get/Post请求，获取分类名称数组和微博ID数组，将数组中的字符串使用PHP的iconv函数由UTF-8编码转换为GBK编码(由于存储子模块在Windows上运行，文件夹与文件的名称都为GBK编码)，按照数组中除最后一级分类外的分类名称分别建立认证用户ID采集目录并以分类名称命名(如果目录已存在则不再建立)，以“最后一级分类名称.txt”的格式创建认证用户ID文件，并将ID数组中的ID以换行符隔开存入认证用户ID文件(如果认证用户ID文件已存在则只往文件中添加ID)。其中建立目录和创建文件之前需要将不允许出现在目录名或文件名中的字符“/”和“\”替换为“、”。如分类名称数组为[“娱乐”，“娱乐产业”，“策划/宣传”]，则建立的目录应为“娱乐/娱乐产业/”，并在目录中创建文件“策划、宣传.txt”。</p>
    <p>[0123]	所述步骤(1.2)中，微博API模块的爬取和存储的操作进一步包括下列内容:</p>
    <p>[0124]	(1.2.1)微博API模块中的新浪授权令牌获取子模块，通过模拟HTTPS请求自动获取新浪微博SDK访问令牌，保证令牌不过期，其他模块只需利用得到的令牌，遵循0Auth2.0协议通过认证，即可对SDK提供的API进行调用。具体的方式是:</p>
    <p>[0125]	经过仔细调研，发现用户登录新浪微博授权页面需要以下参数:[0126]	表2新浪微博授权页面登录所需参数</p>
    <p>[0127]</p>
    <p>	描述client&#8212;id	表示第三方应用的id Iredirect&#8212;uri	表示登录之后跳转的路径userid	表示测试用户&#37636;idpasswd	表示测试用户的登录密码isLoginSina	状态码，0表示未登录新浪，I表示已登录新浪action	表示输入用户id和密码后登录系统时执行的动作  名称response_type	表示提交参数后，收到的服务端的响应类型，设 为“code”</p>
    <p>[0128]</p>
    <p>[0129]	采用Apache公司的httpclient开源工具提供的相关接口，仓丨」建一个PostMethod对象，将登陆新浪微博所需的参数加入到该对象中。</p>
    <p>[0130]	创建一个消息头链表，链表中的每个元素初始化为一个HttpClient中的Header对象，构造请求消息的消息头，填入相关信息，包括Referer、Host、User_Agent。</p>
    <p>[0131]	创建Protocol对象，填入相关参数从而打开到服务端的链接，具体如下:协议名称设为 “https”,端口为 443, ProtocolSocketFactory 参数通过创建 MySSLSocketFactory对象(由微博平台提供)得到。</p>
    <p>[0132]	创建HttpClient对象,通过调用相关接口，提交消息头链表。</p>
    <p>[0133]	完成上述步骤之后得到服务端的返回信息，之后解析返回消息，切分字符串，便得至Ij了 AccessToken。</p>
    <p>[0134]	(1.2.2)微博API模块中的腾讯授权令牌获取子模块，程序运行前，用户手动运行使用一次手动授权之后得到的访问令牌，通过定期调用腾讯微博提供的访问令牌刷新API，获取新的令牌，以保证令牌在3个月内不过期；通过定期调用腾讯微博提供的访问令牌刷新API获取新的令牌，以保证令牌在3个月内不过期。该模块需要用户在系统运行前进行一次手动授权，此后3个月内只需定期刷新授权令牌，而无需手动授权。其中手动授权的过程为，运行授权程序，程序将弹出浏览器，显示腾讯微博授权页面，输入用户名密码后页面自动跳转，将跳转后页面的URL中#号后面的部分复制，粘贴到程序中并输入回车，即可完成一个测试用户的授权。[0135]	(1.2.3)微博API模块中的粉丝采集子模块，从认证用户ID采集目录中读取认证用户ID文件，其中认证用户ID采集目录和认证用户ID文件由(1.1.4)产生，将文件中的所有ID存储于一个数组中；</p>
    <p>[0136]	(1.2.4)对于(1.2.3)中的数组中的每一个认证用户ID，使用授权令牌调用新浪、腾讯微博开放的API，随机获取该认证用户随机的至多5000名粉丝的ID，并将粉丝ID保存在一个缓存文件中；</p>
    <p>[0137]	(1.2.5)当粉丝ID数量达到一定阈值时，将缓存文件中的ID存入粉丝ID采集目录的粉丝ID文件中，粉丝ID文件以“当前时间戳.txt”的格式命名；</p>
    <p>[0138]	(1.2.6)经以上步骤遍历认证用户ID,只能获取每位认证用户随机的至多5000名粉丝ID，因此需要重复(1.2.3) (1.2.4) (1.2.5)步骤，多次遍历认证用户ID抓取其粉丝ID，使得系统获取的ID逐渐趋于完整；</p>
    <p>[0139]	(1.2.7)在(1.2.6)中所述的多次重复遍历需要较多的API调用次数，由于API调用次数存在限制，(1.2.6)中所述的多次重复遍历需要较长时间来实现。通过使用多个微博应用测试用户轮询、多台机器同时抓取的方式，在不违背新浪微博、腾讯微博限制API调用次数的初衷的前提下提高采集的效率。其中微博应用测试用户(以下简称测试用户)是能够获取授权令牌的最小单位。</p>
    <p>[0140]	微博对API调用次数的限制分为3个级别:</p>
    <p>[0141]	表IAPI调用次数限制说明</p>
    <p>[0142]</p>
    <p>限制级别  测试用户级别	描述  此上限徽博应用级&#32177;	每小时内同一微博应用中多个测试用户调用API  的次数总和不能超过此上&#38577;IP级别	每小时内同一台机器上的多个&#40692;博应用调用API 的次数总和不能超过此上&#38577;</p>
    <p>[0143]	多测试用户方式轮询采集是指在同一个程序中首先使用多个测试用户分别获取授权令牌，其次轮询地使用这些授权令牌调用API，以增加每小时内API的调用次数，该方式能够使API调用频率达到IP级别的调用频率上限。</p>
    <p>[0144]	在新浪、腾讯微博中，微博应用级别和IP级别的API调用频率上限相等，因此不需要研究在一台机器上通过多个微博应用同时采集的方式提高采集速率。</p>
    <p>[0145]	多台机器同时抓取的方式是指将多测试用户方式轮询采集程序部署到多台机器上同时运行，每台机器的API调用频率都可以达到IP级别的API调用频率上限，因此该方式能够使API调用频率达到机器数*IP级别API调用频率上限。在使用多台机器同时抓取的采集方式时，每台机器分别将已采集的微博ID缓存在自己的缓存文件中，当缓存的ID数量达到一定阈值时，使用Ftp接口将缓存的文件上传至索引和去重模块所在机器的粉丝ID米集目录中。</p>
    <p>[0146]	经过加入多测试用户轮询、多台机器部署等机制，系统的性能有了明显改进。假设需要采集新浪微博的55000位认证用户的粉丝ID，需要遍历5次认证用户ID，如果不使用多个测试用户轮询、多台机器同时采集的方式，由于测试用户级别API调用频率限制(150次/小时)，需要(55000*5)/150=1833.33小时=76.4天才能采集完成。如果需要更快地采集微博ID而不对微博网站构成潜在的风险，可以采用多测试用户的方式，由于IP级别API调用频率限制(1000次/小时)，最多可以使用7个测试用户，则上述需求只需(55000*5)/1000=275小时=11.5天即可完成。如果还需要进一步提高采集的速率，可以采用多机器的方式，此时API调用频率可以达到1000*机器数/每小时，如果使用5台机器进行采集，则上述需求只需(55000*5)/(1000*5) =55小时&#12316;2.3天即可完成。用户可以根据具体需求及条件采取合适的采集方案。</p>
    <p>[0147]	所述步骤(2)进一步包括下列操作:</p>
    <p>[0148]	(2.1)存储层中的去重与索引模块，去重与索引模块，为已采集过的微博ID建立索引，定期将微博ID导出到指定目录的文件中供数据存储模块处理。索引中包括微博ID和标记两列。微博ID和标记都会被检索，存储方式都是“不分词”。标记有三种取值:“未导出”、“已导出”和“已导入Hbase”。其中“未导出”表不微博ID未从Lucene中导出；“已导出”表不微博ID已从Lucene中导出，但未导入到Hbase中；“已导入Hbase”表不微博ID已导入到Hbase中。</p>
    <p>[0149]	(2.2)数据存储模块，负责从去重与索引模块导出已采集的微博ID，并使用开源的分布式系统Hadoop中的存储工具Hbase进行分布式存储，同时提供微博ID查询接口。该模块使用Linux的Crontab命令定期执行。每次执行时，调用Lucene提供的API从index_A和indeX_B两个索引中分别检索出数据存储模块，将新浪微博ID和腾讯微博ID分别存储在Hbase的不同的表中，表的主键为“DDDDD微博ID”的格式，其中DDDDD表示一个五位十进制数字，该数字是为未来的分析预留的。该模块定期从Lucene中检索出标记值等于“未导出”的微博ID，调用Hbase提供的API，将这些微博ID存入Hbase相应的表中，并在Lucene中将这些微博ID对应的标记值改为“已导出”，以防止以后重复导出。</p>
    <p>[0150]	所述步骤(2.1)中，去重与索引模块的操作进一步包括下列内容:</p>
    <p>[0151]	(2.1.1)索引模块中的索引建立子模块调用Lucene提供的API索引建立模块，使用Linux的Crontab工具定期执行。每次执行时从微博粉丝ID采集目录中读取粉丝ID文件，将文件中的ID存入HashSet容器实现自动去重(HashSet容器是基于哈希算法实现的容器，具有集合特性，能保证其中的元素不重复出现)，调用Lucene提供的检索API在Lucene索引中查询HashSet容器中的ID，如果ID已存在于索引中，则将ID从HashSet容器中删除，然后调用Lucene提供的索引API将HashSet容器中的ID并入Lucene索引，将新并入索引的ID标记为“未导出”，将已处理的粉丝ID文件删除。</p>
    <p>[0152]	(2.1.2)索引模块中的ID导出子模块，使用Linux的Crontab工具定期执行。每次执行时调用Lucene提供的API，从Lucene中检索出一定数量的标记为“未导出”的微博ID，在本地已建立好的微博ID导出目录中创建微博ID导出文件，将导出的微博ID以换行符分隔存入文件中，文件根据当前系统时间以“年-月-日_时-分.txt”的格式命名，并将对应ID的标记置为“已导出”。</p>
    <p>[0153]	(2.1.3)索引模块中的标记更新子模块,使用Linux的Crontab工具定期执行。每次执行时检查本地的微博ID导出目录中的是否存在文件名为“Hbase-年-月-日_时-分.txt”的格式的文件，如果存在，表示该文件中的ID已被数据存储模块处理完毕，则在Lucene中将这些文件中的ID对应的标记置为“已导入Hbase”，并将该文件删除。</p>
    <p>[0154]	所述步骤(2.2)中，数据存储模块的存储操作进一步包括下列内容:</p>
    <p>[0155]	(2.2.1)利用Linux提供的Contab工具定期地从新浪、腾讯微博的微博ID导出目录中读取由(2.1.2)产生的以“年-月-日_时-分.txt”格式命名的文件，获取文件中的微博ID ；</p>
    <p>[0156]	(2.2.2)调用Hbase提供的API，将(2.2.1)中获取的新浪、腾讯微博ID分别存入Hbase相应的微博ID表中，其中新浪微博ID存入表author_A中，腾讯微博ID存入表author_B中。表的主键设计为“DDDDD微博ID”的格式，其中DDDDD表示一个五位十进制数字，该数字前缀是为后期的数据分析预留的标记空间，可以用于标记该微博ID的状态或者属性；</p>
    <p>[0157]	(2.2.3)调用Lucene提供的字段更新API，将新浪、腾讯微博的微博ID导出目录中已被(2.2.1)和(2.2.2)处理过的文件加上前缀“Hbase-”，即重命名为“Hbase-年-月-日_时-分.txt”的格式。</p>
  </div>
  </div></div><div class="patent-section patent-tabular-section"><a id="backward-citations"></a><div class="patent-section-header"><span class="patent-section-title">专利引用</span></div><table class="patent-data-table"><thead class="patent-data-table-thead"><tr class="patent-data-table"><th class="patent-data-table-th">引用的专利</th><th class="patent-data-table-th"> 申请日期</th><th class="patent-data-table-th">公开日</th><th class="patent-data-table-th"> 申请人</th><th class="patent-data-table-th">专利名</th></tr></thead><tr><td class="patent-data-table-td citation-patent"><a href="/patents/CN102622443A?cl=zh">CN102622443A</a><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td patent-date-value">2012年3月13日</td><td class="patent-data-table-td patent-date-value">2012年8月1日</td><td class="patent-data-table-td ">北京邮电大学</td><td class="patent-data-table-td ">一种面向微博的定制化筛选系统及方法</td></tr><tr><td class="patent-data-table-td citation-patent"><a href="/patents/US20110246457">US20110246457</a><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td patent-date-value">2010年3月30日</td><td class="patent-data-table-td patent-date-value">2011年10月6日</td><td class="patent-data-table-td ">Yahoo! Inc.</td><td class="patent-data-table-td ">Ranking of search results based on microblog data</td></tr></table><div class="patent-section-footer">* 由审查员引用</div></div><div class="patent-section patent-tabular-section"><a id="npl-citations"></a><div class="patent-section-header"><span class="patent-section-title">非专利引用</span></div><table class="patent-data-table"><thead class="patent-data-table-thead"><tr class="patent-data-table"><th colspan="3"class="patent-data-table-th">参考文献</th></tr></thead><tr><td class="patent-data-table-td ">1</td><td class="patent-data-table-td "><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td ">于留宝: "<a href='http://scholar.google.com/scholar?q="%E5%9F%BA%E4%BA%8EMapReduce%E7%9A%84%E5%BE%AE%E5%8D%9A%E6%96%87%E6%9C%AC%E9%87%87%E9%9B%86%E5%B9%B3%E5%8F%B0"'>基于MapReduce的微博文本采集平台</a>", 《计算机科学》, 30 November 2012 (2012-11-30), pages 143 - 145</td></tr><tr><td class="patent-data-table-td ">2</td><td class="patent-data-table-td "><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td ">周小丽: "<a href='http://scholar.google.com/scholar?q="%E5%9F%BA%E4%BA%8E%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%92%8CLucene%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BA%92%E8%81%94%E7%BD%91%E8%88%86%E6%83%85%E7%9B%91%E6%B5%8B%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0"'>基于网络爬虫和Lucene索引的互联网舆情监测系统设计与实现</a>", 《中国优秀硕士学位论文全文数据库 信息科技辑》, 31 August 2013 (2013-08-31), pages 138 - 747</td></tr><tr><td class="patent-data-table-td ">3</td><td class="patent-data-table-td "><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td ">陈舜华等: "<a href='http://scholar.google.com/scholar?q="%E5%9F%BA%E4%BA%8E%E5%BE%AE%E5%8D%9AAPI%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%93%E5%8F%96%E6%8A%80%E6%9C%AF"'>基于微博API的分布式抓取技术</a>", 《电信科学》, 31 August 2013 (2013-08-31), pages 146 - 150</td></tr></table><div class="patent-section-footer">* 由审查员引用</div></div><div class="patent-section patent-tabular-section"><a id="classifications"></a><div class="patent-section-header"><span class="patent-section-title">分类</span></div><table class="patent-data-table"><thead class="patent-data-table-thead"><tr class="patent-data-table"><th class="patent-data-table-th"> </th><th class="patent-data-table-th"> </th></tr></thead><tr><td class="patent-data-table-td ">国际分类号</td><td class="patent-data-table-td "><span class="nested-value"><a href="https://www.google.com/url?id=wA3nCAABERAJ&amp;q=http://web2.wipo.int/ipcpub/&amp;usg=AFQjCNER44F5jlVoswCkvW3YEcB5lW4moA#refresh=page&amp;notion=scheme&amp;version=20130101&amp;symbol=G06F0017300000">G06F17/30</a></span>, <span class="nested-value"><a href="https://www.google.com/url?id=wA3nCAABERAJ&amp;q=http://web2.wipo.int/ipcpub/&amp;usg=AFQjCNER44F5jlVoswCkvW3YEcB5lW4moA#refresh=page&amp;notion=scheme&amp;version=20130101&amp;symbol=G06F0009440000">G06F9/44</a></span>, <span class="nested-value"><a href="https://www.google.com/url?id=wA3nCAABERAJ&amp;q=http://web2.wipo.int/ipcpub/&amp;usg=AFQjCNER44F5jlVoswCkvW3YEcB5lW4moA#refresh=page&amp;notion=scheme&amp;version=20130101&amp;symbol=H04L0029080000">H04L29/08</a></span></td></tr></table><div class="patent-section-footer"></div></div><div class="patent-section patent-tabular-section"><a id="legal-events"></a><div class="patent-section-header"><span class="patent-section-title">法律事件</span></div><table class="patent-data-table"><thead class="patent-data-table-thead"><tr class="patent-data-table"><th class="patent-data-table-th"> 日期</th><th class="patent-data-table-th">代码</th><th class="patent-data-table-th">事件</th><th class="patent-data-table-th">说明</th></tr></thead><tr><td class="patent-data-table-td patent-date-value">2013年12月11日</td><td class="patent-data-table-td ">C06</td><td class="patent-data-table-td ">Publication</td><td class="patent-data-table-td "></td></tr><tr><td class="patent-data-table-td patent-date-value">2014年1月8日</td><td class="patent-data-table-td ">C10</td><td class="patent-data-table-td ">Entry into substantive examination</td><td class="patent-data-table-td "></td></tr></table><div class="patent-section-footer"></div></div><div class="modal-dialog" id="patent-images-lightbox"><div class="patent-lightbox-controls"><div class="patent-lightbox-rotate-controls"><div class="patent-lightbox-rotation-text">旋转</div><div class="rotate-icon rotate-ccw-icon"></div><div class="rotate-icon rotate-cw-icon"></div></div><div class="patent-lightbox-index-counter"></div><a class="patent-lightbox-fullsize-link" target="_blank">原始图片</a><div class="patent-drawings-control patent-drawings-next"><img class="patent-drawings-button-img"src="/googlebooks/images/kennedy/page_right.png" alt="Next page"width="21" height="21" /></div><div class="patent-drawings-control patent-drawings-prev"><img class="patent-drawings-button-img"src="/googlebooks/images/kennedy/page_left.png" alt="Previous page"width="21" height="21" /></div></div><div class="modal-dialog-content"><div class="patent-lightbox-image-holder"><div class="patent-lightbox-placeholder"></div></div></div></div><script>_OC_initPatentsAtb({image_not_available_html: " 未提供图片。\x3ca href\x3d//docs.google.com/viewer?url\x3dpatentimages.storage.googleapis.com/pdfs/35521a35614fb45ad9e9/CN103440139A.pdf\x3e查看 PDF\x3c/a\x3e"});</script></div></div></div></div></div><script>(function() {var href = window.location.href;if (href.indexOf('?') !== -1) {var parameters = href.split('?')[1].split('&');for (var i = 0; i < parameters.length; i++) {var param = parameters[i].split('=');if (param[0] == 'focus') {var elem = document.getElementById(param[1]);if (elem) {elem.focus();}}}}})();</script><script>_OC_addFlags({LockSrc:"/books/javascript/lock_6e802a6b2b28d51711baddc2f3bec198.js", Host:"https://www.google.com/", IsBooksRentalEnabled:1, IsBrowsingHistoryEnabled:1, IsWebReaderSvgEnabled:0, IsImageModeNotesEnabled:1, IsOfflineBubbleEnabled:1, IsFutureOnSaleVolumesEnabled:1, IsBooksUnifiedLeftNavEnabled:1, IsMobileRequest:0, IsZipitFolderCollectionEnabled:1, IsAdsDisabled:0, IsEmbeddedMediaEnabled:1, IsImageModeAnnotationsEnabled:1, IsMyLibraryGooglePlusEnabled:1, IsImagePageProviderEnabled:1, IsBookcardListPriceSmall:0, IsInternalUser:0, IsBooksShareButtonEnabled:0, IsDisabledRandomBookshelves:0});_OC_Run({"enable_p13n":false,"is_cobrand":false,"sign_in_url":"https://www.google.com/accounts/Login?service=\u0026continue=https://www.google.com/patents%3Fcl%3Dzh%26hl%3Dzh-CN\u0026hl=zh-CN"}, {"volume_id":"","is_ebook":true,"volumeresult":{"has_flowing_text":false,"has_scanned_text":true,"can_download_pdf":false,"can_download_epub":false,"is_pdf_drm_enabled":false,"is_epub_drm_enabled":false,"download_pdf_url":"https://www.google.com/patents/download/%E4%B8%80%E7%A7%8D%E9%9D%A2%E5%90%91%E4%B8%BB%E6%B5%81%E5%BE%AE%E5%8D%9A%E7%BD%91%E7%AB%99%E5%BE%AE%E5%8D%9Aid.pdf?id=wA3nCAABERAJ\u0026hl=zh-CN\u0026output=pdf\u0026sig=ACfU3U2NSuqi5uo3uJE1u4ydXfIYeY3RPA"},"sample_url":"https://www.google.com/patents/reader?id=wA3nCAABERAJ\u0026hl=zh-CN\u0026printsec=frontcover\u0026output=reader\u0026source=gbs_atb_hover","is_browsable":true,"is_public_domain":true}, {});</script><div id="footer_table" style="font-size:83%;text-align:center;position:relative;top:20px;height:4.5em;margin-top:2em"><div style="margin-bottom:8px"><a href="https://www.google.com/search?hl=zh-CN"><nobr>Google&nbsp;首页</nobr></a> - <a href="//www.google.com/patents/sitemap/"><nobr>站点地图</nobr></a> - <a href="http://www.google.com/googlebooks/uspto.html"><nobr>美国专利商标局 (USPTO) 专利信息批量下载</nobr></a> - <a href="/intl/zh-CN/privacy/"><nobr>隐私权政策</nobr></a> - <a href="/intl/zh-CN/policies/terms/"><nobr>服务条款</nobr></a> - <a href="https://support.google.com/faqs/answer/2539193?hl=zh-CN"><nobr> 关于 Google 专利</nobr></a> - <a href="//www.google.com/tools/feedback/intl/zh-CN/error.html" onclick="try{_OC_startFeedback({productId: '72792',locale: 'zh-CN'});return false;}catch(e){}"><nobr>发送反馈</nobr></a></div></div> <script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script><script type="text/javascript">var pageTracker = _gat._getTracker("UA-27188110-1");pageTracker._setCookiePath("/patents/");pageTracker._trackPageview();</script> </body></html>