<!DOCTYPE html><html><head><title>专利 CN103473287A - 一种自动分发、运行和更新可执行程序的方法及系统 -  Google 专利</title><script>(function(){(function(){function e(a){this.t={};this.tick=function(a,c,b){var d=void 0!=b?b:(new Date).getTime();this.t[a]=[d,c];if(void 0==b)try{window.console.timeStamp("CSI/"+a)}catch(e){}};this.tick("start",null,a)}var a;window.performance&&(a=window.performance.timing);var f=a?new e(a.responseStart):new e;window.jstiming={Timer:e,load:f};if(a){var c=a.navigationStart,d=a.responseStart;0<c&&d>=c&&(window.jstiming.srt=d-c)}if(a){var b=window.jstiming.load;0<c&&d>=c&&(b.tick("_wtsrt",void 0,c),b.tick("wtsrt_",
"_wtsrt",d),b.tick("tbsd_","wtsrt_"))}try{a=null,window.chrome&&window.chrome.csi&&(a=Math.floor(window.chrome.csi().pageT),b&&0<c&&(b.tick("_tbnd",void 0,window.chrome.csi().startE),b.tick("tbnd_","_tbnd",c))),null==a&&window.gtbExternal&&(a=window.gtbExternal.pageT()),null==a&&window.external&&(a=window.external.pageT,b&&0<c&&(b.tick("_tbnd",void 0,window.external.startE),b.tick("tbnd_","_tbnd",c))),a&&(window.jstiming.pt=a)}catch(g){}})();})();
</script><link rel="stylesheet" href="/patents/css/_50a6672b5f82ffbd39b7a9e87fd4594c/kl_intl_patents_bundle.css" type="text/css" /><script src="/books/javascript/atb_50a6672b5f82ffbd39b7a9e87fd4594c__zh_cn.js"></script><script>function googleTranslateElementInit() {new google.translate.TranslateElement({pageLanguage: "zh",gaTrack: true,gaId: "UA-27188110-1",multilanguagePage: true});}</script><script src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script><meta name="DC.type" content="Patent"><meta name="DC.title" content="一种自动分发、运行和更新可执行程序的方法及系统"><meta name="DC.contributor" content="张闯" scheme="inventor"><meta name="DC.contributor" content="李钊" scheme="inventor"><meta name="DC.contributor" content="徐克付" scheme="inventor"><meta name="DC.contributor" content="张鹏" scheme="inventor"><meta name="DC.contributor" content="中国科学院信息工程研究所" scheme="assignee"><meta name="DC.date" content="2013-8-30" scheme="dateSubmitted"><meta name="DC.description" content="本发明涉及一种自动分发、运行和更新可执行程序的方法及系统，包括客户端将可执行程序及相关文件所在目录打包成一个文件，并采用大文件分割及索引存储方法将打包文件存储到状态存储集群；工作节点定期到状态存储集群检测索引状态，当检测到有新的索引或已有索引有更新，按照索引方式将可执行程序下载到本地目录；工作节点定期到状态存储集群获取程序相关信息；工作节点根据程序相关信息，每隔心跳时间到本地目录检测可执行程序的下载状态，直到检测到可执行程序下载完成时，执行可执行程序；本发明可实现可执行程序的自动分发、运行及更新，尤其在线更新正在执行的可执行程序，无需重新提交Job信息，增加了系统的灵活性与稳定性。"><meta name="DC.date" content="2013-12-25"><meta name="DC.relation" content="CN:101615175:A" scheme="references"><meta name="DC.relation" content="CN:101719073:A" scheme="references"><meta name="DC.relation" content="US:20060179059:A1" scheme="references"><meta name="citation_reference" content="刘钊: &quot;《云同步中文件分割算法的研究与实现》&quot;, 《中国优秀硕士学位论文全文数据库信息科技辑》, no. 201301, 15 January 2013 (2013-01-15)"><meta name="citation_patent_publication_number" content="CN:103473287:A"><meta name="citation_patent_application_number" content="CN:201310385972"><link rel="canonical" href="https://www.google.com/patents/CN103473287A?cl=zh"/><meta property="og:url" content="https://www.google.com/patents/CN103473287A?cl=zh"/><meta name="title" content="专利 CN103473287A - 一种自动分发、运行和更新可执行程序的方法及系统"/><meta name="description" content="本发明涉及一种自动分发、运行和更新可执行程序的方法及系统，包括客户端将可执行程序及相关文件所在目录打包成一个文件，并采用大文件分割及索引存储方法将打包文件存储到状态存储集群；工作节点定期到状态存储集群检测索引状态，当检测到有新的索引或已有索引有更新，按照索引方式将可执行程序下载到本地目录；工作节点定期到状态存储集群获取程序相关信息；工作节点根据程序相关信息，每隔心跳时间到本地目录检测可执行程序的下载状态，直到检测到可执行程序下载完成时，执行可执行程序；本发明可实现可执行程序的自动分发、运行及更新，尤其在线更新正在执行的可执行程序，无需重新提交Job信息，增加了系统的灵活性与稳定性。"/><meta property="og:title" content="专利 CN103473287A - 一种自动分发、运行和更新可执行程序的方法及系统"/><meta property="og:type" content="book"/><meta property="og:site_name" content="Google Books"/><meta property="og:image" content="https://www.google.com/patents?id=&amp;printsec=frontcover&amp;img=1&amp;zoom=1"/><link rel="image_src" href="https://www.google.com/patents?id=&amp;printsec=frontcover&amp;img=1&amp;zoom=1"/><script>if (window['_OC_timingAction']) {window['_OC_timingAction']('patents_refpage');}</script><style>#gbar,#guser{font-size:13px;padding-top:1px !important;}#gbar{height:22px}#guser{padding-bottom:7px !important;text-align:right}.gbh,.gbd{border-top:1px solid #c9d7f1;font-size:1px}.gbh{height:0;position:absolute;top:24px;width:100%}@media all{.gb1{height:22px;margin-right:.5em;vertical-align:top}#gbar{float:left}}a.gb1,a.gb4{text-decoration:underline !important}a.gb1,a.gb4{color:#00c !important}.gbi .gb4{color:#dd8e27 !important}.gbf .gb4{color:#900 !important}

#gbar { padding:.3em .6em !important;}</style></head><body ><div id=gbar><nobr><a class=gb1 href="https://www.google.com/search?cl=zh&hl=zh-CN&sa=N&tab=tw">搜索</a> <a class=gb1 href="https://www.google.com/search?cl=zh&hl=zh-CN&tbm=isch&source=og&sa=N&tab=ti">图片</a> <a class=gb1 href="https://maps.google.com/maps?cl=zh&hl=zh-CN&sa=N&tab=tl">地图</a> <a class=gb1 href="https://play.google.com/?cl=zh&hl=zh-CN&sa=N&tab=t8">Play</a> <a class=gb1 href="https://www.youtube.com/results?cl=zh&hl=zh-CN&sa=N&tab=t1">YouTube</a> <a class=gb1 href="https://news.google.com/nwshp?hl=zh-CN&tab=tn">新闻</a> <a class=gb1 href="https://mail.google.com/mail/?tab=tm">Gmail</a> <a class=gb1 href="https://drive.google.com/?tab=to">云端硬盘</a> <a class=gb1 style="text-decoration:none" href="https://www.google.com/intl/zh-CN/options/"><u>更多</u> &raquo;</a></nobr></div><div id=guser width=100%><nobr><span id=gbn class=gbi></span><span id=gbf class=gbf></span><span id=gbe></span><a target=_top id=gb_70 href="https://www.google.com/accounts/Login?service=&continue=https://www.google.com/patents%3Fcl%3Dzh%26hl%3Dzh-CN&hl=zh-CN" class=gb4>登录</a></nobr></div><div class=gbh style=left:0></div><div class=gbh style=right:0></div><div role="alert" style="position: absolute; left: 0; right: 0;"><a href="https://www.google.com/patents/CN103473287A?cl=zh&amp;hl=zh-CN&amp;output=html_text" title="屏幕阅读器用户请注意：点击此链接可进入无障碍模式。阅读器在无障碍模式下具有同样的基本功能，但可让用户获得更好的体验。"><img border="0" src="//www.google.com/images/cleardot.gif"alt="屏幕阅读器用户请注意：点击此链接可进入无障碍模式。阅读器在无障碍模式下具有同样的基本功能，但可让用户获得更好的体验。"></a></div><div class="kd-appbar"><h2 class="kd-appname"><a href="/patents?hl=zh-CN"> 专利</a></h2><div class="kd-buttonbar left" id="left-toolbar-buttons"><a id="appbar-write-review-link" href=""></a><a id="appbar-view-print-sample-link" href=""></a><a id="appbar-view-ebook-sample-link" href=""></a><a id="appbar-patents-prior-art-finder-link" href="https://www.google.com/patents/related/CN103473287A"></a><a id="appbar-patents-discuss-this-link" href="https://www.google.com/url?id=KwHpCAABERAJ&amp;q=http://patents.stackexchange.com/redirect/google-patents%3Fpublication%3DCN103473287A&amp;usg=AFQjCNH0n77duymIrqtJVduWCv44AE1z9w" data-is-grant="false"></a><a id="appbar-read-patent-link" href="//docs.google.com/viewer?url=patentimages.storage.googleapis.com/pdfs/06138b3109b0c4586ae3/CN103473287A.pdf"></a><a id="appbar-download-pdf-link" href="//patentimages.storage.googleapis.com/pdfs/06138b3109b0c4586ae3/CN103473287A.pdf"></a><a class="appbar-content-language-link" data-selected="true" data-label="中文" href="/patents/CN103473287A?cl=zh&amp;hl=zh-CN"></a><a class="appbar-content-language-link" data-label="英语" href="/patents/CN103473287A?cl=en&amp;hl=zh-CN"></a></div><div class="kd-buttonbar right" id="right-toolbar-buttons"></div></div><div id="books-microdata" itemscope=""itemtype="http://schema.org/Book"itemid="https://www.google.com/patents/CN103473287A?cl=zh" style="display:none"><span itemprop="description">本发明涉及一种自动分发、运行和更新可执行程序的方法及系统，包括客户端将可执行程序及相关文件所在目录打包成一个文件，并采用大文件分割及索引存储方法将打包文件存储到状态存储集群；工作节点定期到状态存储集群...</span><span itemprop="url">https://www.google.com/patents/CN103473287A?cl=zh&amp;utm_source=gb-gplus-share</span><span class="main-title" itemprop="name">专利 CN103473287A - 一种自动分发、运行和更新可执行程序的方法及系统</span><img itemprop="image" src="https://www.google.com/patents?id=&amp;printsec=frontcover&amp;img=1&amp;zoom=1"alt="专利 CN103473287A - 一种自动分发、运行和更新可执行程序的方法及系统" title="专利 CN103473287A - 一种自动分发、运行和更新可执行程序的方法及系统"></div><div style="display: none"><ol id="ofe-gear-menu-contents" class="gbmcc"><li class="gbe gbmtc"><a class="gbmt goog-menuitem-content" id="" href="https://www.google.com/advanced_patent_search?hl=zh-CN"> 高级专利搜索</a></li></ol></div><div id="volume-main"><div id="volume-center"><div class=vertical_module_list_row><div id=intl_patents class=about_content><div id=intl_patents_v><table class="patent-bibdata patent-drawings-missing"><tr><td class="patent-bibdata-heading"> 公开号</td><td class="single-patent-bibdata">CN103473287 A</td></tr><tr><td class="patent-bibdata-heading">发布类型</td><td class="single-patent-bibdata">申请</td></tr><tr><td class="patent-bibdata-heading"> 专利申请号</td><td class="single-patent-bibdata">CN 201310385972</td></tr><tr><td class="patent-bibdata-heading">公开日</td><td class="single-patent-bibdata">2013年12月25日</td></tr><tr><td class="patent-bibdata-heading"> 申请日期</td><td class="single-patent-bibdata">2013年8月30日</td></tr><tr><td class="patent-bibdata-heading"> 优先权日<span class="patent-tooltip-anchor patent-question-icon"data-tooltip-text="优先日期属于假设性质，不具任何法律效力。Google 对于所列日期的正确性并没有进行法律分析，也不作任何陈述。"></span></td><td class="single-patent-bibdata">2013年8月30日</td></tr><tr class="patent-bibdata-list-row alternate-patent-number"><td class="patent-bibdata-heading"> 公开号</td><td><span class="patent-bibdata-value-list"><span class="patent-bibdata-value">201310385972.2, </span><span class="patent-bibdata-value">CN 103473287 A, </span><span class="patent-bibdata-value">CN 103473287A, </span><span class="patent-bibdata-value">CN 201310385972, </span><span class="patent-bibdata-value">CN-A-103473287, </span><span class="patent-bibdata-value">CN103473287 A, </span><span class="patent-bibdata-value">CN103473287A, </span><span class="patent-bibdata-value">CN201310385972, </span><span class="patent-bibdata-value">CN201310385972.2</span></span></td></tr><tr class="patent-bibdata-list-row "><td class="patent-bibdata-heading"> 发明者</td><td><span class="patent-bibdata-value-list"><span class="patent-bibdata-value"><a href="https://www.google.com/search?tbo=p&amp;tbm=pts&amp;hl=en&amp;q=ininventor:%22%E5%BC%A0%E9%97%AF%22">张闯</a>, </span><span class="patent-bibdata-value"><a href="https://www.google.com/search?tbo=p&amp;tbm=pts&amp;hl=en&amp;q=ininventor:%22%E6%9D%8E%E9%92%8A%22">李钊</a>, </span><span class="patent-bibdata-value"><a href="https://www.google.com/search?tbo=p&amp;tbm=pts&amp;hl=en&amp;q=ininventor:%22%E5%BE%90%E5%85%8B%E4%BB%98%22">徐克付</a>, </span><span class="patent-bibdata-value"><a href="https://www.google.com/search?tbo=p&amp;tbm=pts&amp;hl=en&amp;q=ininventor:%22%E5%BC%A0%E9%B9%8F%22">张鹏</a></span></span></td></tr><tr class="patent-bibdata-list-row "><td class="patent-bibdata-heading"> 申请人</td><td><span class="patent-bibdata-value-list"><span class="patent-bibdata-value"><a href="https://www.google.com/search?tbo=p&amp;tbm=pts&amp;hl=en&amp;q=inassignee:%22%E4%B8%AD%E5%9B%BD%E7%A7%91%E5%AD%A6%E9%99%A2%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E7%A0%94%E7%A9%B6%E6%89%80%22">中国科学院信息工程研究所</a></span></span></td></tr><tr class="patent-bibdata-list-row "><td class="patent-bibdata-heading">导出引文</td><td><span class="patent-bibdata-value-list"><span class="patent-bibdata-value"><a href="/patents/CN103473287A.bibtex?cl=zh">BiBTeX</a>, </span><span class="patent-bibdata-value"><a href="/patents/CN103473287A.enw?cl=zh">EndNote</a>, </span><span class="patent-bibdata-value"><a href="/patents/CN103473287A.ris?cl=zh">RefMan</a></span></span></td></tr><tr class="patent-internal-links"><td colspan=2><span class="patent-bibdata-value"><a href="#backward-citations">专利引用</a> (3),</span> <span class="patent-bibdata-value"><a href="#npl-citations">非专利引用</a> (1),</span> <span class="patent-bibdata-value"><a href="#classifications">分类</a> (2),</span> <span class="patent-bibdata-value"><a href="#legal-events">法律事件</a> (2)</span> </td></tr><tr><td colspan=2 class="patent-bibdata-external-link-spacer-top"></td></tr><tr class="patent-bibdata-external-link-spacer-bottom"></tr><tr><td colspan=2><span class="patent-bibdata-heading">外部链接:&nbsp;</span><span><span class="patent-bibdata-value"><a href="https://www.google.com/url?id=KwHpCAABERAJ&amp;q=http://211.157.104.87:8080/sipo/zljs/hyjs-yx-new.jsp%3Frecid%3D201310385972&amp;usg=AFQjCNFSlMnu6Ztq2T-5TlZuX5njW195sQ"> 中国国家知识产权局</a>, </span><span class="patent-bibdata-value"><a href="https://www.google.com/url?id=KwHpCAABERAJ&amp;q=http://worldwide.espacenet.com/publicationDetails/biblio%3FCC%3DCN%26NR%3D103473287A%26KC%3DA%26FT%3DD&amp;usg=AFQjCNEBtqGqTCXPH1mG9JVuTSUyXh61Dw"> 欧洲专利数据库 (Espacenet)</a></span></span></td></tr><tr class="patent-bibdata-group-spacer"></tr></table><div class="number-and-title"><span class="patent-title"><invention-title mxw-id="PT132105956" lang="ZH" load-source="patent-office">一种自动分发、运行和更新可执行程序的方法及系统</invention-title>
      </span><br><span class="patent-number">CN 103473287 A</span></div><div class="patent-section patent-abstract-section"><div class="patent-section-header"><span class="patent-section-title"> 摘要</span></div><div class="patent-text"><abstract mxw-id="PA128282969" lang="ZH" load-source="patent-office">
    <div class="abstract">本发明涉及一种自动分发、运行和更新可执行程序的方法及系统，包括客户端将可执行程序及相关文件所在目录打包成一个文件，并采用大文件分割及索引存储方法将打包文件存储到状态存储集群；工作节点定期到状态存储集群检测索引状态，当检测到有新的索引或已有索引有更新，按照索引方式将可执行程序下载到本地目录；工作节点定期到状态存储集群获取程序相关信息；工作节点根据程序相关信息，每隔心跳时间到本地目录检测可执行程序的下载状态，直到检测到可执行程序下载完成时，执行可执行程序；本发明可实现可执行程序的自动分发、运行及更新，尤其在线更新正在执行的可执行程序，无需重新提交Job信息，增加了系统的灵活性与稳定性。</div>
  </abstract>
  </div></div><div class="patent-section patent-claims-section"><div class="patent-section-header"><span class="patent-section-title">权利要求<span class="patent-section-count">(10)</span></span></div><div class="patent-text"><div mxw-id="PCLM57430800" lang="ZH" load-source="patent-office" class="claims">
    <div class="claim"> <div num="1" class="claim">
      <div class="claim-text">1.一种自动分发、运行和更新可执行程序的方法，其特征在于，包括如下步骤:  步骤A:客户端将可执行程序及相关文件所在目录打包成一个文件，并存储在缓存中；步骤B:客户端采用大文件分割及索引存储方法将缓存中的打包文件存储到状态存储集群的相应目录中；  步骤C:工作节点每隔心跳时间到状态存储集群中与其相关的目录检测索引状态，当检测到有新的索引或已有索引有更新，按照索引方式将可执行程序下载到本地目录；  步骤D:工作节点每隔心跳时间到状态存储集群中与其相关的目录获取包括程序名、程序地址的程序相关信息；  步骤E:工作节点根据程序相关信息，每隔心跳时间到本地目录检测可执行程序的下载状态，直到检测到可执行程序下载完成时，启动工作进程执行可执行程序。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="2" class="claim">
      <div class="claim-text">2.根据权利要求1所述一种自动分发、运行和更新可执行程序的方法，其特征在于，上述技术方案还包括:  步骤F:工作节点执行单元每隔心跳时间检查本地目录中正在执行的可执行程序；步骤G:计算可执行程序的MD5值，当发现可执行程序的MD5值发生变化时则终止对原可执行程序的执行，重新执行更新的可执行程序。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="3" class="claim">
      <div class="claim-text">3.根据权利要求1所述一种自动分发、运行和更新可执行程序的方法，其特征在于，所述步骤B中客户端采用大文件分割及索引存储方法将缓存中的打包文件存储到状态存储集群的相应目录中的具体实现为:  步骤B1:判断状态存储集群中是否存在与打包文件相对应的父目录，如果存在，执行步骤B2 ;如果不存在，则新.建父目录，执行步骤B2 ；  步骤B2:将打包文件分割成若干个分片文件；  步骤B3:在状态存储集群中的父目录中存储包括分片文件数目、每片分片文件的大小、末尾分片文件大小在内的分片信息；  步骤B4:根据父目录中存储的分片信息创建相应数量的子目录；  步骤B5:将各分片文件存入相应的子目录中。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="4" class="claim">
      <div class="claim-text">4.根据权利要求3所述一种自动分发、运行和更新可执行程序的方法，其特征在于，所述步骤C中工作节点从状态存储集群下载可执行程序的具体实现为:  步骤Cl:工作节点每隔心跳时间检查状态存储集群中与其相关的父目录的版本号及更新时间；  步骤C2:根据父目录的版本号是否更新且更新时间小于心跳时间，判断是否有新的可执行程序需要执行或原可执行程序需要更新，如果有则执行步骤C3 ;否则等待心跳时间，返回步骤Cl ；  步骤C3:所述工作节点根据父目录中存储的分片信息，将子目录中存储的分片文件拼接读取到工作节点的本地目录。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="5" class="claim">
      <div class="claim-text">5.根据权利要求4所述一种自动分发、运行和更新可执行程序的方法，其特征在于，客户端向状态存储集群上传分片文件前，要对父目录加写锁，上传完毕，解除对父目录的写锁；工作节点从状态存储集群下载可执行程序前，要对父目录加读锁，下载完毕后，解除对父目录的读锁。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="6" class="claim">
      <div class="claim-text">6.根据权利要求5所述一种自动分发、运行和更新可执行程序的方法，其特征在于，对父目录加读、写锁的具体实现为:  想获得锁的进程在父目录下创建临时节点，读锁的临时节点前缀设置为read+编号，写锁的前缀设置为write+编号；  创建读锁的时候，检查是否有编号小于自己的写锁存在，若存在则对编号刚好小于自己的写锁节点进行监听，直到监听的写锁被撤销，便可获得读锁；  创建写锁时，检查创建的临时节点编号是否为最小，如不是最小，则需要对编号刚好小于自己的读锁或写锁进行监听，直到监听的锁被撤销，便可获得写锁；  撤销读锁或写锁只需删除临时节点。</div>
    </div>
    </div> <div class="claim"> <div num="7" class="claim">
      <div class="claim-text">7.一种自动分发、运行和更新可执行程序的系统，其特征在于，包括客户端、状态存储集群和若干个工作节点；  所述客户端，其用于将可执行程序及相关文件所在目录打包成一个文件，存储在缓存中；并采用大文件分割及索引存储方法将缓存中的打包文件存储到状态存储集群的相应目录中；  所述状态存储集群，其用于以索引方式存储客户端上传的文件，还用于保存其客户端和各工作节点的工作状态及心跳信息；  所述工作节点，其用于每隔心跳时间到状态存储集群检测索引状态，当检测到有新的索引或已有索引有更新，按照索引方式将可执行程序下载到本地目录，下载完成时，启动工作进程执行可执行程序。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="8" class="claim">
      <div class="claim-text">8.根据权利要求7所述一种自动分发、运行和更新可执行程序的系统，其特征在于，所述工作节点执行单元用于每隔心跳时间检测本地目录中正在执行的可执行程序是否有更新，如果有则终止执行现有的可执行程序，重新执行更新的可执行程序。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="9" class="claim">
      <div class="claim-text">9.根据权利要求7所述一种自动分发、运行和更新可执行程序的系统，其特征在于，所述工作节点中包括监听单元和执行单元；  所述监听单元，其用于监听状态存储集群中是否有新上传的可执行程序，等到上传完成时，将可执行程序下载到本地程序目录；  所述执行单元，其用于每隔心跳时间检查本地目录中的可执行程序是否下载完成，等到可执行程序下载完成，则执行可执行程序；其还用于每隔心跳时间检查本地目录中正在执行的可执行程序的MD5值是否发生变化，如果发生变化则表面可执行程序有更新，终止执行现有的可执行程序，启动新线程执行更新的可执行程序。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="10" class="claim">
      <div class="claim-text">10.根据权利要求7所述一种自动分发、运行和更新可执行程序的系统，其特征在于，所述状态存储集群中包括若干个状态存储节点，且状态存储集群中部署有zookeeper开源软件。</div>
    </div>
  </div> </div>
  </div></div><div class="patent-section patent-description-section"><div class="patent-section-header"><span class="patent-section-title"> 说明</span></div><div class="patent-text"><div mxw-id="PDES64392916" lang="ZH" load-source="patent-office" class="description">
    <p>一种自动分发、运行和更新可执行程序的方法及系统</p>
    <p>技术领域</p>
    <p>[0001]	本发明涉及云计算领域，尤其涉及一种自动分发、运行和更新可执行程序的方法及系统。</p>
    <p>背景技术</p>
    <p>[0002]	近年来，一种新的数据密集型应用&#8212;&#8212;流动“大数据”处理已经得到了广泛的认同，这些应用的实例包括:网络监控、电信数据管理、Web应用、传感检测等等。在这种数据流模型中，数据以大量、快速、时变(可能是不可预知)的数据流形式持续到达，针对这种网络海量流动数据的实时处理需求，建立适合的平台是需要考虑的问题。</p>
    <p>[0003]	基于流水线处理的实时云计算是解决流数据处理的有效方法与手段，其关注的是海量数据流即时处理，是一种数据密集型计算平台。工业界和学术界开发了很多实时云平台。在国内，包括baidu下一代数据流系统DStream、淘宝Beatles实时流式数据分析平台等；在国外，包括斯坦福大学的STREAM、施乐公司的Tapestry、加州大学伯克利分校的Telegraph、布朗大学和麻省理工学院合作的Aurora、Apache的Hadoop Online、Twitter的Storm以及Yahoo的S4。这些系统从集中式演化到并行分布式，其主要目的就是为了提高数据流处理的性能，降低处理延迟。</p>
    <p>[0004]	目前，几乎所有实时云平台都采用类似hadoop map/reduce函数式/接口式编程模型为用户提供编程接口，用户可以在接口中完成自己的业务函数，定义处理流程及Job信息，并提交Job程序到集群中，并分发程序给每个工作节点运行。</p>
    <p>[0005]	然而，这种方式存在以下一些问题:</p>
    <p>[0006]	1、函数式/接口式编程模型看似逻辑松散，灵活度高，但实则用户依然需要按照接口编程，使用平台提供的方法，当面对一些特殊业务时，平台提供的接口与方法并不能满足实际需求。</p>
    <p>[0007]	2、在线更新业务或算法代价过高。将所有处理流程中的函数打包成Jar文件或动态库文件的形式，并作为Job提交。在这种模式下，哪怕是只对一个节点中的一个算法的细微改动，也需要将整个集群中的Job杀死、修改算法、重新打包、重新提交Job。</p>
    <p>[0008]	因此，我们需要一种可以摆脱函数式编程束缚、实现可执行程序分布式提交运行的方法；并能够提供在线更新某个指定业务程序，而非重新提交整个Job的方法。</p>
    <p>发明内容</p>
    <p>[0009]	本发明所要解决的技术问题是针对现有技术的不足，提供一种自动分发、运行和更新可执行程序的方法及系统，本发明具有良好的鲁棒性及运行效率。</p>
    <p>[0010]	本发明解决上述技术问题的技术方案如下:一种自动分发、运行和更新可执行程序的方法，包括如下步骤:</p>
    <p>[0011]	步骤A:客户端将可执行程序及相关文件所在目录打包成一个文件，并存储在缓存中；[0012]	步骤B:客户端采用大文件分割及索引存储方法将缓存中的打包文件存储到状态存储集群的相应目录中；</p>
    <p>[0013]	步骤C:工作节点每隔心跳时间到状态存储集群中与其相关的目录中检测索引状态，当检测到有新的索引或已有索引有更新，按照索引方式将可执行程序下载到本地目录;</p>
    <p>[0014]	步骤D:工作节点每隔心跳时间到状态存储集群中与其相关的目录中获取包括程序名、程序地址的程序相关信息；</p>
    <p>[0015]	步骤E:工作节点根据程序相关信息，每隔心跳时间到本地目录检测可执行程序的下载状态，直到检测到可执行程序下载完成时，执行可执行程序。</p>
    <p>[0016]	本发明的有益效果是:</p>
    <p>[0017]	1.可执行程序自动分发、运行</p>
    <p>[0018]	通过将可执行程序上传到状态存储集群中，各工作节点定时检查状态存储集群中的父目录的状态，并下载可执行程序，进而执行可执行程序，实现可执行程序的自动分发；</p>
    <p>[0019]	2.可执行程序运行时自动更新</p>
    <p>[0020]	工作节点通过检查状态存储集群中父目录的版本号及更新时间，完成可执行程序的版本控制，且工作节点执行单元定期检查本地目录中正在执行的可执行程序的MD5值，如果MD5值发送变化，则终止现有可执行程序的执行，执行最新版本的可执行程序，这样便摆脱了更新程序时需要重新提交Job的束缚；</p>
    <p>[0021]	3.灵活性与稳定性增加</p>
    <p>[0022]	在传统函数式云计算编程模型基础上，增加可执行程序执行模式，使得灵活性大大增加；且通过状态存储集群读写锁与大文件读写增强系统鲁棒性。</p>
    <p>[0023]	4.业务程序崩溃自动重启</p>
    <p>[0024]	本发明的运行控制方式使得当线程中业务程序运行崩溃后，可自动重启业务程序，保证了平台及业务的鲁棒性。</p>
    <p>[0025]	在上述技术方案的基础上，本发明还可以做如下改进。</p>
    <p>[0026]	进一步，上述技术方案还包括:</p>
    <p>[0027]	步骤F:工作节点每隔心跳时间检查本地目录中正在执行的可执行程序；</p>
    <p>[0028]	步骤G:计算可执行程序的MD5值，当发现可执行程序的MD5值发生变化时则终止对原可执行程序的执行，重新执行更新的可执行程序。</p>
    <p>[0029]	采用上述进一步方案的有益效果是:业务程序运行时自动更新，本发明采用心跳检查程序的MD5值，当发现程序的MD5值改变时，更新程序并重新执行，实现可执行程序随时更新随时自动运行功能；而程序更新也支持简单的替换操作，无需重新提交整个Job，不仅效率大大提高，且流处理业务连续运行得到保持。</p>
    <p>[0030]	进一步，所述步骤B中客户端采用大文件分割及索引存储方法将缓存中的打包文件存储到状态存储集群的具体实现为:</p>
    <p>[0031]	步骤B1:判断状态存储集群中是否存在与打包文件相对应的父目录，如果存在，执行步骤B2 ;如果不存在，则新建父目录，执行步骤B2 ；</p>
    <p>[0032]	步骤B2:将打包件分割成若干个分片文件；</p>
    <p>[0033]	步骤B3:在状态存储集群中的父目录中存储包括分片文件数目、每片分片文件的大小、末尾分片文件大小在内的分片信息；</p>
    <p>[0034]	步骤B4:根据父目录中存储的分片信息创建相应数量的子目录；</p>
    <p>[0035]	步骤B5:将各分片文件存入相应的子目录中。</p>
    <p>[0036]	采用上述进一步方案的有益效果是:大文件存储服务，本发明实现了大文件分割索引存储方式，解决了状态存储集群中存储大文件超时、同步困难甚至导致状态存储集群崩溃的问题。</p>
    <p>[0037]	进一步，所述步骤C中工作节点从状态存储集群下载可执行程序的具体实现为:</p>
    <p>[0038]	步骤Cl:工作节点每隔心跳时间检查状态存储集群中父目录的版本号及更新时间；</p>
    <p>[0039]	步骤C2:根据父目录的版本号是否更新且更新时间小于心跳时间，判断是否有新的可执行程序需要执行或原可执行程序需要更新，如果有则执行步骤C3 ;否则等待心跳时间，返回步骤Cl ；</p>
    <p>[0040]	步骤C3:所述工作节点根据父目录中存储的分片信息，将子目录中存储的分片文件拼接读取到工作节点的本地目录。</p>
    <p>[0041]	采用上述进一步方案的有益效果是:采用心跳检查状态存储集群中父目录的版本号及更新时间，当父目录的版本号更新且更新时间小于心跳时间时，将该父目录相应子目录中的文件读取到工作节点，实现业务程序随时更新；而程序更新也支持简单的替换操作，无需重新提交整个Job，不仅效率大大提高，且流处理业务连续运行得到保持。</p>
    <p>[0042]	进一步，客户端向状态存储集群上传分片文件前，要对父目录加写锁，上传完毕，解除对父目录的写锁；工作节点从状态存储集群下载可执行程序前，要对父目录加读锁，下载完毕后，解除对父目录的读锁。</p>
    <p>[0043]	进一步，对父目录加读、写锁的具体实现为:</p>
    <p>[0044]	想获得锁的进程在父目录下创建临时节点，读锁的临时节点前缀设置为read+编号，写锁的前缀设置为write+编号；</p>
    <p>[0045]	创建读锁的时候，检查是否有编号小于自己的写锁存在，若存在则对编号刚好小于自己的写锁节点进行监听，直到监听的写锁被撤销，便可获得读锁；</p>
    <p>[0046]	创建写锁时，检查创建的临时节点编号是否为最小，如不是最小，则需要对编号刚好小于自己的读锁或写锁进行监听，直到监听的锁被撤销，便可获得写锁；</p>
    <p>[0047]	撤销读锁或写锁只需删除临时节点。</p>
    <p>[0048]	采用上述进一步方案的有益效果是:分布式读写锁服务，采用分别建立父目录的读临时节点与写临时节点，并监听前序节点动作的方式，实现读锁与写锁，相比于状态存储集群中提供的互斥锁方法效率更高，安全性更好。</p>
    <p>[0049]	本发明解决上述技术问题的另一技术方案如下:一种自动分发、运行和更新可执行程序的系统，包括客户端、状态存储集群和若干个工作节点；</p>
    <p>[0050]	所述客户端，其用于将可执行程序及相关文件所在目录打包成一个文件，存储在缓存中；并采用大文件分割及索引存储方法将缓存中的打包文件存储到状态存储集群；</p>
    <p>[0051]	所述状态存储集群，其用于以索引方式存储客户端上传的文件，还用于保存其客户端和各工作节点的工作状态及心跳信息；</p>
    <p>[0052]	所述工作节点，其用于每隔心跳时间到状态存储集群检测索引状态，当检测到有新的索引或已有索引有更新，按照索引方式将可执行程序下载到本地目录，下载完成时，启动工作进程执行可执行程序。</p>
    <p>[0053]	本发明的有益效果是:</p>
    <p>[0054]	1.业务逻辑实现灵活</p>
    <p>[0055]	本发明采用传统函数式编程模型接口与可执行程序编程接口相结合的方式，使实时云平台对于业务的局限性大大降低，业务逻辑的实现方式更加灵活。使用户只需关心业务逻辑层面，使平台更加透明化。</p>
    <p>[0056]	2.分布式读写锁服务</p>
    <p>[0057]	本发明采用分别建立服目录的读临时节点与写临时节点，并监听前序节点动作的方式，实现读锁与写锁，相比于Zook^per中提供的互斥锁方法效率更高，安全性更好。</p>
    <p>[0058]	3.大文件存储服务</p>
    <p>[0059]	本发明实现了索引一一分割存储大文件的方法，解决了 Zookeeper中存储大文件超时、同步困难甚至导致Zookeeper崩溃的问题。</p>
    <p>[0060]	4.业务程序运行时更新</p>
    <p>[0061]	本发明采用心跳检查程序更新时间、版本号、MD5值等策略，实现业务程序随时更新随时自动运行功能；而程序更新也支持简单的替换操作，无需重新提交整个Job，不仅效率大大提高，且流处理业务连续运行得到保持。</p>
    <p>[0062]	在上述技术方案的基 础上，本发明还可以做如下改进。</p>
    <p>[0063]	进一步，所述工作节点执行单元还用于每隔心跳时间检测本地目录中正在执行的可执行程序是否有更新，如果有则终止执行现有的可执行程序，重新执行更新的可执行程序。</p>
    <p>[0064]	进一步，所述工作节点中包括监听单元和执行单元；</p>
    <p>[0065]	所述监听单元，其用于监听状态存储集群中是否有新上传的可执行程序，等到上传完成时，将可执行程序下载到本地程序目录；</p>
    <p>[0066]	所述执行单元，其用于每隔心跳时间检查本地目录中的可执行程序是否下载完成，等到可执行程序下载完成，则执行可执行程序；其还用于每隔心跳时间检查本地目录中正在执行的可执行程序的MD5值是否发生变化，如果发生变化则表面可执行程序有更新，终止执行现有的可执行程序，启动新线程执行更新的可执行程序。</p>
    <p>[0067]	进一步，所述状态存储集群中包括若干个状态存储节点，且状态存储集群中部署有zookeeper开源软件。</p>
    <p>附图说明</p>
    <p>[0068]	图1为本发明所述一种自动分发、运行和更新可执行程序的系统结构图；</p>
    <p>[0069]	图2为本发明所述一种自动分发、运行和更新可执行程序的方法流程图；</p>
    <p>[0070]	图3为本发明所述客户端的工作流程图；</p>
    <p>[0071]	图4为本发明所述工作节点中监听单元工作流程图；</p>
    <p>[0072]	图5为本发明所述工作节点中执行单元的工作流程图。</p>
    <p>[0073]	附图中，各标号所代表的部件列表如下:</p>
    <p>[0074]	1、客户端，2、状态存储集群，3、工作节点。具体实施方式</p>
    <p>[0075]	以下结合附图对本发明的原理和特征进行描述，所举实例只用于解释本发明，并非用于限定本发明的范围。</p>
    <p>[0076]	数据源Spring:&#8212;个Spring是一个流数据接收单元程序,它从外部数据源读取流数据并且把它们发射到Job中</p>
    <p>[0077]	Processer:一个Processer是一个流数据处理单元程序,它接收Spring或者其他Processer发射的一个或者多个Streams,输出零个或者多个Streams</p>
    <p>[0078]	Job: &#8212;个流处理的应用封装为一个Job。一个Job是一个由数据源Spring和Processor通过流分组形成的有向无环图，Job是一次流处理计算工作的总称,包括指定业务程序和申请资源(机器数、工作进程数、业务程序执行的并行度)等信息而提交job的过程，不仅包括将上述内容提交到zookeeper中,还包括任务调度的计算，即计算某worker执行哪个程序，这个程序执行结果发送到哪个下游的程序中而当可执行程序更新时，只需要简单的提交新的可执行程序目录，或者在工作节点直接覆盖旧的程序，无需kill掉Job、回收计算资源并重新提交Job。</p>
    <p>[0079]	Client:客户端程序。主要负责向系统提交客户指令，例如，提交Job、删除Job、申请工作节点等指令。</p>
    <p>[0080]	Zookeeper:是Google的Chubby的开源实现，针对大型分布式系统的可靠协调系统，提供的功能包括:配置维护、名字服务、分布式同步、组服务等。在本系统中作为高可用性状态存储模块使用，保存其他各模块的工作状态及心跳信息。</p>
    <p>[0081]	Supervisor:工作节点运行的后台程序。主要负责监听分配给工作节点的工作进程，根据需要启动/关闭工作进程，并监听zookeeper上存储可执行程序的节点是否有新的可执行程序或更新已存在的可执行程序，如果有则下载到本地程序目录。</p>
    <p>[0082]	Worker:执行Job的工作进程。一个工作进程属于一个指定的Job,可以在Job中的每个组件(Spring或者Processor)上运行多个Task，负责执行本体程序目录中的可执行程序。</p>
    <p>[0083]	Task:由一个工作进程(Worker)产生的一个线程，执行数据处理的程序。</p>
    <p>[0084]	Scheduler:(客户端中的任务分配模块)当Worker足够时，所有Task被均&#21243;的分配到所有机器的Worker ;当Worker不足时，所有的Task分配到仅有的Worker。</p>
    <p>[0085]	Heartbeat心跳信息:各模块定期向Zookeeper发送心跳信息,其中包括当前时间各模块的工作状态信息。Master读取Zookeeper中的心跳信息判断各模块、各节点运行状态，并执行相应动作。</p>
    <p>[0086]	如图1所示，一种自动分发、运行和更新可执行程序的系统，包括客户端1、状态存储集群2和若干个工作节点3 ；</p>
    <p>[0087]	所述客户端I，其用于将可执行程序及相关文件所在目录打包成一个文件，存储在缓存中；并采用大文件分割及索引存储方法将缓存中的打包文件存储到状态存储集群2的相应目录中；</p>
    <p>[0088]	所述状态存储集群2，其用于以索引方式存储客户端上传的文件，还用于保存其客户端和各工作节点的工作状态及心跳信息；[0089]	所述工作节点3，其用于每隔心跳时间到状态存储集群与其相关的目录中检测索引状态，当检测到有新的索引或已有索引有更新，按照索引方式将可执行程序下载到本地目录，下载完成时，执行可执行程序。</p>
    <p>[0090]	其中，所述工作节点3中的工作节点执行单元还用于每隔心跳时间检测本地目录中正在执行的可执行程序是否有更新，如果有则终止执行现有的可执行程序，重新执行更新的可执行程序。</p>
    <p>[0091]	其中，所述工作节点中包括监听单元和执行单元；</p>
    <p>[0092]	所述监听单元，其用于监听状态存储集群中是否有客户端新上传的可执行程序，等到上传完成时，将可执行程序下载到本地程序目录；</p>
    <p>[0093]	所述执行单元，其用于每隔心跳时间检查本地目录中的可执行程序是否下载完成，等到可执行程序下载完成，则执行可执行程序；其还用于每隔心跳时间检查本地目录中正在执行的可执行程序的MD5值是否发生变化，如果发生变化则表面可执行程序有更新，终止执行现有的可执行程序，启动新线程执行更新的可执行程序。</p>
    <p>[0094]	其中，所述状态存储集群的状态存储功能采用Zookeeper实现。</p>
    <p>[0095]	如图2所示，一种自动分发、运行和更新可执行程序的方法，包括如下步骤:</p>
    <p>[0096]	步骤A:客户端将可执行程序及相关文件所在目录打包成一个文件，并存储在缓存中；</p>
    <p>[0097]	步骤B:客户端采用大文件分割及索引存储方法将缓存中的打包文件存储到状态存储集群的相应目录中；</p>
    <p>[0098]	步骤C:工作节点每隔心跳时间到状态存储集群中与其相关的目录检测索引状态，当检测到有新的索引或已有索引有更新，按照索引方式将可执行程序下载到本地目录;</p>
    <p>[0099]	步骤D:工作节点每个心跳时间到状态存储集群中与其相关的目录获取包括程序名、程序地址的程序相关信息；</p>
    <p>[0100]	步骤E:工作节点根据程序相关信息，每隔心跳时间到本地目录检测可执行程序的下载状态，直到检测到可执行程序下载完成时，启动工作进程执行可执行程序。</p>
    <p>[0101]	上述技术方案还包括:</p>
    <p>[0102]	步骤F:工作节点执行单元每隔心跳时间检查本地目录中正在执行的可执行程序;</p>
    <p>[0103]	步骤G:计算可执行程序的MD5值，当发现可执行程序的MD5值发生变化时则终止对原可执行程序的执行，启动新线程执行更新的可执行程序。</p>
    <p>[0104]	如图3所示，所述步骤B中客户端采用大文件分割及索引存储方法将缓存中的打包文件存储到状态存储集群的具体实现为:</p>
    <p>[0105]	步骤B1:判断状态存储集群中是否存在与打包文件相对应的父目录，如果存在，执行步骤B2 ;如果不存在，则新建父目录，执行步骤B2 ；</p>
    <p>[0106]	步骤B2:将打包件分割成若干个分片文件；</p>
    <p>[0107]	步骤B3:在状态存储集群中的父目录中存储包括分片文件数目、每片分片文件的大小、末尾分片文件大小在内的分片信息；</p>
    <p>[0108]	步骤B4:根据父目录中存储的分片信息创建相应数量的子目录；[0109]	步骤B5:将各分片文件存入相应的子目录中。</p>
    <p>[0110]	如图4所示，所述步骤C中工作节点从状态存储集群下载可执行程序的具体实现为(该过程是工作节点中的监听单元实现的):</p>
    <p>[0111]	步骤Cl:工作节点每隔心跳时间检查状态存储集群中父目录的版本号及更新时间； [0112]	步骤C2:根据父目录的版本号是否更新且更新时间小于心跳时间，判断是否有新的可执行程序需要执行或原可执行程序需要更新，如果有则执行步骤C3 ;否则等待心跳时间，返回步骤Cl ；</p>
    <p>[0113]	步骤C3:所述工作节点根据父目录中存储的分片信息，将子目录中存储的分片文件拼接读取到工作节点的本地目录。</p>
    <p>[0114]	其中，客户端向状态存储集群上传分片文件前，要对父目录加写锁，上传完毕，解除对父目录的写锁；工作节点从状态存储集群下载可执行程序前，要对父目录加读锁，下载完毕后，解除对父目录的读锁。</p>
    <p>[0115]	对父目录加读、写锁的具体实现为:想获得锁的进程在父目录下创建临时节点，读锁的临时节点前缀设置为read+编号，写锁的前缀设置为write+编号；创建读锁的时候，检查是否有编号小于自己的写锁存在，若存在则对编号刚好小于自己的写锁节点进行监听，直到监听的写锁被撤销，便可获得读锁；创建写锁时，检查创建的临时节点编号是否为最小，如不是最小，则需要对编号刚好小于自己的读锁或写锁进行监听，直到监听的锁被撤销，便可获得写锁；撤销读锁或写锁只需删除临时节点。</p>
    <p>[0116]	如图5所示，工作节点中执行单元的工作流程如下:</p>
    <p>[0117]	步骤Dl:执行单元定期从状态存储集群获取Task信息(包括程序名、程序地址、并行度和下级流水等信息);</p>
    <p>[0118]	步骤D2:查看Task信息状态，存在三种情况，情况一，有新可执行程序，执行步骤D3，有正在执行的可执行程序，执行步骤D4，无新可执行程序也无正在执行的可执行程序，执行D5 ；</p>
    <p>[0119]	D3:则检查本地目录，判断可执行程序是否下载完成，如果下载完成则执行可执行程序；否则等待，直至下载完成，执行可执行程序；</p>
    <p>[0120]	D4:检查正在执行的程序的MD5值，判断MD5值是否发生改变，如果改变，退出当前任务线程，启动新任务线程执行新可执行程序；如果未改变则等待心跳时间，返回步骤Dl ；</p>
    <p>[0121]	D5:等待心跳时间，返回步骤D1。</p>
    <p>[0122]	本实施例中，使用三台服务器作为状态存储集群(通过Zookeeper实现)，负责全局状态存储并负责与其他模块通信；使用五台服务器作为工作节点，其中监听单元(Supervisor),负责监控及控制执行单元(Worker)的进程工作；使用一台服务器作为客户端(Client)，负责向集群发布命令、提交Job及可执行程序等；并使用千兆网卡与交换机提供集群网络通信。</p>
    <p>[0123]	本发明通过客户端(Client)配置Job信息，使得五台工作节点中每个执行单元(Worker)进程中运行一个Task线程，Task线程中的程序为简单的控制台循环输出“helloworld! ”，观察每个节点程序运行情况，验证可执行程序自动分发方法，具体运行流程如下:[0124](一)自动分发、运行可执行程序</p>
    <p>[0125]	1.用户通过客户端(Client)配置Job信息，其中包括所需计算资源数目(Worker数)、程序执行并行度、程序间逻辑拓扑、程序所在目录等，并通过接口命令提交。</p>
    <p>[0126]	2.客户端(Client)分析Job信息,得到Worker、Task、程序等所在状态存储集群(Zookeeper)中的地址,将结果对应上传到状态存储集群(Zookeeper)中。</p>
    <p>[0127]	由于可执行程序及其相关文件可能较大，状态存储集群(Zookwper)中单个父目录无法满足存储要求，因此需将可执行程序及其相关文件分片存储。首先，建立父目录；然后，父目录加写锁，并将大文件分片的索引信息存入父目录；最后，将分片内容存储到子目录中，接触父目录的写锁。[0128]	3.工作节点的监听单元(Supervisor)将状态存储集群(Zookeeper)中的可执行程序下载到本地，具体为:</p>
    <p>[0129]	监听单元(Supervisor)定时检查状态存储集群(Zookeeper)中父目录,发现程序上传成功后，将程序下载到本地。</p>
    <p>[0130]	下载时，先给父目录加读锁，再根据父目录中索引信息将子目录中数据拼接完整，存储到本地目录中，接触父目录的读锁。</p>
    <p>[0131]	4.工作节点的执行单元(Worker)执行下载到本地的程序，具体为:</p>
    <p>[0132]	执行单元(Worker)首先接收到Task执行信息，检查本地程序目录，如此时程序还没有下载完成，则等待心跳时间后循环检查，直到程序下载完成，启动Task线程执行下载的可执行程序。</p>
    <p>[0133]	(二)自动更新可执行程序</p>
    <p>[0134]	1.将可执行程序改为循环输出“HELLO WORLD! ”，并不对Job做修改，只是将更新过的程序和程序目录打包上传到状态存储集群(Zookeeper)中(上传方法与提交Job时相同)，通过客户端(Client)接口替换状态存储集群(Zookeeper)中的原程序,或直接复制替换某台工作节点中下载的本地程序，观察各工作节点输出变化，验证程序运行时更新及更新无需重新提交Job的方法。</p>
    <p>[0135]	2.监听单元(Supervisor)自动下载更新的程序,监听单元(Supervisor)定期检查状态存储集群(Zookeeper)中父目录，当发现父目录版本号及更新时间发生改变时，删除本地原始程序，更新为新版本程序(下载方法与第一次下载时相同)。</p>
    <p>[0136]	3.执行单元(Worker)自动执行更新的程序，执行单元(Worker)循环检查本地目录可执行程序，通过检查程序MD5值的变化,发现监听单元(Supervisor)下载的更新的程序，原Task线程退出，并启动新Task线程执行更新的程序。</p>
    <p>[0137]	4.也可手动替换本地目录中可执行程序，通过手动复制替换的方法，将某台工作节点的本地目录中的可执行程序更新为新的可执行程序。</p>
    <p>[0138]	执行单元(Worker)自动执行手动更新的程序，执行单元(Worker)循环检查本地目录可执行程序，通过检查程序MD5值变化，发现监听单元(Supervisor)下载的更新的程序，原Task线程退出，并启动新Task线程执行更新的程序。</p>
    <p>[0139]	运行结果如下:</p>
    <p>[0140]	第一次客户端提交Job后,各Supervisor控制台打印“hello world!”，响应时间为1.75秒；[0141]	第二次客户端更新可执行程序后，各Supervisor控制台打印“HELLO WORLD! ”，响应时间为1.33秒；</p>
    <p>[0142]	第三次手动更新某Supervisor可执行程序后，其控制台打印“HELLO WORLD!”，响应时间为0.76秒，其他Supervisor运行情况不变。</p>
    <p>[0143]	以上所述仅为本发明的较佳实施例，并不用以限制本发明，凡在本发明的精神和原则之内，所作的任何修改、等同替换、改进等，均应包含在本发明的保护范围之内。</p>
  </div>
  </div></div><div class="patent-section patent-tabular-section"><a id="backward-citations"></a><div class="patent-section-header"><span class="patent-section-title">专利引用</span></div><table class="patent-data-table"><thead class="patent-data-table-thead"><tr class="patent-data-table"><th class="patent-data-table-th">引用的专利</th><th class="patent-data-table-th"> 申请日期</th><th class="patent-data-table-th">公开日</th><th class="patent-data-table-th"> 申请人</th><th class="patent-data-table-th">专利名</th></tr></thead><tr><td class="patent-data-table-td citation-patent"><a href="/patents/CN101615175A?cl=zh">CN101615175A</a><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td patent-date-value">2009年8月11日</td><td class="patent-data-table-td patent-date-value">2009年12月30日</td><td class="patent-data-table-td ">深圳市五巨科技有限公司</td><td class="patent-data-table-td ">一种读取移动终端电子书的系统和方法</td></tr><tr><td class="patent-data-table-td citation-patent"><a href="/patents/CN101719073A?cl=zh">CN101719073A</a><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td patent-date-value">2009年11月20日</td><td class="patent-data-table-td patent-date-value">2010年6月2日</td><td class="patent-data-table-td ">浪潮集团山东通用软件有限公司</td><td class="patent-data-table-td ">一种基于智能客户端的按需下载实现方法</td></tr><tr><td class="patent-data-table-td citation-patent"><a href="/patents/US20060179059">US20060179059</a><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td patent-date-value">2005年2月7日</td><td class="patent-data-table-td patent-date-value">2006年8月10日</td><td class="patent-data-table-td ">International Business Machines Corporation</td><td class="patent-data-table-td ">Cluster monitoring system with content-based event routing</td></tr></table><div class="patent-section-footer">* 由审查员引用</div></div><div class="patent-section patent-tabular-section"><a id="npl-citations"></a><div class="patent-section-header"><span class="patent-section-title">非专利引用</span></div><table class="patent-data-table"><thead class="patent-data-table-thead"><tr class="patent-data-table"><th colspan="3"class="patent-data-table-th">参考文献</th></tr></thead><tr><td class="patent-data-table-td ">1</td><td class="patent-data-table-td "><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td ">刘钊: "<a href='http://scholar.google.com/scholar?q="%E3%80%8A%E4%BA%91%E5%90%8C%E6%AD%A5%E4%B8%AD%E6%96%87%E4%BB%B6%E5%88%86%E5%89%B2%E7%AE%97%E6%B3%95%E7%9A%84%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%AE%9E%E7%8E%B0%E3%80%8B"'>《云同步中文件分割算法的研究与实现》</a>", 《中国优秀硕士学位论文全文数据库信息科技辑》, no. 201301, 15 January 2013 (2013-01-15)</td></tr></table><div class="patent-section-footer">* 由审查员引用</div></div><div class="patent-section patent-tabular-section"><a id="classifications"></a><div class="patent-section-header"><span class="patent-section-title">分类</span></div><table class="patent-data-table"><thead class="patent-data-table-thead"><tr class="patent-data-table"><th class="patent-data-table-th"> </th><th class="patent-data-table-th"> </th></tr></thead><tr><td class="patent-data-table-td ">国际分类号</td><td class="patent-data-table-td "><span class="nested-value"><a href="https://www.google.com/url?id=KwHpCAABERAJ&amp;q=http://web2.wipo.int/ipcpub/&amp;usg=AFQjCNER44F5jlVoswCkvW3YEcB5lW4moA#refresh=page&amp;notion=scheme&amp;version=20130101&amp;symbol=G06F0009445000">G06F9/445</a></span>, <span class="nested-value"><a href="https://www.google.com/url?id=KwHpCAABERAJ&amp;q=http://web2.wipo.int/ipcpub/&amp;usg=AFQjCNER44F5jlVoswCkvW3YEcB5lW4moA#refresh=page&amp;notion=scheme&amp;version=20130101&amp;symbol=G06F0017300000">G06F17/30</a></span></td></tr></table><div class="patent-section-footer"></div></div><div class="patent-section patent-tabular-section"><a id="legal-events"></a><div class="patent-section-header"><span class="patent-section-title">法律事件</span></div><table class="patent-data-table"><thead class="patent-data-table-thead"><tr class="patent-data-table"><th class="patent-data-table-th"> 日期</th><th class="patent-data-table-th">代码</th><th class="patent-data-table-th">事件</th><th class="patent-data-table-th">说明</th></tr></thead><tr><td class="patent-data-table-td patent-date-value">2013年12月25日</td><td class="patent-data-table-td ">C06</td><td class="patent-data-table-td ">Publication</td><td class="patent-data-table-td "></td></tr><tr><td class="patent-data-table-td patent-date-value">2014年1月22日</td><td class="patent-data-table-td ">C10</td><td class="patent-data-table-td ">Entry into substantive examination</td><td class="patent-data-table-td "></td></tr></table><div class="patent-section-footer"></div></div><div class="modal-dialog" id="patent-images-lightbox"><div class="patent-lightbox-controls"><div class="patent-lightbox-rotate-controls"><div class="patent-lightbox-rotation-text">旋转</div><div class="rotate-icon rotate-ccw-icon"></div><div class="rotate-icon rotate-cw-icon"></div></div><div class="patent-lightbox-index-counter"></div><a class="patent-lightbox-fullsize-link" target="_blank">原始图片</a><div class="patent-drawings-control patent-drawings-next"><img class="patent-drawings-button-img"src="/googlebooks/images/kennedy/page_right.png" alt="Next page"width="21" height="21" /></div><div class="patent-drawings-control patent-drawings-prev"><img class="patent-drawings-button-img"src="/googlebooks/images/kennedy/page_left.png" alt="Previous page"width="21" height="21" /></div></div><div class="modal-dialog-content"><div class="patent-lightbox-image-holder"><div class="patent-lightbox-placeholder"></div></div></div></div><script>_OC_initPatentsAtb({image_not_available_html: " 未提供图片。\x3ca href\x3d//docs.google.com/viewer?url\x3dpatentimages.storage.googleapis.com/pdfs/06138b3109b0c4586ae3/CN103473287A.pdf\x3e查看 PDF\x3c/a\x3e"});</script></div></div></div></div></div><script>(function() {var href = window.location.href;if (href.indexOf('?') !== -1) {var parameters = href.split('?')[1].split('&');for (var i = 0; i < parameters.length; i++) {var param = parameters[i].split('=');if (param[0] == 'focus') {var elem = document.getElementById(param[1]);if (elem) {elem.focus();}}}}})();</script><script>_OC_addFlags({LockSrc:"/books/javascript/lock_50a6672b5f82ffbd39b7a9e87fd4594c.js", Host:"https://www.google.com/", IsBooksRentalEnabled:1, IsBrowsingHistoryEnabled:1, IsWebReaderSvgEnabled:0, IsImageModeNotesEnabled:1, IsOfflineBubbleEnabled:1, IsFutureOnSaleVolumesEnabled:1, IsBooksUnifiedLeftNavEnabled:1, IsMobileRequest:0, IsZipitFolderCollectionEnabled:1, IsAdsDisabled:0, IsEmbeddedMediaEnabled:1, IsImageModeAnnotationsEnabled:1, IsMyLibraryGooglePlusEnabled:1, IsImagePageProviderEnabled:1, IsBookcardListPriceSmall:0, IsInternalUser:0, IsBooksShareButtonEnabled:0, IsDisabledRandomBookshelves:0});_OC_Run({"enable_p13n":false,"is_cobrand":false,"sign_in_url":"https://www.google.com/accounts/Login?service=\u0026continue=https://www.google.com/patents%3Fcl%3Dzh%26hl%3Dzh-CN\u0026hl=zh-CN"}, {"volume_id":"","is_ebook":true,"volumeresult":{"has_flowing_text":false,"has_scanned_text":true,"can_download_pdf":false,"can_download_epub":false,"is_pdf_drm_enabled":false,"is_epub_drm_enabled":false,"download_pdf_url":"https://www.google.com/patents/download/%E4%B8%80%E7%A7%8D%E8%87%AA%E5%8A%A8%E5%88%86%E5%8F%91_%E8%BF%90%E8%A1%8C%E5%92%8C%E6%9B%B4%E6%96%B0%E5%8F%AF%E6%89%A7.pdf?id=KwHpCAABERAJ\u0026hl=zh-CN\u0026output=pdf\u0026sig=ACfU3U17NOcwRKwfwJgyc5L-HMElcSrD0g"},"sample_url":"https://www.google.com/patents/reader?id=KwHpCAABERAJ\u0026hl=zh-CN\u0026printsec=frontcover\u0026output=reader\u0026source=gbs_atb_hover","is_browsable":true,"is_public_domain":true}, {});</script><div id="footer_table" style="font-size:83%;text-align:center;position:relative;top:20px;height:4.5em;margin-top:2em"><div style="margin-bottom:8px"><a href="https://www.google.com/search?hl=zh-CN"><nobr>Google&nbsp;首页</nobr></a> - <a href="//www.google.com/patents/sitemap/"><nobr>站点地图</nobr></a> - <a href="http://www.google.com/googlebooks/uspto.html"><nobr>美国专利商标局 (USPTO) 专利信息批量下载</nobr></a> - <a href="/intl/zh-CN/privacy/"><nobr>隐私权政策</nobr></a> - <a href="/intl/zh-CN/policies/terms/"><nobr>服务条款</nobr></a> - <a href="https://support.google.com/faqs/answer/2539193?hl=zh-CN"><nobr> 关于 Google 专利</nobr></a> - <a href="//www.google.com/tools/feedback/intl/zh-CN/error.html" onclick="try{_OC_startFeedback({productId: '72792',locale: 'zh-CN'});return false;}catch(e){}"><nobr>发送反馈</nobr></a></div></div> <script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script><script type="text/javascript">var pageTracker = _gat._getTracker("UA-27188110-1");pageTracker._setCookiePath("/patents/");pageTracker._trackPageview();</script> </body></html>