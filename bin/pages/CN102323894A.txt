<!DOCTYPE html><html><head><title>专利 CN102323894A - 企业分布式应用间实现非阻塞方式相互调用的系统及方法 -  Google 专利</title><script>(function(){(function(){function e(a){this.t={};this.tick=function(a,c,b){var d=void 0!=b?b:(new Date).getTime();this.t[a]=[d,c];if(void 0==b)try{window.console.timeStamp("CSI/"+a)}catch(e){}};this.tick("start",null,a)}var a;window.performance&&(a=window.performance.timing);var f=a?new e(a.responseStart):new e;window.jstiming={Timer:e,load:f};if(a){var c=a.navigationStart,d=a.responseStart;0<c&&d>=c&&(window.jstiming.srt=d-c)}if(a){var b=window.jstiming.load;0<c&&d>=c&&(b.tick("_wtsrt",void 0,c),b.tick("wtsrt_",
"_wtsrt",d),b.tick("tbsd_","wtsrt_"))}try{a=null,window.chrome&&window.chrome.csi&&(a=Math.floor(window.chrome.csi().pageT),b&&0<c&&(b.tick("_tbnd",void 0,window.chrome.csi().startE),b.tick("tbnd_","_tbnd",c))),null==a&&window.gtbExternal&&(a=window.gtbExternal.pageT()),null==a&&window.external&&(a=window.external.pageT,b&&0<c&&(b.tick("_tbnd",void 0,window.external.startE),b.tick("tbnd_","_tbnd",c))),a&&(window.jstiming.pt=a)}catch(g){}})();})();
</script><link rel="stylesheet" href="/patents/css/_5115ea495017d9115e613207d3810e5a/kl_intl_patents_bundle.css" type="text/css" /><script src="/books/javascript/atb_5115ea495017d9115e613207d3810e5a__zh_cn.js"></script><script>function googleTranslateElementInit() {new google.translate.TranslateElement({pageLanguage: "zh",gaTrack: true,gaId: "UA-27188110-1",multilanguagePage: true});}</script><script src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script><meta name="DC.type" content="Patent"><meta name="DC.title" content="企业分布式应用间实现非阻塞方式相互调用的系统及方法"><meta name="DC.contributor" content="王文斌" scheme="inventor"><meta name="DC.contributor" content="上海普元信息技术股份有限公司" scheme="assignee"><meta name="DC.date" content="2011-9-8" scheme="dateSubmitted"><meta name="DC.description" content="本发明涉及一种企业分布式应用间实现非阻塞方式相互调用的系统，其包括用以进行基于java.nio数据包的数据读写操作的NIO读写模块、连接NIO读写模块的线程池管理模块和数据打解包模块、连接NIO读写模块并连接外部系统的请求处理模块，以及连接线程池管理模块和数据打解包模块的响应回调管理模块。本发明还涉及一种企业分布式应用间实现非阻塞方式相互调用的方法。采用了该发明的企业分布式应用间实现非阻塞方式相互调用的系统及方法，由于其包括NIO读写模块、线程池管理、数据打解包、请求处理、响应回调管理操作五个核心部分，其可通过有效地保护系统资源，实现不受外部因素的干扰，从而保证当前系统自身的稳定运行。"><meta name="DC.date" content="2012-1-18"><meta name="DC.relation" content="CN:101651698:A" scheme="references"><meta name="DC.relation" content="CN:1584842:A" scheme="references"><meta name="DC.relation" content="WO:2004042571:A2" scheme="references"><meta name="citation_patent_publication_number" content="CN:102323894:A"><meta name="citation_patent_application_number" content="CN:201110266490"><link rel="canonical" href="https://www.google.com/patents/CN102323894A?cl=zh"/><meta property="og:url" content="https://www.google.com/patents/CN102323894A?cl=zh"/><meta name="title" content="专利 CN102323894A - 企业分布式应用间实现非阻塞方式相互调用的系统及方法"/><meta name="description" content="本发明涉及一种企业分布式应用间实现非阻塞方式相互调用的系统，其包括用以进行基于java.nio数据包的数据读写操作的NIO读写模块、连接NIO读写模块的线程池管理模块和数据打解包模块、连接NIO读写模块并连接外部系统的请求处理模块，以及连接线程池管理模块和数据打解包模块的响应回调管理模块。本发明还涉及一种企业分布式应用间实现非阻塞方式相互调用的方法。采用了该发明的企业分布式应用间实现非阻塞方式相互调用的系统及方法，由于其包括NIO读写模块、线程池管理、数据打解包、请求处理、响应回调管理操作五个核心部分，其可通过有效地保护系统资源，实现不受外部因素的干扰，从而保证当前系统自身的稳定运行。"/><meta property="og:title" content="专利 CN102323894A - 企业分布式应用间实现非阻塞方式相互调用的系统及方法"/><meta property="og:type" content="book"/><meta property="og:site_name" content="Google Books"/><meta property="og:image" content="https://www.google.com/patents?id=&amp;printsec=frontcover&amp;img=1&amp;zoom=1"/><link rel="image_src" href="https://www.google.com/patents?id=&amp;printsec=frontcover&amp;img=1&amp;zoom=1"/><script>if (window['_OC_timingAction']) {window['_OC_timingAction']('patents_refpage');}</script><style>#gbar,#guser{font-size:13px;padding-top:1px !important;}#gbar{height:22px}#guser{padding-bottom:7px !important;text-align:right}.gbh,.gbd{border-top:1px solid #c9d7f1;font-size:1px}.gbh{height:0;position:absolute;top:24px;width:100%}@media all{.gb1{height:22px;margin-right:.5em;vertical-align:top}#gbar{float:left}}a.gb1,a.gb4{text-decoration:underline !important}a.gb1,a.gb4{color:#00c !important}.gbi .gb4{color:#dd8e27 !important}.gbf .gb4{color:#900 !important}

#gbar { padding:.3em .6em !important;}</style></head><body ><div id=gbar><nobr><a class=gb1 href="https://www.google.com/search?cl=zh&hl=zh-CN&sa=N&tab=tw">搜索</a> <a class=gb1 href="https://www.google.com/search?cl=zh&hl=zh-CN&tbm=isch&source=og&sa=N&tab=ti">图片</a> <a class=gb1 href="https://maps.google.com/maps?cl=zh&hl=zh-CN&sa=N&tab=tl">地图</a> <a class=gb1 href="https://play.google.com/?cl=zh&hl=zh-CN&sa=N&tab=t8">Play</a> <a class=gb1 href="https://www.youtube.com/results?cl=zh&hl=zh-CN&sa=N&tab=t1">YouTube</a> <a class=gb1 href="https://news.google.com/nwshp?hl=zh-CN&tab=tn">新闻</a> <a class=gb1 href="https://mail.google.com/mail/?tab=tm">Gmail</a> <a class=gb1 href="https://drive.google.com/?tab=to">云端硬盘</a> <a class=gb1 style="text-decoration:none" href="https://www.google.com/intl/zh-CN/options/"><u>更多</u> &raquo;</a></nobr></div><div id=guser width=100%><nobr><span id=gbn class=gbi></span><span id=gbf class=gbf></span><span id=gbe></span><a target=_top id=gb_70 href="https://www.google.com/accounts/Login?service=&continue=https://www.google.com/patents%3Fcl%3Dzh%26hl%3Dzh-CN&hl=zh-CN" class=gb4>登录</a></nobr></div><div class=gbh style=left:0></div><div class=gbh style=right:0></div><div role="alert" style="position: absolute; left: 0; right: 0;"><a href="https://www.google.com/patents/CN102323894A?cl=zh&amp;hl=zh-CN&amp;output=html_text" title="屏幕阅读器用户请注意：点击此链接可进入无障碍模式。阅读器在无障碍模式下具有同样的基本功能，但可让用户获得更好的体验。"><img border="0" src="//www.google.com/images/cleardot.gif"alt="屏幕阅读器用户请注意：点击此链接可进入无障碍模式。阅读器在无障碍模式下具有同样的基本功能，但可让用户获得更好的体验。"></a></div><div class="kd-appbar"><h2 class="kd-appname"><a href="/patents?hl=zh-CN"> 专利</a></h2><div class="kd-buttonbar left" id="left-toolbar-buttons"><a id="appbar-write-review-link" href=""></a><a id="appbar-view-print-sample-link" href=""></a><a id="appbar-view-ebook-sample-link" href=""></a><a id="appbar-patents-prior-art-finder-link" href="https://www.google.com/patents/related/CN102323894A"></a><a id="appbar-patents-discuss-this-link" href="https://www.google.com/url?id=XOaEBwABERAJ&amp;q=http://patents.stackexchange.com/redirect/google-patents%3Fpublication%3DCN102323894A&amp;usg=AFQjCNEUoMuwG29SVVIvEp0-sMEc8Kwxtw" data-is-grant="false"></a><a id="appbar-read-patent-link" href="//docs.google.com/viewer?url=patentimages.storage.googleapis.com/pdfs/09a6baa39dea3ded99b8/CN102323894A.pdf"></a><a id="appbar-download-pdf-link" href="//patentimages.storage.googleapis.com/pdfs/09a6baa39dea3ded99b8/CN102323894A.pdf"></a><a class="appbar-content-language-link" data-selected="true" data-label="中文" href="/patents/CN102323894A?cl=zh&amp;hl=zh-CN"></a><a class="appbar-content-language-link" data-label="英语" href="/patents/CN102323894A?cl=en&amp;hl=zh-CN"></a><a class="appbar-application-grant-link" data-selected="true" data-label="申请" href="/patents/CN102323894A?hl=zh-CN&amp;cl=zh"></a><a class="appbar-application-grant-link" data-label="授权" href="/patents/CN102323894B?hl=zh-CN&amp;cl=zh"></a></div><div class="kd-buttonbar right" id="right-toolbar-buttons"></div></div><div id="books-microdata" itemscope=""itemtype="http://schema.org/Book"itemid="https://www.google.com/patents/CN102323894A?cl=zh" style="display:none"><span itemprop="description">本发明涉及一种企业分布式应用间实现非阻塞方式相互调用的系统，其包括用以进行基于java.nio数据包的数据读写操作的NIO读写模块、连接NIO读写模块的线程池管理模块和数据打解包模块、连接NIO读写模块并连接外部系统的请求 ...</span><span itemprop="url">https://www.google.com/patents/CN102323894A?cl=zh&amp;utm_source=gb-gplus-share</span><span class="main-title" itemprop="name">专利 CN102323894A - 企业分布式应用间实现非阻塞方式相互调用的系统及方法</span><img itemprop="image" src="https://www.google.com/patents?id=&amp;printsec=frontcover&amp;img=1&amp;zoom=1"alt="专利 CN102323894A - 企业分布式应用间实现非阻塞方式相互调用的系统及方法" title="专利 CN102323894A - 企业分布式应用间实现非阻塞方式相互调用的系统及方法"></div><div style="display: none"><ol id="ofe-gear-menu-contents" class="gbmcc"><li class="gbe gbmtc"><a class="gbmt goog-menuitem-content" id="" href="https://www.google.com/advanced_patent_search?hl=zh-CN"> 高级专利搜索</a></li></ol></div><div id="volume-main"><div id="volume-center"><div class=vertical_module_list_row><div id=intl_patents class=about_content><div id=intl_patents_v><table class="patent-bibdata patent-drawings-missing"><tr><td class="patent-bibdata-heading"> 公开号</td><td class="single-patent-bibdata">CN102323894 A</td></tr><tr><td class="patent-bibdata-heading">发布类型</td><td class="single-patent-bibdata">申请</td></tr><tr><td class="patent-bibdata-heading"> 专利申请号</td><td class="single-patent-bibdata">CN 201110266490</td></tr><tr><td class="patent-bibdata-heading">公开日</td><td class="single-patent-bibdata">2012年1月18日</td></tr><tr><td class="patent-bibdata-heading"> 申请日期</td><td class="single-patent-bibdata">2011年9月8日</td></tr><tr><td class="patent-bibdata-heading"> 优先权日<span class="patent-tooltip-anchor patent-question-icon"data-tooltip-text="优先日期属于假设性质，不具任何法律效力。Google 对于所列日期的正确性并没有进行法律分析，也不作任何陈述。"></span></td><td class="single-patent-bibdata">2011年9月8日</td></tr><tr class="patent-bibdata-list-row "><td class="patent-bibdata-heading">公告号</td><td><span class="patent-bibdata-value-list"><span class="patent-bibdata-value"><a href="/patents/CN102323894B?hl=zh-CN&amp;cl=zh">CN102323894B</a></span></span></td></tr><tr class="patent-bibdata-list-row alternate-patent-number"><td class="patent-bibdata-heading"> 公开号</td><td><span class="patent-bibdata-value-list"><span class="patent-bibdata-value">201110266490.6, </span><span class="patent-bibdata-value">CN 102323894 A, </span><span class="patent-bibdata-value">CN 102323894A, </span><span class="patent-bibdata-value">CN 201110266490, </span><span class="patent-bibdata-value">CN-A-102323894, </span><span class="patent-bibdata-value">CN102323894 A, </span><span class="patent-bibdata-value">CN102323894A, </span><span class="patent-bibdata-value">CN201110266490, </span><span class="patent-bibdata-value">CN201110266490.6</span></span></td></tr><tr class="patent-bibdata-list-row "><td class="patent-bibdata-heading"> 发明者</td><td><span class="patent-bibdata-value-list"><span class="patent-bibdata-value"><a href="https://www.google.com/search?tbo=p&amp;tbm=pts&amp;hl=en&amp;q=ininventor:%22%E7%8E%8B%E6%96%87%E6%96%8C%22">王文斌</a></span></span></td></tr><tr class="patent-bibdata-list-row "><td class="patent-bibdata-heading"> 申请人</td><td><span class="patent-bibdata-value-list"><span class="patent-bibdata-value"><a href="https://www.google.com/search?tbo=p&amp;tbm=pts&amp;hl=en&amp;q=inassignee:%22%E4%B8%8A%E6%B5%B7%E6%99%AE%E5%85%83%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%22">上海普元信息技术股份有限公司</a></span></span></td></tr><tr class="patent-bibdata-list-row "><td class="patent-bibdata-heading">导出引文</td><td><span class="patent-bibdata-value-list"><span class="patent-bibdata-value"><a href="/patents/CN102323894A.bibtex?cl=zh">BiBTeX</a>, </span><span class="patent-bibdata-value"><a href="/patents/CN102323894A.enw?cl=zh">EndNote</a>, </span><span class="patent-bibdata-value"><a href="/patents/CN102323894A.ris?cl=zh">RefMan</a></span></span></td></tr><tr class="patent-internal-links"><td colspan=2><span class="patent-bibdata-value"><a href="#backward-citations">专利引用</a> (3),</span> <span class="patent-bibdata-value"><a href="#classifications">分类</a> (1),</span> <span class="patent-bibdata-value"><a href="#legal-events">法律事件</a> (6)</span> </td></tr><tr><td colspan=2 class="patent-bibdata-external-link-spacer-top"></td></tr><tr class="patent-bibdata-external-link-spacer-bottom"></tr><tr><td colspan=2><span class="patent-bibdata-heading">外部链接:&nbsp;</span><span><span class="patent-bibdata-value"><a href="https://www.google.com/url?id=XOaEBwABERAJ&amp;q=http://211.157.104.87:8080/sipo/zljs/hyjs-yx-new.jsp%3Frecid%3D201110266490&amp;usg=AFQjCNHIq9eQvIjV1a-vGvw4m_sdvGbQdw"> 中国国家知识产权局</a>, </span><span class="patent-bibdata-value"><a href="https://www.google.com/url?id=XOaEBwABERAJ&amp;q=http://worldwide.espacenet.com/publicationDetails/biblio%3FCC%3DCN%26NR%3D102323894A%26KC%3DA%26FT%3DD&amp;usg=AFQjCNGXRKx9iVdd1Ao55BUPYJ5U5tEl-g"> 欧洲专利数据库 (Espacenet)</a></span></span></td></tr><tr class="patent-bibdata-group-spacer"></tr></table><div class="number-and-title"><span class="patent-title"><invention-title mxw-id="PT110137924" lang="ZH" load-source="patent-office">企业分布式应用间实现非阻塞方式相互调用的系统及方法</invention-title>
      </span><br><span class="patent-number">CN 102323894 A</span></div><div class="patent-section patent-abstract-section"><div class="patent-section-header"><span class="patent-section-title"> 摘要</span></div><div class="patent-text"><abstract mxw-id="PA92366167" lang="ZH" load-source="patent-office">
    <div class="abstract">本发明涉及一种企业分布式应用间实现非阻塞方式相互调用的系统，其包括用以进行基于java.nio数据包的数据读写操作的NIO读写模块、连接NIO读写模块的线程池管理模块和数据打解包模块、连接NIO读写模块并连接外部系统的请求处理模块，以及连接线程池管理模块和数据打解包模块的响应回调管理模块。本发明还涉及一种企业分布式应用间实现非阻塞方式相互调用的方法。采用了该发明的企业分布式应用间实现非阻塞方式相互调用的系统及方法，由于其包括NIO读写模块、线程池管理、数据打解包、请求处理、响应回调管理操作五个核心部分，其可通过有效地保护系统资源，实现不受外部因素的干扰，从而保证当前系统自身的稳定运行。</div>
  </abstract>
  </div></div><div class="patent-section patent-claims-section"><div class="patent-section-header"><span class="patent-section-title">权利要求<span class="patent-section-count">(10)</span></span></div><div class="patent-text"><div mxw-id="PCLM39634336" lang="ZH" load-source="patent-office" class="claims">
    <div class="claim"> <div num="1" class="claim">
      <div class="claim-text">1.一种企业分布式应用间实现非阻塞方式相互调用的系统，其特征在于，所述的SOA 应用间相互调用的系统包括：NIO读写模块，用以进行基于java. nio数据包的数据读写操作；线程池管理模块，连接所述的NIO读写模块，用以维护一线程池；数据打解包模块，连接所述的NIO读写模块，用以对数据进行打包和解包；请求处理模块，连接所述的NIO读写模块并连接所述的外部系统，用以根据所获得至请求向所述的NIO读写模块发送读写指令；以及响应回调管理模块，连接所述的线程池管理模块和数据打解包模块，用以实现对请求的相应回调。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="2" class="claim">
      <div class="claim-text">2.根据权利要求1所述的企业分布式应用间实现非阻塞方式相互调用的系统，其特征在于，所述的NIO读写模块具体包括异步I/O API单元、事件模型单元和Codec框架单元， 所述的异步I/O API单元分别连接所述的事件模型单元和Codec框架单元，所述的事件模型单元还连接所述的Codec框架单元。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="3" class="claim">
      <div class="claim-text">3.根据权利要求2所述的企业分布式应用间实现非阻塞方式相互调用的系统，其特征在于，所述的事件模型单元为基于拦截链模式的事件模型单元。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="4" class="claim">
      <div class="claim-text">4.	一种基于权利要求1所述的企业分布式应用间实现非阻塞方式相互调用的方法，其特征在于，所述的方法包括以下步骤：(1)所述的请求处理模块启动轮询监听连接请求的反应器，等待客户端发起连接请求；(2)客户端发起连接请求时，所述的轮询监听连接请求的反应器监听到该连接请求，所述的请求处理模块建立和客户端的连接，并将所建立的连接注册到一个轮询监听连接读写请求的反应器上；(3)客户端发出数据，被所述的轮询监听连接读写请求的反应器监听到；(4)所述的NIO读写模块读取数据；(5)所述的数据打解包模块获得所读取的数据并将数据解包为业务请求进行处理；(6)业务请求被处理后，响应回调管理模块获得处理结果，并将其发送至所述的数据打解包模块；(7)所述的数据打解包模块进行数据打包；(8)所述的数据打解包模块将打包数据发送至所述的NIO读写模块；(9)所述的NIO读写模块将数据写入客户端。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="5" class="claim">
      <div class="claim-text">5.根据权利要求4所述的企业分布式应用间实现非阻塞方式相互调用的方法，其特征在于，所述的NIO读写模块具体包括：异步I/O API单元、事件模型单元和Codec框架单元， 所述的异步1/0 API单元分别连接所述的事件模型单元和Codec框架单元，所述的事件模型单元还连接所述的Codec框架单元，所述的步骤OTO读写模块读取数据，具体为：所述的异步1/0 API单元对已读取的数据进行缓存，并根据缓存内容对尚未读取的数据进行读取。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="6" class="claim">
      <div class="claim-text">6.根据权利要求5所述的企业分布式应用间实现非阻塞方式相互调用的方法，其特征在于，该方法中所述的数据打解包模块获得所读取的数据并将数据解包为业务请求进行处理，具体为：所述的数据打解包模块对所读取数据依照设定的数据格式进行解包。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="7" class="claim">
      <div class="claim-text">7.根据权利要求5所述的企业分布式应用间实现非阻塞方式相互调用的方法，其特征在于，该方法中所述的数据打解包模块进行数据打包，具体为：所述的数据打解包模块对所写入的数据依照设定的数据格式进行打包。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="8" class="claim">
      <div class="claim-text">8.根据权利要求7所述的企业分布式应用间实现非阻塞方式相互调用的方法，其特征在于，该方法中所述的NIO读写模块将数据写入客户端，包括以下步骤：(1)所述的NIO读写模块将数据写入客户端；(2)在数据未写入完成时，所述的事件模型单元注册一个包含未写入数据的写事件。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="9" class="claim">
      <div class="claim-text">9.根据权利要求5所述的企业分布式应用间实现非阻塞方式相互调用的方法，其特征在于，该方法在处理业务请求时还包括以下步骤：(1)所述的线程池管理模块执行一超时管理线程，当该线程池管理模块所执行的超时管理线程发现有处理时间超时的请求时，线程池管理模块生成超时异常并发送至所述的响应回调管理模块。</div>
    </div>
    </div> <div class="claim-dependent"> <div num="10" class="claim">
      <div class="claim-text">10.根据权利要求4至9中任一项所述的企业分布式应用间实现非阻塞方式相互调用的方法，其特征在于，该方法中所述数据打解包模块进行数据打包，具体为：数据打解包模块根据设定的异常数据格式对异常信息进行数据打包。</div>
    </div>
  </div> </div>
  </div></div><div class="patent-section patent-description-section"><div class="patent-section-header"><span class="patent-section-title"> 说明</span></div><div class="patent-text"><div mxw-id="PDES45132170" lang="ZH" load-source="patent-office" class="description">
    <p>企业分布式应用间实现非阻塞方式相互调用的系统及方法</p>
    <p>技术领域</p>
    <p>[0001]	本发明涉及计算机系统技术领域，特别涉及企业应用系统技术领域，具体是指企业分布式应用间实现非阻塞方式相互调用的系统及方法。</p>
    <p>背景技术</p>
    <p>[0002]	随着企业应用间的信息交互越来越频繁，这种通过集成已有的不同计算机应用来提供新的服务的需要也越来越普遍。例如金融行业银电联网代收费系统，跨行转账系统，均涉及不同应用间的相互调用，这些应用对于调用的高效性和稳定性的要求都很高。通常，此类调用以TCP作为通信层，显示跨地域、跨网段的调用，并且各个应用间交互的数据格式也不尽相同。</p>
    <p>[0003]	在业界一般的做法，是使用堵塞式的IO操作，当每次发出调用请求后就会同步等待请求响应，而在等待的这段时间内会造成线程被占用，实际上该线程在发出调用请求后就只是处于等待状态。</p>
    <p>[0004]	这种调用的实现方法很容易受外部因素的干扰而影响当前系统自身的稳定运行。 这些外部因素干扰包括：</p>
    <p>[0005]	(1)网络拥堵造成的外部系统的响应延时；</p>
    <p>[0006]	(2)在等待外部系统的响应时的网络中断；</p>
    <p>[0007]	(3)由于外部系统本身处理能力限制造成无法处理请求因此也没有响应返回。</p>
    <p>[0008]	因此，在请求量过大，响应时间过长的情况下，就会引起大量线程等待，造成CPU 和内存的浪费，从而使调用方的应用无法响应，甚至内存溢出，应用需要重启。这就严重制约了此类调用的高效性和稳定性。</p>
    <p>[0009]	本发明中NIO是指JDK中Java, nio的包，Java, nio的包是在jdkl. 4以后被提出来的，和原来的i/o开发模式相比较，nio提供了更高的性能，求偶基于IO事件的处理模型， 以及面向块（block-oriented)的1/0的编程模式。</p>
    <p>[0010]	Reactor (反应器）用于负责对10事件做出相应的响应动作。</p>
    <p>发明内容</p>
    <p>[0011]	本发明的目的是克服了上述现有技术中的缺点，提供一种通过异步10操作、并采用线程池管理和响应超时管理，能有效保证调用的高效性和稳定性，且结构简单，应用范围广泛的企业分布式应用间实现非阻塞方式相互调用的系统及方法。</p>
    <p>[0012]	为了实现上述的目的，本发明的企业分布式应用间实现非阻塞方式相互调用的系统具有如下构成：</p>
    <p>[0013]	NIO读写模块，用以进行基于java. nio数据包的数据读写操作；</p>
    <p>[0014]	线程池管理模块，连接所述的NIO读写模块，用以维护一线程池；</p>
    <p>[0015]	数据打解包模块，连接所述的NIO读写模块，用以对数据进行打包和解包；</p>
    <p>[0016]	请求处理模块，连接所述的NIO读写模块并连接所述的外部系统，用以根据所获得至请求向所述的NIO读写模块发送读写指令；以及</p>
    <p>[0017]	响应回调管理模块，连接所述的线程池管理模块和数据打解包模块，用以实现对请求的相应回调。</p>
    <p>[0018]	在企业分布式应用间实现非阻塞方式相互调用的系统中，所述的NIO读写模块具体包括异步I/O API单元、事件模型单元和Codec框架单元，所述的异步I/O API单元分别连接所述的事件模型单元和Codec框架单元，所述的事件模型单元还连接所述的Codec框架单元。</p>
    <p>[0019]	在企业分布式应用间实现非阻塞方式相互调用的系统中，所述的事件模型单元为基于拦截链模式的事件模型单元。</p>
    <p>[0020]	本发明还提供一种基于权利要求1所述的实现企业分布式应用间实现非阻塞方式相互调用的方法，该方法包括以下步骤：</p>
    <p>[0021]	(1)所述的请求处理模块启动轮询监听连接请求的反应器，等待客户端发起连接请求；</p>
    <p>[0022]	(2)客户端发起连接请求时，所述的轮询监听连接请求的反应器监听到该连接请求，所述的请求处理模块建立和客户端的连接，并将所建立的连接注册到一个轮询监听连接读写请求的反应器上；</p>
    <p>[0023]	(3)客户端发出数据，被所述的轮询监听连接读写请求的反应器监听到；</p>
    <p>[0024]	(4)所述的NIO读写模块读取数据；</p>
    <p>[0025]	(5)所述的数据打解包模块获得所读取的数据并将数据解包为业务请求进行处理；</p>
    <p>[0026]	(6)业务请求被处理后，响应回调管理模块获得处理结果，并将其发送至所述的数据打解包模块；</p>
    <p>[0027]	(7)所述的数据打解包模块进行数据打包；</p>
    <p>[0028]	(8)所述的数据打解包模块将打包数据发送至所述的NIO读写模块；</p>
    <p>[0029]	(9)所述的NIO读写模块将数据写入客户端。</p>
    <p>[0030]	在企业分布式应用间实现非阻塞方式相互调用的方法中，所述的NIO读写模块具体包括：异步I/O API单元、事件模型单元和Codec框架单元，所述的异步I/O API单元分别连接所述的事件模型单元和Codec框架单元，所述的事件模型单元还连接所述的Codec 框架单元，所述的步骤OTO读写模块读取数据，具体为：所述的异步1/0 API单元对已读取的数据进行缓存，并根据缓存内容对尚未读取的数据进行读取。</p>
    <p>[0031]	在企业分布式应用间实现非阻塞方式相互调用的方法中，该方法中所述的数据打解包模块获得所读取的数据并将数据解包为业务请求进行处理，具体为：所述的数据打解包模块对所读取数据依照设定的数据格式进行解包。</p>
    <p>[0032]	在企业分布式应用间实现非阻塞方式相互调用的方法中，该方法中所述的数据打解包模块进行数据打包，具体为：所述的数据打解包模块对所写入的数据依照设定的数据格式进行打包。</p>
    <p>[0033]	在企业分布式应用间实现非阻塞方式相互调用的方法中，该方法中所述的NIO读写模块将数据写入客户端，包括以下步骤：</p>
    <p>[0034]	(1)所述的NIO读写模块将数据写入客户端；[0035]	(2)在数据未写入完成时，所述的事件模型单元注册一个包含未写入数据的写事件。</p>
    <p>[0036]	在企业分布式应用间实现非阻塞方式相互调用的方法中，该方法所述的线程池管理模块执行一超时管理线程，当该线程池管理模块所执行的超时管理线程发现有处理时间超时的请求时，线程池管理模块生成超时异常并发送至所述的响应回调管理模块。</p>
    <p>[0037]	在企业分布式应用间实现非阻塞方式相互调用的方法中，该方法中所述数据打解包模块进行数据打包，具体为：数据打解包模块根据设定的异常数据格式对异常信息进行数据打包。</p>
    <p>[0038]	采用了该发明的在企业分布式应用间实现非阻塞方式相互调用的系统及方法，其系统包括NIO读写模块、线程池管理、数据打解包、请求处理、响应回调管理操作五个核心部分，其通过有效地保护系统资源，实现不受外部因素的干扰，从而保证当前系统自身的稳定运行。本发明在企业分布式应用间实现非阻塞方式相互调用的系统及方法，其工作性能稳定可靠，适用范围较为广泛。</p>
    <p>附图说明</p>
    <p>[0039]	图1为本发明的在企业分布式应用间实现非阻塞方式相互调用的系统中所采用的NIO处理逻辑示意图。</p>
    <p>[0040]	图2为本发明的在企业分布式应用间实现非阻塞方式相互调用的方法中的请求处理序列图。</p>
    <p>具体实施方式</p>
    <p>[0041]	为了能够更清楚地理解本发明的技术内容，特举以下实施例详细说明。</p>
    <p>[0042]	请参阅图1所示，为本发明的在企业分布式应用间实现非阻塞方式相互调用的系统中所采用的NIO处理逻辑示意图。</p>
    <p>[0043]	在一种实施方式中，企业分布式应用间相互调用的系统包括：</p>
    <p>[0044]	NIO读写模块，用以进行基于java. nio数据包的数据读写操作；</p>
    <p>[0045]	线程池管理模块，连接所述的NIO读写模块，用以维护一线程池；</p>
    <p>[0046]	数据打解包模块，连接所述的NIO读写模块，用以对数据进行打包和解包；</p>
    <p>[0047]	请求处理模块，连接所述的NIO读写模块并连接所述的外部系统，用以根据所获得至请求向所述的NIO读写模块发送读写指令；以及</p>
    <p>[0048]	响应回调管理模块，连接所述的线程池管理模块和数据打解包模块，用以实现对请求的相应回调。</p>
    <p>[0049]	其中，所述的NIO读写模块具体包括异步I/O API单元、事件模型单元和Codec框架单元，所述的异步I/O API单元分别连接所述的事件模型单元和Codec框架单元，所述的事件模型单元还连接所述的Codec框架单元。且所述的事件模型单元为基于拦截链模式的事件模型单元。</p>
    <p>[0050]	基于该实施方式的在企业分布式应用间实现非阻塞方式相互调用的方法具体包括以下步骤：</p>
    <p>[0051]	(1)所述的请求处理模块启动轮询监听连接请求的反应器，等待客户端发起连接请求；</p>
    <p>[0052]	(2)客户端发起连接请求时，所述的轮询监听连接请求的反应器监听到该连接请求，所述的请求处理模块建立和客户端的连接，并将所建立的连接注册到一个轮询监听连接读写请求的反应器上；</p>
    <p>[0053]	(3)客户端发出数据，被所述的轮询监听连接读写请求的反应器监听到；</p>
    <p>[0054]	(4)所述的NIO读写模块读取数据；</p>
    <p>[0055]	(5)所述的数据打解包模块获得所读取的数据并将数据解包为业务请求进行处理；</p>
    <p>[0056]	(6)业务请求被处理后，响应回调管理模块获得处理结果，并将其发送至所述的数据打解包模块；</p>
    <p>[0057]	(7)所述的数据打解包模块进行数据打包；</p>
    <p>[0058]	(8)所述的数据打解包模块将打包数据发送至所述的NIO读写模块；</p>
    <p>[0059]	(9)所述的NIO读写模块将数据写入客户端。</p>
    <p>[0060]	在一较优选的实施方式中，所述的NIO读写模块读取数据的步骤，具体为：所述的异步I/O API单元对已读取的数据进行缓存，并根据缓存内容对尚未读取的数据进行读取。</p>
    <p>[0061]	在进一步优选的实施方式中，该方法中所述的数据打解包模块获得所读取的数据并将数据解包为业务请求进行处理，具体为：所述的数据打解包模块对所读取数据依照设定的数据格式进行解包。该方法中所述的数据打解包模块进行数据打包，具体为：所述的数据打解包模块对所写入的数据依照设定的数据格式进行打包。</p>
    <p>[0062]	在更进一步优选的实施方式中，该方法中所述的NIO读写模块将数据写入客户端，包括以下步骤：</p>
    <p>[0063]	(91)所述的NIO读写模块将数据写入客户端；</p>
    <p>[0064]	(92)在数据未写入完成时，所述的事件模型单元注册一个包含未写入数据的写事件。</p>
    <p>[0065]	(93)所述的线程池管理模块执行一超时管理线程，当该线程池管理模块所执行的超时管理线程发现有处理时间超时的请求时，线程池管理模块生成超时异常并发送至所述的响应回调管理模块。</p>
    <p>[0066]	在更优选的实施方式中，该方法中所述数据打解包模块进行数据打包，具体为：数据打解包模块根据设定的异常数据格式对异常信息进行数据打包。</p>
    <p>[0067]	在本发明的应用中，本发明的在企业分布式应用间实现非阻塞方式相互调用的方法中可以包括以下步骤：</p>
    <p>[0068]	(1)启动轮询监听连接请求的反应器，等待客户端发起连接请求；</p>
    <p>[0069]	(2)客户端发起连接请求，被步骤（1)中启动的反应器监听到，而后建立和客户端的连接，并把建立的连接注册到一个轮询监听连接读写请求的反应器上；</p>
    <p>[0070]	(3)客户端发出数据，被步骤O)中启动的反应器监听到，读取数据，然后将读取出来的数据经过解包变成业务请求，交由处理器处理；</p>
    <p>[0071]	(31)读取数据时，由于TCP是按照流的方式读取，而不是按照包的方式读取，这样有可能有造成一次无法完整读取数据的情况，这时需要NIO框架有数据读取缓冲的能力， 再下一次再收到数据时可以和上一次收到的不完整的数据一起交给用户处理；[0072]	(32)读取数据时可以按照双方指定的数据格式来解包，如前4位表示报文总长度，接下来的5位表示需要调用的服务名称，剩下的数据表示调用参数；</p>
    <p>[0073]	(4)业务请求被处理器处理后，会交由响应回调将业务响应写会客户端，在向客户端写数据前会执行数据打包，而后发送；</p>
    <p>[0074]	(41)写入数据时，如果由于网络原因无法立即一次写入时，可以尝试有些次数的循环，如果还为写完，可以重新注册一个写事件，等待下次轮循时触发该事件，继续写入未写完的数据；</p>
    <p>[0075]	(42)写入数据时可以按照双方指定的数据格式来打包，如前4位表示报文总长度，剩下的数据表示返回结果；</p>
    <p>[0076]	(43)在业务请求的处理过程中，会有后台线程的超时管理器在执行，会检查每个业务请求的已处理的时间，当发现有处理时间超时的请求时，会生成超时异常交由响应回调处理；</p>
    <p>[0077]	(44)写入数据时还需要考虑异常信息的打包，如前4位表示报文总长度，接下来可有1个标志位标识是否有异常，接下来5位表示异常编码，剩下的数据表示异常信息。在实际应用中，本发明的NIO读写功能对连接的请求和数据的读写均采用异步处理，并且设置独立的线程池使用，因此不会占用业务处理的线程。在收到请求数据后会将请求数据交由打解包模块处理变成具体的业务请求，这个业务请求就会由请求处理器处理，请求处理器完成请求处理后调用响应回调将业务响应通过NIO写出。各个类的方法如下表所示：</p>
    <p>[0078]</p>
    <p>类名称	方法/属性	说明Boss  负责接收客户端连接请求	run()	轮询连接建立事件	registerAcceptedChannel()	注册已建立的连接，并监听读/写事件NioWorker  读写工作器	register()	注册需要被监听读写事件的连接	run()	轮询连接的读/写事件ChanneIHandIer  连接上的事件处理器	handleUpstream()	处理向上的类型事件。 如：收到数据，连接打开等	hand IeDownstreamO	处理向下的类型事件。 如：写入数据等IMessagePacker  数据打解包	unpack。	解包数据	pack()	打包数据ITransportRequestHandIer  请求处理器	handled	业务请求处理ITransportResponseCaIIback  响应回调	dolnResponse()	业务响应回调ITimeoutManager  超时管理器	add()	增加超时资源	remove()	删除超时资源ITimeoutResource  表示有超时的资源	onTimoutO	当超时发生，调用该方法</p>
    <p>[0079]	表1各类方法列表</p>
    <p>[0080]	请求处理的序列图如图2所示：</p>
    <p>[0081]	(1)启动轮询监听连接请求的反应器，等待客户端发起连接请求。</p>
    <p>[0082]	(2)客户端发起连接请求，被步骤（1)中启动的反应器监听到，而后建立连接，并把建立的连接注册到一个轮询监听连接读写请求的反应器上。</p>
    <p>[0083]	(3)客户端发出数据，被步骤O)中启动的反应器监听到，读取数据，然后将读取出来的数据经过解包变成业务请求，交由处理器处理。</p>
    <p>[0084]	(4)处理器处理完请求后，交由响应回调将业务响应写会客户端，在向客户端写数据前会执行数据打包，而后发送。</p>
    <p>[0085]	本发明的方法中，主要的代码实现用伪代码给出如下：</p>
    <p>[0086]	其中，接收客户端连接请求伪代码如下：</p>
    <p>[0087]</p>
    <p>class Boss implements Runnable {</p>
    <p>private final Selector selector；</p>
    <p>public void run () {</p>
    <p>final Thread currentThread = Thread.currentThread()； for (;;) {</p>
    <p>if (selector. select(1000) &gt; �）{</p>
    <p>selector .seIectedKeys() . clear ()；</p>
    <p>}</p>
    <p>SocketChannel acceptedSocket = channel. socket. accept ()； if (acceptedSocket != null) {</p>
    <p>registerAcceptedChannel(acceptedSocket, currentThread)；</p>
    <p>}</p>
    <p>private void registerAcceptedChannel(SocketChannel acceptedSocket, Thread currentThread) {</p>
    <p>NioWorker worker = nextWorker()；</p>
    <p>worker . register(new NioAcceptedSocketChannel(</p>
    <p>channel. getFactory () , pipeline, channel,</p>
    <p>NioServerSocketPipeIineSink . this , acceptedSocket,</p>
    <p>worker, currentThread), null)；</p>
    <p>}</p>
    <p>}</p>
    <p>[0088]	读写工作器伪代码如下：</p>
    <p>[0089]</p>
    <p>class NioWorker implements Runnable {</p>
    <p>void register (NioSocketChannel channel, ChannelFuture future) { boolean server = ！(channel instanceof NioClientSocketChannel)； Runnable registerTask = new RegisterTask(channel, future, server)； Selector selector； synchronized (startStopLock) { if ( ！started) {</p>
    <p>this . selector = selector = Selector . open ()； executor . execute (</p>
    <p>[0090]new IoWorkerRunnable(</p>
    <p>new	ThreadRenamingRunnable(this,</p>
    <p>threadName)))；</p>
    <p>} else {</p>
    <p>selector = this . selector；</p>
    <p>}</p>
    <p>started = true；</p>
    <p>registerTaskQueue. offer(registerTask)；</p>
    <p>public void run () {</p>
    <p>thread = Thread . currentThread ()；</p>
    <p>boolean shutdown = false； Selector selector = this . selector； for (;;) {</p>
    <p>SelectorUtil.select(selector)； cancelIedKeys = O； processRegisterTaskQueue ()； processWriteTas kQueue ()；</p>
    <p>processSelectedKeys(selector .seIectedKeys())； if (selector . keys () .isEmpty()) {</p>
    <p>shutdown = true； } else {</p>
    <p>shutdown = false；</p>
    <p>}</p>
    <p>}</p>
    <p>[0091]	超时资源管理器伪代码如下：</p>
    <p>[0092]</p>
    <p>class DefauItTimeoutManager&lt;T extends ITimeoutResource&gt; implements 工TimeoutManager&lt;T&gt; { private ConcurrentHashMap&lt;String, T&gt; resourceMap = new ConcurrentHashMap&lt;String, T&gt;()；</p>
    <p>private Timer[] timers = null；</p>
    <p>private Queue&lt;String&gt; [] queues = null; // 存放超时资源的 id</p>
    <p>private class TimeoutTimerTas k extends TimerTask { public void run () {</p>
    <p>long currentTimeMillis = System.currentTimeMillis()； Queue&lt;String&gt; queue = timeoutManager■queues[idx]^ for (Iterator&lt;String&gt; it 二 queue . iterator () ； it.hasNext() ;) { String id = it. next ()； T resource = resourceMap. get (id)；</p>
    <p>if (currentTimeMillis - resource. getBeginTime() &gt;二 resource .getTimeout()) {</p>
    <p>resource = resourceMap.remove (id)； it. remove ()； if (resource != null) { try {</p>
    <p>resource .onTimout(id, timeoutManager)；</p>
    <p>} catch (Throwable e) { }</p>
    <p>}</p>
    <p>[0093][0094]	本发明的技术方案具有以下优点：</p>
    <p>[0095]	(1)网络IO的异步处理</p>
    <p>[0096]	通过JavaNIO的使用，实现基于IO事件的IO异步处理。</p>
    <p>[0097]	(2)线程管理</p>
    <p>[0098]	可以保证线程数不会随着大并发的请求访问而无限制的变大，保证系统资源的合理分配使用，对于暂时无法处理的请求，可以放入请求队列。</p>
    <p>[0099]	(3)超时管理</p>
    <p>[0100]	对于长时间没有处理完成的业务请求，超时管理会自动抛出一个超时异常交由响应回调处理。</p>
    <p>[0101]	采用了该发明的在企业分布式应用间实现非阻塞方式相互调用系统及方法，其系统包括NIO读写模块、线程池管理、数据打解包、请求处理、响应回调管理操作五个核心部分，其通过有效地保护系统资源，实现不受外部因素的干扰，从而保证当前系统自身的稳定运行。本发明的计算机系统中实现企业分布式应用间实现非阻塞方式相互调用系统及方法，其工作性能稳定可靠，适用范围较为广泛。</p>
    <p>[0102]	在此说明书中，本发明已参照其特定的实施例作了描述。但是，很显然仍可以作出各种修改和变换而不背离本发明的精神和范围。因此，说明书和附图应被认为是说明性的而非限制性的。</p>
  </div>
  </div></div><div class="patent-section patent-tabular-section"><a id="backward-citations"></a><div class="patent-section-header"><span class="patent-section-title">专利引用</span></div><table class="patent-data-table"><thead class="patent-data-table-thead"><tr class="patent-data-table"><th class="patent-data-table-th">引用的专利</th><th class="patent-data-table-th"> 申请日期</th><th class="patent-data-table-th">公开日</th><th class="patent-data-table-th"> 申请人</th><th class="patent-data-table-th">专利名</th></tr></thead><tr><td class="patent-data-table-td citation-patent"><a href="/patents/CN1584842A?cl=zh">CN1584842A</a><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td patent-date-value">2004年6月9日</td><td class="patent-data-table-td patent-date-value">2005年2月23日</td><td class="patent-data-table-td ">中兴通讯股份有限公司</td><td class="patent-data-table-td ">一种实现计算机系统应用服务器的方法</td></tr><tr><td class="patent-data-table-td citation-patent"><a href="/patents/CN101651698A?cl=zh">CN101651698A</a><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td patent-date-value">2007年12月12日</td><td class="patent-data-table-td patent-date-value">2010年2月17日</td><td class="patent-data-table-td ">浙江大学</td><td class="patent-data-table-td ">基于nio和io的面向发布订阅系统的传输方法</td></tr><tr><td class="patent-data-table-td citation-patent"><a href="/patents/WO2004042571A2?cl=zh">WO2004042571A2</a><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td patent-date-value">2003年11月5日</td><td class="patent-data-table-td patent-date-value">2004年5月21日</td><td class="patent-data-table-td ">Pasqua Roberto Della</td><td class="patent-data-table-td ">A communication method with reduced response time in a distributed data processing system</td></tr></table><div class="patent-section-footer">* 由审查员引用</div></div><div class="patent-section patent-tabular-section"><a id="classifications"></a><div class="patent-section-header"><span class="patent-section-title">分类</span></div><table class="patent-data-table"><thead class="patent-data-table-thead"><tr class="patent-data-table"><th class="patent-data-table-th"> </th><th class="patent-data-table-th"> </th></tr></thead><tr><td class="patent-data-table-td ">国际分类号</td><td class="patent-data-table-td "><span class="nested-value"><a href="https://www.google.com/url?id=XOaEBwABERAJ&amp;q=http://web2.wipo.int/ipcpub/&amp;usg=AFQjCNER44F5jlVoswCkvW3YEcB5lW4moA#refresh=page&amp;notion=scheme&amp;version=20130101&amp;symbol=G06F0009460000">G06F9/46</a></span></td></tr></table><div class="patent-section-footer"></div></div><div class="patent-section patent-tabular-section"><a id="legal-events"></a><div class="patent-section-header"><span class="patent-section-title">法律事件</span></div><table class="patent-data-table"><thead class="patent-data-table-thead"><tr class="patent-data-table"><th class="patent-data-table-th"> 日期</th><th class="patent-data-table-th">代码</th><th class="patent-data-table-th">事件</th><th class="patent-data-table-th">说明</th></tr></thead><tr><td class="patent-data-table-td patent-date-value">2012年1月18日</td><td class="patent-data-table-td ">C06</td><td class="patent-data-table-td ">Publication</td><td class="patent-data-table-td "></td></tr><tr><td class="patent-data-table-td patent-date-value">2012年3月14日</td><td class="patent-data-table-td ">C10</td><td class="patent-data-table-td ">Entry into substantive examination</td><td class="patent-data-table-td "></td></tr><tr><td class="patent-data-table-td patent-date-value">2013年7月10日</td><td class="patent-data-table-td ">C14</td><td class="patent-data-table-td ">Grant of patent or utility model</td><td class="patent-data-table-td "></td></tr><tr><td class="patent-data-table-td patent-date-value">2013年11月20日</td><td class="patent-data-table-td ">C56</td><td class="patent-data-table-td ">Change in the name or address of the patentee</td><td class="patent-data-table-td "><div class="nested-key-value"><span class="nested-key">Owner name: </span><span class="nested-value">PRIMETON INFORMATION TECHNOLOGY CO., LTD.</span></div><div class="nested-key-value"><span class="nested-key">Free format text: </span><span class="nested-value">FORMER NAME: PRIMETON TECHNOLOGIES LTD.</span></div></td></tr><tr><td class="patent-data-table-td patent-date-value">2014年1月29日</td><td class="patent-data-table-td ">C53</td><td class="patent-data-table-td ">Correction of patent for invention or patent application</td><td class="patent-data-table-td "></td></tr><tr><td class="patent-data-table-td patent-date-value">2014年1月29日</td><td class="patent-data-table-td ">COR</td><td class="patent-data-table-td ">Change of bibliographic data</td><td class="patent-data-table-td "><div class="nested-key-value"><span class="nested-key">Free format text: </span><span class="nested-value">CORRECT: INVENTOR; FROM: WANG WENBIN TO: WANG WENBIN SUN GUILING</span></div></td></tr></table><div class="patent-section-footer"></div></div><div class="modal-dialog" id="patent-images-lightbox"><div class="patent-lightbox-controls"><div class="patent-lightbox-rotate-controls"><div class="patent-lightbox-rotation-text">旋转</div><div class="rotate-icon rotate-ccw-icon"></div><div class="rotate-icon rotate-cw-icon"></div></div><div class="patent-lightbox-index-counter"></div><a class="patent-lightbox-fullsize-link" target="_blank">原始图片</a><div class="patent-drawings-control patent-drawings-next"><img class="patent-drawings-button-img"src="/googlebooks/images/kennedy/page_right.png" alt="Next page"width="21" height="21" /></div><div class="patent-drawings-control patent-drawings-prev"><img class="patent-drawings-button-img"src="/googlebooks/images/kennedy/page_left.png" alt="Previous page"width="21" height="21" /></div></div><div class="modal-dialog-content"><div class="patent-lightbox-image-holder"><div class="patent-lightbox-placeholder"></div></div></div></div><script>_OC_initPatentsAtb({image_not_available_html: " 未提供图片。\x3ca href\x3d//docs.google.com/viewer?url\x3dpatentimages.storage.googleapis.com/pdfs/09a6baa39dea3ded99b8/CN102323894A.pdf\x3e查看 PDF\x3c/a\x3e"});</script></div></div></div></div></div><script>(function() {var href = window.location.href;if (href.indexOf('?') !== -1) {var parameters = href.split('?')[1].split('&');for (var i = 0; i < parameters.length; i++) {var param = parameters[i].split('=');if (param[0] == 'focus') {var elem = document.getElementById(param[1]);if (elem) {elem.focus();}}}}})();</script><script>_OC_addFlags({LockSrc:"/books/javascript/lock_5115ea495017d9115e613207d3810e5a.js", Host:"https://www.google.com/", IsBooksRentalEnabled:1, IsBrowsingHistoryEnabled:1, IsWebReaderSvgEnabled:0, IsImageModeNotesEnabled:1, IsOfflineBubbleEnabled:1, IsFutureOnSaleVolumesEnabled:1, IsBooksUnifiedLeftNavEnabled:1, IsMobileRequest:0, IsZipitFolderCollectionEnabled:1, IsAdsDisabled:0, IsEmbeddedMediaEnabled:1, IsImageModeAnnotationsEnabled:1, IsMyLibraryGooglePlusEnabled:1, IsImagePageProviderEnabled:1, IsBookcardListPriceSmall:0, IsInternalUser:0, IsBooksShareButtonEnabled:0, IsDisabledRandomBookshelves:0});_OC_Run({"enable_p13n":false,"is_cobrand":false,"sign_in_url":"https://www.google.com/accounts/Login?service=\u0026continue=https://www.google.com/patents%3Fcl%3Dzh%26hl%3Dzh-CN\u0026hl=zh-CN"}, {"volume_id":"","is_ebook":true,"volumeresult":{"has_flowing_text":false,"has_scanned_text":true,"can_download_pdf":false,"can_download_epub":false,"is_pdf_drm_enabled":false,"is_epub_drm_enabled":false,"download_pdf_url":"https://www.google.com/patents/download/%E4%BC%81%E4%B8%9A%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8%E9%97%B4%E5%AE%9E%E7%8E%B0%E9%9D%9E%E9%98%BB%E5%A1%9E.pdf?id=XOaEBwABERAJ\u0026hl=zh-CN\u0026output=pdf\u0026sig=ACfU3U1vca8JYFv3Y23O4thfvuK1bBwkig"},"sample_url":"https://www.google.com/patents/reader?id=XOaEBwABERAJ\u0026hl=zh-CN\u0026printsec=frontcover\u0026output=reader\u0026source=gbs_atb_hover","is_browsable":true,"is_public_domain":true}, {});</script><div id="footer_table" style="font-size:83%;text-align:center;position:relative;top:20px;height:4.5em;margin-top:2em"><div style="margin-bottom:8px"><a href="https://www.google.com/search?hl=zh-CN"><nobr>Google&nbsp;首页</nobr></a> - <a href="//www.google.com/patents/sitemap/"><nobr>站点地图</nobr></a> - <a href="http://www.google.com/googlebooks/uspto.html"><nobr>美国专利商标局 (USPTO) 专利信息批量下载</nobr></a> - <a href="/intl/zh-CN/privacy/"><nobr>隐私权政策</nobr></a> - <a href="/intl/zh-CN/policies/terms/"><nobr>服务条款</nobr></a> - <a href="https://support.google.com/faqs/answer/2539193?hl=zh-CN"><nobr> 关于 Google 专利</nobr></a> - <a href="//www.google.com/tools/feedback/intl/zh-CN/error.html" onclick="try{_OC_startFeedback({productId: '72792',locale: 'zh-CN'});return false;}catch(e){}"><nobr>发送反馈</nobr></a></div></div> <script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script><script type="text/javascript">var pageTracker = _gat._getTracker("UA-27188110-1");pageTracker._setCookiePath("/patents/");pageTracker._trackPageview();</script> </body></html>