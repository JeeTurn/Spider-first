<!DOCTYPE html><html><head><title>专利 CN101996091A - 实现支持多种流程运行的图形执行虚拟机系统及其方法 -  Google 专利</title><script>(function(){(function(){function e(a){this.t={};this.tick=function(a,c,b){var d=void 0!=b?b:(new Date).getTime();this.t[a]=[d,c];if(void 0==b)try{window.console.timeStamp("CSI/"+a)}catch(e){}};this.tick("start",null,a)}var a;window.performance&&(a=window.performance.timing);var f=a?new e(a.responseStart):new e;window.jstiming={Timer:e,load:f};if(a){var c=a.navigationStart,d=a.responseStart;0<c&&d>=c&&(window.jstiming.srt=d-c)}if(a){var b=window.jstiming.load;0<c&&d>=c&&(b.tick("_wtsrt",void 0,c),b.tick("wtsrt_",
"_wtsrt",d),b.tick("tbsd_","wtsrt_"))}try{a=null,window.chrome&&window.chrome.csi&&(a=Math.floor(window.chrome.csi().pageT),b&&0<c&&(b.tick("_tbnd",void 0,window.chrome.csi().startE),b.tick("tbnd_","_tbnd",c))),null==a&&window.gtbExternal&&(a=window.gtbExternal.pageT()),null==a&&window.external&&(a=window.external.pageT,b&&0<c&&(b.tick("_tbnd",void 0,window.external.startE),b.tick("tbnd_","_tbnd",c))),a&&(window.jstiming.pt=a)}catch(g){}})();})();
</script><link rel="stylesheet" href="/patents/css/_50a6672b5f82ffbd39b7a9e87fd4594c/kl_intl_patents_bundle.css" type="text/css" /><script src="/books/javascript/atb_50a6672b5f82ffbd39b7a9e87fd4594c__zh_cn.js"></script><script>function googleTranslateElementInit() {new google.translate.TranslateElement({pageLanguage: "zh",gaTrack: true,gaId: "UA-27188110-1",multilanguagePage: true});}</script><script src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script><meta name="DC.type" content="Patent"><meta name="DC.title" content="实现支持多种流程运行的图形执行虚拟机系统及其方法"><meta name="DC.contributor" content="刘航" scheme="inventor"><meta name="DC.contributor" content="上海普元信息技术股份有限公司" scheme="assignee"><meta name="DC.date" content="2010-11-4" scheme="dateSubmitted"><meta name="DC.description" content="本发明涉及一种实现支持多种流程运行的图形执行虚拟机系统，其中包括外观控制器、上下文容器、节点行为注册器、核心调度器和单元调度器，核心调度器分别与外观控制器和上下文容器连接，单元调度器分别与上下文容器、节点行为注册器、核心调度器连接。本发明还涉及一种基于该系统实现支持多种流程运行的图形执行虚拟机的方法。采用该种实现支持多种流程运行的图形执行虚拟机系统及方法，有助于快速开发出稳定可靠的流程引擎产品，提高了软件重用度，节省了工作量，降低了模块耦合度，提高并行开发能力，提高了流程引擎的扩展性，有效避免了少量变动引起流程引擎的不稳定，提高了流程引擎的稳定性和易维护性，降低了维护成本，适用范围较为广泛。"><meta name="DC.date" content="2011-3-30"><meta name="DC.relation" content="CN:101277304:A" scheme="references"><meta name="DC.relation" content="US:20080232690:A1" scheme="references"><meta name="citation_reference" content="苏阳等: &quot;J2EE工作流的交互性研究与实现&quot;, 《计算机技术与发展》, vol. 18, no. 6, 30 June 2008 (2008-06-30), pages 86 - 89"><meta name="citation_reference" content="荣洁: &quot;《JBPM4的流程虚拟机》&quot;, 《程序员》, 31 August 2009 (2009-08-31), pages 101 - 104"><meta name="citation_patent_publication_number" content="CN:101996091:A"><meta name="citation_patent_application_number" content="CN:201010533222"><link rel="canonical" href="https://www.google.com/patents/CN101996091A?cl=zh"/><meta property="og:url" content="https://www.google.com/patents/CN101996091A?cl=zh"/><meta name="title" content="专利 CN101996091A - 实现支持多种流程运行的图形执行虚拟机系统及其方法"/><meta name="description" content="本发明涉及一种实现支持多种流程运行的图形执行虚拟机系统，其中包括外观控制器、上下文容器、节点行为注册器、核心调度器和单元调度器，核心调度器分别与外观控制器和上下文容器连接，单元调度器分别与上下文容器、节点行为注册器、核心调度器连接。本发明还涉及一种基于该系统实现支持多种流程运行的图形执行虚拟机的方法。采用该种实现支持多种流程运行的图形执行虚拟机系统及方法，有助于快速开发出稳定可靠的流程引擎产品，提高了软件重用度，节省了工作量，降低了模块耦合度，提高并行开发能力，提高了流程引擎的扩展性，有效避免了少量变动引起流程引擎的不稳定，提高了流程引擎的稳定性和易维护性，降低了维护成本，适用范围较为广泛。"/><meta property="og:title" content="专利 CN101996091A - 实现支持多种流程运行的图形执行虚拟机系统及其方法"/><meta property="og:type" content="book"/><meta property="og:site_name" content="Google Books"/><meta property="og:image" content="https://www.google.com/patents?id=&amp;printsec=frontcover&amp;img=1&amp;zoom=1"/><link rel="image_src" href="https://www.google.com/patents?id=&amp;printsec=frontcover&amp;img=1&amp;zoom=1"/><script>if (window['_OC_timingAction']) {window['_OC_timingAction']('patents_refpage');}</script><style>#gbar,#guser{font-size:13px;padding-top:1px !important;}#gbar{height:22px}#guser{padding-bottom:7px !important;text-align:right}.gbh,.gbd{border-top:1px solid #c9d7f1;font-size:1px}.gbh{height:0;position:absolute;top:24px;width:100%}@media all{.gb1{height:22px;margin-right:.5em;vertical-align:top}#gbar{float:left}}a.gb1,a.gb4{text-decoration:underline !important}a.gb1,a.gb4{color:#00c !important}.gbi .gb4{color:#dd8e27 !important}.gbf .gb4{color:#900 !important}

#gbar { padding:.3em .6em !important;}</style></head><body ><div id=gbar><nobr><a class=gb1 href="https://www.google.com/search?cl=zh&hl=zh-CN&sa=N&tab=tw">搜索</a> <a class=gb1 href="https://www.google.com/search?cl=zh&hl=zh-CN&tbm=isch&source=og&sa=N&tab=ti">图片</a> <a class=gb1 href="https://maps.google.com/maps?cl=zh&hl=zh-CN&sa=N&tab=tl">地图</a> <a class=gb1 href="https://play.google.com/?cl=zh&hl=zh-CN&sa=N&tab=t8">Play</a> <a class=gb1 href="https://www.youtube.com/results?cl=zh&hl=zh-CN&sa=N&tab=t1">YouTube</a> <a class=gb1 href="https://news.google.com/nwshp?hl=zh-CN&tab=tn">新闻</a> <a class=gb1 href="https://mail.google.com/mail/?tab=tm">Gmail</a> <a class=gb1 href="https://drive.google.com/?tab=to">云端硬盘</a> <a class=gb1 style="text-decoration:none" href="https://www.google.com/intl/zh-CN/options/"><u>更多</u> &raquo;</a></nobr></div><div id=guser width=100%><nobr><span id=gbn class=gbi></span><span id=gbf class=gbf></span><span id=gbe></span><a target=_top id=gb_70 href="https://www.google.com/accounts/Login?service=&continue=https://www.google.com/patents%3Fcl%3Dzh%26hl%3Dzh-CN&hl=zh-CN" class=gb4>登录</a></nobr></div><div class=gbh style=left:0></div><div class=gbh style=right:0></div><div role="alert" style="position: absolute; left: 0; right: 0;"><a href="https://www.google.com/patents/CN101996091A?cl=zh&amp;hl=zh-CN&amp;output=html_text" title="屏幕阅读器用户请注意：点击此链接可进入无障碍模式。阅读器在无障碍模式下具有同样的基本功能，但可让用户获得更好的体验。"><img border="0" src="//www.google.com/images/cleardot.gif"alt="屏幕阅读器用户请注意：点击此链接可进入无障碍模式。阅读器在无障碍模式下具有同样的基本功能，但可让用户获得更好的体验。"></a></div><div class="kd-appbar"><h2 class="kd-appname"><a href="/patents?hl=zh-CN"> 专利</a></h2><div class="kd-buttonbar left" id="left-toolbar-buttons"><a id="appbar-write-review-link" href=""></a><a id="appbar-view-print-sample-link" href=""></a><a id="appbar-view-ebook-sample-link" href=""></a><a id="appbar-patents-prior-art-finder-link" href="https://www.google.com/patents/related/CN101996091A"></a><a id="appbar-patents-discuss-this-link" href="https://www.google.com/url?id=HchyBwABERAJ&amp;q=http://patents.stackexchange.com/redirect/google-patents%3Fpublication%3DCN101996091A&amp;usg=AFQjCNGT9zS_avuAbaoACA1x5gHZs7CoAA" data-is-grant="false"></a><a id="appbar-read-patent-link" href="//docs.google.com/viewer?url=patentimages.storage.googleapis.com/pdfs/2b8e2734468d3946fdc1/CN101996091A.pdf"></a><a id="appbar-download-pdf-link" href="//patentimages.storage.googleapis.com/pdfs/2b8e2734468d3946fdc1/CN101996091A.pdf"></a><a class="appbar-content-language-link" data-selected="true" data-label="中文" href="/patents/CN101996091A?cl=zh&amp;hl=zh-CN"></a><a class="appbar-content-language-link" data-label="英语" href="/patents/CN101996091A?cl=en&amp;hl=zh-CN"></a><a class="appbar-application-grant-link" data-selected="true" data-label="申请" href="/patents/CN101996091A?hl=zh-CN&amp;cl=zh"></a><a class="appbar-application-grant-link" data-label="授权" href="/patents/CN101996091B?hl=zh-CN&amp;cl=zh"></a></div><div class="kd-buttonbar right" id="right-toolbar-buttons"></div></div><div id="books-microdata" itemscope=""itemtype="http://schema.org/Book"itemid="https://www.google.com/patents/CN101996091A?cl=zh" style="display:none"><span itemprop="description">本发明涉及一种实现支持多种流程运行的图形执行虚拟机系统，其中包括外观控制器、上下文容器、节点行为注册器、核心调度器和单元调度器，核心调度器分别与外观控制器和上下文容器连接，单元调度器分别与上下文容器、...</span><span itemprop="url">https://www.google.com/patents/CN101996091A?cl=zh&amp;utm_source=gb-gplus-share</span><span class="main-title" itemprop="name">专利 CN101996091A - 实现支持多种流程运行的图形执行虚拟机系统及其方法</span><img itemprop="image" src="https://www.google.com/patents?id=&amp;printsec=frontcover&amp;img=1&amp;zoom=1"alt="专利 CN101996091A - 实现支持多种流程运行的图形执行虚拟机系统及其方法" title="专利 CN101996091A - 实现支持多种流程运行的图形执行虚拟机系统及其方法"></div><div style="display: none"><ol id="ofe-gear-menu-contents" class="gbmcc"><li class="gbe gbmtc"><a class="gbmt goog-menuitem-content" id="" href="https://www.google.com/advanced_patent_search?hl=zh-CN"> 高级专利搜索</a></li></ol></div><div id="volume-main"><div id="volume-center"><div class=vertical_module_list_row><div id=intl_patents class=about_content><div id=intl_patents_v><table class="patent-bibdata patent-drawings-missing"><tr><td class="patent-bibdata-heading"> 公开号</td><td class="single-patent-bibdata">CN101996091 A</td></tr><tr><td class="patent-bibdata-heading">发布类型</td><td class="single-patent-bibdata">申请</td></tr><tr><td class="patent-bibdata-heading"> 专利申请号</td><td class="single-patent-bibdata">CN 201010533222</td></tr><tr><td class="patent-bibdata-heading">公开日</td><td class="single-patent-bibdata">2011年3月30日</td></tr><tr><td class="patent-bibdata-heading"> 申请日期</td><td class="single-patent-bibdata">2010年11月4日</td></tr><tr><td class="patent-bibdata-heading"> 优先权日<span class="patent-tooltip-anchor patent-question-icon"data-tooltip-text="优先日期属于假设性质，不具任何法律效力。Google 对于所列日期的正确性并没有进行法律分析，也不作任何陈述。"></span></td><td class="single-patent-bibdata">2010年11月4日</td></tr><tr class="patent-bibdata-list-row "><td class="patent-bibdata-heading">公告号</td><td><span class="patent-bibdata-value-list"><span class="patent-bibdata-value"><a href="/patents/CN101996091B?hl=zh-CN&amp;cl=zh">CN101996091B</a></span></span></td></tr><tr class="patent-bibdata-list-row alternate-patent-number"><td class="patent-bibdata-heading"> 公开号</td><td><span class="patent-bibdata-value-list"><span class="patent-bibdata-value">201010533222.1, </span><span class="patent-bibdata-value">CN 101996091 A, </span><span class="patent-bibdata-value">CN 101996091A, </span><span class="patent-bibdata-value">CN 201010533222, </span><span class="patent-bibdata-value">CN-A-101996091, </span><span class="patent-bibdata-value">CN101996091 A, </span><span class="patent-bibdata-value">CN101996091A, </span><span class="patent-bibdata-value">CN201010533222, </span><span class="patent-bibdata-value">CN201010533222.1</span></span></td></tr><tr class="patent-bibdata-list-row "><td class="patent-bibdata-heading"> 发明者</td><td><span class="patent-bibdata-value-list"><span class="patent-bibdata-value"><a href="https://www.google.com/search?tbo=p&amp;tbm=pts&amp;hl=en&amp;q=ininventor:%22%E5%88%98%E8%88%AA%22">刘航</a></span></span></td></tr><tr class="patent-bibdata-list-row "><td class="patent-bibdata-heading"> 申请人</td><td><span class="patent-bibdata-value-list"><span class="patent-bibdata-value"><a href="https://www.google.com/search?tbo=p&amp;tbm=pts&amp;hl=en&amp;q=inassignee:%22%E4%B8%8A%E6%B5%B7%E6%99%AE%E5%85%83%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%22">上海普元信息技术股份有限公司</a></span></span></td></tr><tr class="patent-bibdata-list-row "><td class="patent-bibdata-heading">导出引文</td><td><span class="patent-bibdata-value-list"><span class="patent-bibdata-value"><a href="/patents/CN101996091A.bibtex?cl=zh">BiBTeX</a>, </span><span class="patent-bibdata-value"><a href="/patents/CN101996091A.enw?cl=zh">EndNote</a>, </span><span class="patent-bibdata-value"><a href="/patents/CN101996091A.ris?cl=zh">RefMan</a></span></span></td></tr><tr class="patent-internal-links"><td colspan=2><span class="patent-bibdata-value"><a href="#backward-citations">专利引用</a> (2),</span> <span class="patent-bibdata-value"><a href="#npl-citations">非专利引用</a> (2),</span> <span class="patent-bibdata-value"><a href="#forward-citations"> 被以下专利引用</a> (1),</span> <span class="patent-bibdata-value"><a href="#classifications">分类</a> (1),</span> <span class="patent-bibdata-value"><a href="#legal-events">法律事件</a> (4)</span> </td></tr><tr><td colspan=2 class="patent-bibdata-external-link-spacer-top"></td></tr><tr class="patent-bibdata-external-link-spacer-bottom"></tr><tr><td colspan=2><span class="patent-bibdata-heading">外部链接:&nbsp;</span><span><span class="patent-bibdata-value"><a href="https://www.google.com/url?id=HchyBwABERAJ&amp;q=http://211.157.104.87:8080/sipo/zljs/hyjs-yx-new.jsp%3Frecid%3D201010533222&amp;usg=AFQjCNE3fQltu9AG8RQdioBGTfVTm9PrJg"> 中国国家知识产权局</a>, </span><span class="patent-bibdata-value"><a href="https://www.google.com/url?id=HchyBwABERAJ&amp;q=http://worldwide.espacenet.com/publicationDetails/biblio%3FCC%3DCN%26NR%3D101996091A%26KC%3DA%26FT%3DD&amp;usg=AFQjCNEdtbhbTiL7nIK9iY1gQUPgNUNcBA"> 欧洲专利数据库 (Espacenet)</a></span></span></td></tr><tr class="patent-bibdata-group-spacer"></tr></table><div class="number-and-title"><span class="patent-title"><invention-title mxw-id="PT102097711" lang="ZH" load-source="patent-office">实现支持多种流程运行的图形执行虚拟机系统及其方法</invention-title>
      </span><br><span class="patent-number">CN 101996091 A</span></div><div class="patent-section patent-abstract-section"><div class="patent-section-header"><span class="patent-section-title"> 摘要</span></div><div class="patent-text"><abstract mxw-id="PA83935011" lang="ZH" load-source="patent-office">
    <div class="abstract">本发明涉及一种实现支持多种流程运行的图形执行虚拟机系统，其中包括外观控制器、上下文容器、节点行为注册器、核心调度器和单元调度器，核心调度器分别与外观控制器和上下文容器连接，单元调度器分别与上下文容器、节点行为注册器、核心调度器连接。本发明还涉及一种基于该系统实现支持多种流程运行的图形执行虚拟机的方法。采用该种实现支持多种流程运行的图形执行虚拟机系统及方法，有助于快速开发出稳定可靠的流程引擎产品，提高了软件重用度，节省了工作量，降低了模块耦合度，提高并行开发能力，提高了流程引擎的扩展性，有效避免了少量变动引起流程引擎的不稳定，提高了流程引擎的稳定性和易维护性，降低了维护成本，适用范围较为广泛。</div>
  </abstract>
  </div></div><div class="patent-section patent-claims-section"><div class="patent-section-header"><span class="patent-section-title">权利要求<span class="patent-section-count">(17)</span></span></div><div class="patent-text"><ol mxw-id="PCLM35389578" lang="ZH" load-source="patent-office" class="claims">
    <li class="claim"> <div num="1" class="claim">
      <div class="claim-text">一种实现支持多种流程运行的图形执行虚拟机系统，其特征在于，所述的系统包括：外观控制器，负责图形执行虚拟机的启动、加载和停止，并接收外部请求的响应，调用其他部件处理请求；上下文容器，维护节点行为处理过程中可以访问的上下文，确保用户获取到当前的执行单元、以及当前的执行队列；节点行为注册器，维护一个不同类型节点行为的注册表；核心调度器，分别与所述的外观控制器和上下文容器相连接，对所述的外观控制器传递过来的每一个请求分配一个线程进行调度；单元调度器，分别与所述的上下文容器、节点行为注册器、核心调度器相连接，接收所述的核心调度器的请求，进行一次执行，其中每一次执行，先从所述的节点行为注册器中获取对应的节点的行为实现类，再从所述的上下文容器中获取对应的上下文，并传入上下文调用节点行为的对应方法。</div>
    </div>
    </li> <li class="claim-dependent"> <div num="2" class="claim">
      <div class="claim-text">2.根据权利要求1所述的实现支持多种流程运行的图形执行虚拟机系统，其特征在 于，所述的核心调度器包括：核心调度线程池，用于容纳该核心调度器所分配的线程；执行队列处理器，分别与所述的核心调度线程池和单元调度器相连接，对应一个线程 的实现，从执行上下文获取执行队列，并依次处理该执行队列中的每一个执行单元，对于每 一个执行单元，该执行队列处理器调用所述的单元调度器进行处理。</div>
    </div>
    </li> <li class="claim-dependent"> <div num="3" class="claim">
      <div class="claim-text">3.	一种基于权利要求1所述的系统实现支持多种流程运行的图形执行虚拟机的方法， 其特征在于，所述的方法包括图形执行虚拟机启动操作、图形执行虚拟机请求处理操作和 图形执行虚拟机停止操作，所述的图形执行虚拟机启动操作，包括以下步骤：(11)所述的外观控制器检查系统引擎的状态，并对系统引擎的启动过程进行加锁；(12)所述的外观控制器创建节点行为注册器，并调用节点注册器的初始化；(13)所述的外观控制器创建上下文容器；(14)所述的外观控制器创建单元调度器；(15)所述的外观控制器创建核心调度器，并调用核心调度器的初始化；(16)解锁并标记该图形执行虚拟机启动完成，系统可接收外部请求；所述的图形执行虚拟机请求处理操作，包括以下步骤：(21)所述的外观控制器从外部请求中获取IGraph参数、INode参数、处理阶段参数，并 组装成指令对象；(22)所述的外观控制器调用该核心调度器对该外部请求进行处理；所述的图形执行虚拟机停止操作，包括以下步骤：(31)校验系统引擎的状态，对该系统引擎的停止过程进行加锁；(32)所述的外观控制器调用该核心调度器的停止动作；(33)取消所述的节点行为注册器中各个已注册的节点行为；(34)所述的外观控制器调用清空所述的上下文容器中当前的上下文；(35)标记该系统引擎状态为已停止。</div>
    </div>
    </li> <li class="claim-dependent"> <div num="4" class="claim">
      <div class="claim-text">4.根据权利要求3所述的实现支持多种流程运行的图形执行虚拟机的方法，其特征在于，所述的外观控制器创建节点行为注册器并调用节点注册器的初始化，包括以下步骤：(121)所述的外观控制器创建节点行为注册器对象；(122)所述的节点行为注册器创建节点行为缓存映射结构；(123)所述的节点行为注册器从配置文件获取各类型节点行为实现类，创建类的实例， 并加载到缓存映射结构当中。</div>
    </div>
    </li> <li class="claim-dependent"> <div num="5" class="claim">
      <div class="claim-text">5.根据权利要求3所述的实现支持多种流程运行的图形执行虚拟机的方法，其特征在 于，所述的外观控制器创建核心调度器并调用核心调度器的初始化，包括以下步骤：(151)所述的外观控制器创建所述的核心调度器；(152)所述的核心调度器创建核心调度线程池；(153)所述的核心调度器从该外观控制器获取并设置好对应的上下文容器；(154)所述的核心调度器启动对应的核心调度线程池，准备好接收外部请求。</div>
    </div>
    </li> <li class="claim-dependent"> <div num="6" class="claim">
      <div class="claim-text">6.根据权利要求3所述的实现支持多种流程运行的图形执行虚拟机的方法，其特征在 于，所述的外观控制器调用该核心调度器对该外部请求进行处理，包括以下步骤：(221)所述的核心调度器调用所述的上下文容器的创建方法，创建请求上下文；(222)所述的核心调度器把上下文编号ID传递给核心调度线程池，所述的核心调度线 程池选择一个线程执行该外部请求。</div>
    </div>
    </li> <li class="claim-dependent"> <div num="7" class="claim">
      <div class="claim-text">7.根据权利要求6所述的实现支持多种流程运行的图形执行虚拟机的方法，其特征在 于，所述的核心调度线程池中被选择的线程为处理线程，所述的线程的执行该外部请求，包 括以下步骤：(41)所述的处理线程从所述的上下文容器获取到对应的上下文，作为当前上下文；(42)所述的处理线程判断当前上下文是否还有更多的指令；(43)如果是，则调用所述的单元调度器的处理过程，并传入上下文ID	；(44)如果否，则对该外部请求的处理已经完成，并退出；(45)重复上述步骤（42)。</div>
    </div>
    </li> <li class="claim-dependent"> <div num="8" class="claim">
      <div class="claim-text">8.根据权利要求7所述的实现支持多种流程运行的图形执行虚拟机的方法，其特征在 于，所述的调用单元调度器的处理过程并传入上下文ID，包括以下步骤：(431)所述的单元调度器从该上下文容器中获取到对应的上下文；(432)所述的单元调度器从步骤（431)中获取到的上下文中获取下一个指令，作为当 前指令；(433)所述的单元调度器判断当前的指令的类型；(434)如果该可执行请求是Perform类型，则所述的单元调度器运行自己的执行过程；(435)如果该可执行请求是Transmit类型，则所述的单元调度器执行自己的传送过程。</div>
    </div>
    </li> <li class="claim-dependent"> <div num="9" class="claim">
      <div class="claim-text">9.根据权利要求8所述的实现支持多种流程运行的图形执行虚拟机的方法，其特征在 于，所述的单元调度器运行自己的执行过程，包括以下步骤：(4341)所述的单元调度器从节点注册器获取到适合于当前处理指令的节点行为实现 对象，作为当前节点行为；(4342)所述的单元调度器调用当前节点行为对象的执行前方法，触发对应的用户定制 行为，并传入当前上下文；(4343)所述的单元调度器调用当前节点行为对象的执行方法，触发用户定义的节点动 作，并传入当前上下文；(4344)所述的单元调度器调用当前节点行为对象的执行后行为，触发对应的用户定制 行为，并传入当前上下文；(4345)所述的单元调度器获取执行上下文的“是否继续”属性；(4346)如果该属性为“不继续”，则直接退出，并返回步骤（45)；(4347)如果该属性为“继续”，则调用当前节点行为的获取后继方法，获取到后续节点。(4348)所述的单元调度器记录当前可执行请求处理完成的日志。</div>
    </div>
    </li> <li class="claim-dependent"> <div num="10" class="claim">
      <div class="claim-text">10.根据权利要求9所述的实现支持多种流程运行的图形执行虚拟机的方法，其特征 在于，所述的步骤（4347)之后还包括以下处理步骤：(a)循环为获取到的后续节点产生迁移类型的指令，并追加到当前上下文的执行队列当中。</div>
    </div>
    </li> <li class="claim-dependent"> <div num="11" class="claim">
      <div class="claim-text">11.根据权利要求8所述的实现支持多种流程运行的图形执行虚拟机的方法，其特征 在于，所述的单元调度器执行自己的传送过程，包括以下步骤：(4351)所述的单元调度器从节点注册器获取适合于当前处理指令的节点行为实现对 象，作为当前节点行为；(4352)所述的单元调度器通过调用当前节点行为对象的迁移前方法，触发对应的用户 定制行为；(4353)所述的单元调度器通过调用当前节点行为对象迁移传送动作，获取到后续节点 列表，并判断是否能够获取到；(4354)如果否，则当前节点是图中最后一个节点，也即结束节点，查找该节点的父节 点，且该单元调度器为父节点产生一个新的指令，加入到当前上下文的执行队列当中，指定 执行阶段为结束；(4355)如果是，则当前节点是一个中间节点，所述的单元调度器顺次为后续节点创建 新的指令，加入到当前上下文的执行队列当中；(4356)所述的单元调度器记录当前指令处理完成的日志。</div>
    </div>
    </li> <li class="claim-dependent"> <div num="12" class="claim">
      <div class="claim-text">12.根据权利要求8所述的实现支持多种流程运行的图形执行虚拟机的方法，其特征 在于，所述的节点行为为分阶段节点行为，所述的单元调度器运行自己的执行过程，包括以 下步骤：(51)所述的分阶段节点行为从当前执行上下文中获取到当前执行单元，并获取到执行 阶段信息；(52)如果执行阶段是开始，则进行开始阶段操作处理；(53)如果执行阶段是指令，则进行指令阶段操作处理；(54)如果执行阶段是结束，则进行结束阶段操作处理。</div>
    </div>
    </li> <li class="claim-dependent"> <div num="13" class="claim">
      <div class="claim-text">13.根据权利要求12所述的实现支持多种流程运行的图形执行虚拟机的方法，其特征 在于，所述的进行开始阶段操作处理，包括以下步骤：(521)所述的分阶段节点行为设定指令上下文ExecutionContext的继续运行属性为真；(522)所述的分阶段节点行为调用节点开始动作；(523)所述的单元调度器判断是否继续；(524)如果是，则设定下一个命令为执行，并继续回到开始的判断；如果否，则退出。</div>
    </div>
    </li> <li class="claim-dependent"> <div num="14" class="claim">
      <div class="claim-text">14.根据权利要求12所述的实现支持多种流程运行的图形执行虚拟机的方法，其特征 在于，所述的进行指令阶段操作处理，包括以下步骤：(531)所述的分阶段节点行为设定指令上下文ExecutionContext继续运行属性为真；(532)所述的分阶段节点行为调用节点执行动作；(533)所述的单元调度器判断是否继续；(534)如果是，则设定下一个命令为结束，继续回到开始的判断；如果否，则退出。</div>
    </div>
    </li> <li class="claim-dependent"> <div num="15" class="claim">
      <div class="claim-text">15.根据权利要求12所述的实现支持多种流程运行的图形执行虚拟机的方法，其特征 在于，所述的结束阶段操作处理，包括以下步骤：(541)所述的分阶段节点行为设定指令上下文ExecutionContext继续运行属性为真；(542)所述的分阶段节点行为调用节点完成动作；(543)结束阶段处理完毕，退出执行。</div>
    </div>
    </li> <li class="claim-dependent"> <div num="16" class="claim">
      <div class="claim-text">16.根据权利要求12所述的实现支持多种流程运行的图形执行虚拟机的方法，其特征 在于，所述的节点行为为块节点行为，所述的块节点行为的父类为分阶段节点行为，所述的 单元调度器运行自己的执行过程，包括以下步骤：(61)所述的块节点行为调用分阶段节点行为的步骤（51)至（54)；(62)所述的块节点行为从当前执行上下文中获取到当前执行单元，并获取到执行阶段 fn息；(63)如果该执行阶段信息不是执行，则直接退出；(64)如果该执行阶段信息是执行，则所述的块节点行为获取已经设定的开始节点；(65)所述的块节点行为对获取到的开始节点创建新的执行单元指令；(66)所述的块节点行为把新创建的指令加入到当前执行上下文的执行队列当中，并完成。</div>
    </div>
    </li> <li class="claim-dependent"> <div num="17" class="claim">
      <div class="claim-text">17.根据权利要求3所述的实现支持多种流程运行的图形执行虚拟机的方法，其特征 在于，所述的外观控制器调用核心调度器的停止动作，包括以下步骤：(321)所述的核心调度器给核心调度线程池发送中断信号，停止各线程工作；(322)所述的核心调度器销毁该核心调度线程池对象。</div>
    </div>
  </li> </ol>
  </div></div><div class="patent-section patent-description-section"><div class="patent-section-header"><span class="patent-section-title"> 说明</span></div><div class="patent-text"><div mxw-id="PDES41201876" lang="ZH" load-source="patent-office" class="description">
    <p>实现支持多种流程运行的图形执行虚拟机系统及其方法</p>
    <p>技术领域</p>
    <p>[0001]	本发明涉及计算机软件领域，特别涉及支持以图形为基础的流程运行的基础设施 技术领域，具体是指一种实现支持多种流程运行的图形执行虚拟机系统及其方法。</p>
    <p>背景技术</p>
    <p>[0002]	随着现代社会科学技术的发展，计算机软件得到了越来越广泛的应用。早期的计 算机软件中的计算流程全部是使用代码编写的，相对而言，代码比较晦涩难懂，不便于维护 和业务重构，运营成本很高。随着计算机硬件的计算速度的快速提高以及计算机软件业的 飞速发展，可视化的流程在计算流程中发挥着越来越重要的作用，替代了一部分以前通过 代码才能实现的业务流转机制，流程可以大致分为以下几类：</p>
    <p>[0003]	(1)工作流（WorkfloW)</p>
    <p>[0004]	工作流是最早得到广泛应用的流程形式，目前在OA领域以及应用内的流程控制 中在继续发挥着主导作用。工作流管理联盟（WfMC)组织定义了完整的工作流体系结构，人 们通过流程定义工具以图形化方式定义流程；通过流程引擎运转来推进和协调企业不同岗 位的工作，并可以和企业的自动业务逻辑进行交互。</p>
    <p>[0005]	(2)业务流程管理（BPM)</p>
    <p>[0006]	在业务流程重组（BPR)过程中，人们借助BPM工具来搭建企业流程。与传统工作 流相比，BPM具备更多面向业务方面的能力，同时也具备更多的应用集成能力。BPM侧重点 不在进行应用内的人工工作协调，它强调系统之间的交互，强调流程管理带来的投资回报 (ROI)。BPM 相关协议包含 BPMN、XPDL, BPEL, WSFL 等。</p>
    <p>[0007]	(3)页面流（PageFlow)</p>
    <p>[0008]	目前基于B/S结构的企业应用大部分采用MVC的方式来开发，页面流是作为控制 层经常被采用的实现方式之一。页面流中的活动包括页面和自动业务逻辑，页面流控制机 制协调用户在应用中多个页面的切换。</p>
    <p>[0009]	(4)业务流、规则流等</p>
    <p>[0010]	业务流以及规则流是对一次计算的流程化展示。业务流把执行中的多个活动按照 一定的顺序串联起来，产生特定的业务操作结果；规则流通过比较一系列的规则变量，得到 一个判定结果。</p>
    <p>[0011]	目前，已经有不少流程产品可以用来支撑各种类别流程的建模和执行，给业务用 户和技术开发用户提供了不少便利。但总体而言，流程应用的规模还不大，流程在企业活动 中还有很大的发展空间。</p>
    <p>[0012]	流程引擎是流程应用的核心功能，但是成功的流程引擎本身的研发一直是复杂 的、高难度的。这是因为流程引擎本身的研发涉及串行、选择、归并、循环等多种复杂的流程 模式的实现，还涉及各种类型流程环节相关的复杂的规则和算法，并且还要应对流程引擎 作为系统的核心调度机制所必须具备的高可靠性要求。流程引擎研发中实际困难具体体 现：[0013]	(1)由于流程引擎的各种调度机制之间高度耦合，所以往往是只有少量能力强的 工程师复可参与，难以实现多开发人员并行工作，开发周期长。</p>
    <p>[0014]	(2)流程引擎的功能修改困难，功能的扩展往往需要修改已有的功能，往往一点点 修改或者扩展就造成全局性的影响。</p>
    <p>[0015]	(3)由于逻辑复杂，源程序代码难以阅读和理解，代码移交困难。</p>
    <p>[0016]	总之，目前业界对于流程引擎的研发存在较大瓶颈，需要有一种更好机制来避免 流程引擎研发的问题，提高研发效率。</p>
    <p>发明内容</p>
    <p>[0017]	本发明的目的是克服了上述现有技术中的缺点，提供一种能够有效提高流程产品 的松耦合能力和可扩展能力、提高开发效率、增强系统稳定可靠性、适用范围较为广泛的实 现支持多种流程运行的图形执行虚拟机系统及其方法。</p>
    <p>[0018]	为了实现上述的目的，本发明的实现支持多种流程运行的图形执行虚拟机系统及 其方法如下：</p>
    <p>[0019]	该实现支持多种流程运行的图形执行虚拟机系统，其主要特点是，所述的系统包 括：</p>
    <p>[0020]	外观控制器，负责图形执行虚拟机的启动、加载和停止，并接收外部请求的响应， 调用其他部件处理请求；</p>
    <p>[0021]	上下文容器，维护节点行为处理过程中可以访问的上下文，确保用户获取到当前 的执行单元、以及当前的执行队列；</p>
    <p>[0022]	节点行为注册器，维护一个不同类型节点行为的注册表；</p>
    <p>[0023]	核心调度器，分别与所述的外观控制器和上下文容器相连接，对所述的外观控制 器传递过来的每一个请求分配一个线程进行调度；</p>
    <p>[0024]	单元调度器，分别与所述的上下文容器、节点行为注册器、核心调度器相连接，接 收所述的核心调度器的请求，进行一次执行。其中每一次执行，先从所述的节点行为注册器 中获取对应的节点的行为实现类，再从所述的上下文容器中获取对应的上下文，并传入上 下文调用节点行为的对应方法。</p>
    <p>[0025]	该实现支持多种流程运行的图形执行虚拟机系统中的核心调度器包括：</p>
    <p>[0026]	核心调度线程池，用于容纳该核心调度器所分配的线程；</p>
    <p>[0027]	执行队列处理器，分别与所述的核心调度线程池和单元调度器相连接，对应一个 线程的实现，从执行上下文获取执行队列，并依次处理该执行队列中的每一个执行单元，对 于每一个执行单元，该执行队列处理器调用所述的单元调度器进行处理。</p>
    <p>[0028]	该基于上述的系统实现支持多种流程运行的图形执行虚拟机的方法，其主要特点 是，所述的方法包括图形执行虚拟机启动操作、图形执行虚拟机请求处理操作和图形执行 虚拟机停止操作，所述的图形执行虚拟机启动操作，包括以下步骤：</p>
    <p>[0029]	(11)所述的外观控制器检查系统引擎的状态，并对系统引擎的启动过程进行加 锁；</p>
    <p>[0030]	(12)所述的外观控制器创建节点行为注册器，并调用节点注册器的初始化；</p>
    <p>[0031]	(13)所述的外观控制器创建上下文容器；[0032]	(14)所述的外观控制器创建单元调度器；</p>
    <p>[0033]	(15)所述的外观控制器创建核心调度器，并调用核心调度器的初始化；</p>
    <p>[0034]	(16)解锁并标记该图形执行虚拟机启动完成，系统可接收外部请求；</p>
    <p>[0035]	所述的图形执行虚拟机请求处理操作，包括以下步骤：</p>
    <p>[0036]	(21)所述的外观控制器从外部请求中获取IGraph参数、INode参数、处理阶段参 数，并组装成指令对象；</p>
    <p>[0037]	(22)所述的外观控制器调用该核心调度器对该外部请求进行处理；</p>
    <p>[0038]	所述的图形执行虚拟机停止操作，包括以下步骤：</p>
    <p>[0039]	(31)校验系统引擎的状态，对该系统引擎的停止过程进行加锁；</p>
    <p>[0040]	(32)所述的外观控制器调用该核心调度器的停止动作；</p>
    <p>[0041]	(33)取消所述的节点行为注册器中各个已注册的节点行为；</p>
    <p>[0042]	(34)所述的外观控制器调用清空所述的上下文容器中当前的上下文；</p>
    <p>[0043]	(35)标记该系统引擎状态为已停止。</p>
    <p>[0044]	该实现支持多种流程运行的图形执行虚拟机的方法中的外观控制器创建节点行 为注册器并调用节点注册器的初始化，包括以下步骤：</p>
    <p>[0045]	(121)所述的外观控制器创建节点行为注册器对象；</p>
    <p>[0046]	(122)所述的节点行为注册器创建节点行为缓存映射结构；</p>
    <p>[0047]	(123)所述的节点行为注册器从配置文件获取各类型节点行为实现类，创建类的 实例，并加载到缓存映射结构当中。</p>
    <p>[0048]	该实现支持多种流程运行的图形执行虚拟机的方法中的外观控制器创建核心调 度器并调用核心调度器的初始化，包括以下步骤：</p>
    <p>[0049]	(151)所述的外观控制器创建所述的核心调度器；</p>
    <p>[0050]	(152)所述的核心调度器创建核心调度线程池；</p>
    <p>[0051]	(153)所述的核心调度器从该外观控制器获取并设置好对应的上下文容器；</p>
    <p>[0052]	(154)所述的核心调度器启动对应的核心调度线程池，准备好接收外部请求。</p>
    <p>[0053]	该实现支持多种流程运行的图形执行虚拟机的方法中的外观控制器调用该核心 调度器对该外部请求进行处理，包括以下步骤：</p>
    <p>[0054]	(221)所述的核心调度器调用所述的上下文容器的创建方法，创建请求上下文；</p>
    <p>[0055]	(222)所述的核心调度器把上下文编号ID传递给核心调度线程池，所述的核心调 度线程池选择一个线程执行该外部请求。</p>
    <p>[0056]	该实现支持多种流程运行的图形执行虚拟机的方法中的核心调度线程池中被选 择的线程为处理线程，所述的线程的执行该外部请求，包括以下步骤：</p>
    <p>[0057]	(41)所述的处理线程从所述的上下文容器获取到对应的上下文，作为当前上下 文；</p>
    <p>[0058]	(42)所述的处理线程判断当前上下文是否还有更多的指令；</p>
    <p>[0059]	(43)如果是，则调用所述的单元调度器的处理过程，并传入上下文ID ；</p>
    <p>[0060]	(44)如果否，则对该外部请求的处理已经完成，并退出；</p>
    <p>[0061]	(45)重复上述步骤（42)。</p>
    <p>[0062]	该实现支持多种流程运行的图形执行虚拟机的方法中的调用单元调度器的处理过程并传入上下文ID，包括以下步骤：</p>
    <p>[0063]	(431)所述的单元调度器从该上下文容器中获取到对应的上下文；</p>
    <p>[0064]	(432)所述的单元调度器从步骤（431)中获取到的上下文中获取下一个指令，作 为当前指令；</p>
    <p>[0065]	(433)所述的单元调度器判断当前的指令的类型；</p>
    <p>[0066]	(434)如果该可执行请求是Perform类型，则所述的单元调度器运行自己的执行 过程；</p>
    <p>[0067]	(435)如果该可执行请求是Transmit类型，则所述的单元调度器执行自己的传送 过程。</p>
    <p>[0068]	该实现支持多种流程运行的图形执行虚拟机的方法中的单元调度器运行自己的 执行过程，包括以下步骤：</p>
    <p>[0069]	(4341)所述的单元调度器从节点注册器获取到适合于当前处理指令的节点行为 实现对象，作为当前节点行为；</p>
    <p>[0070]	(4342)所述的单元调度器调用当前节点行为对象的执行前方法，触发对应的用户 定制行为，并传入当前上下文；</p>
    <p>[0071]	(4343)所述的单元调度器调用当前节点行为对象的执行方法，触发用户定义的节 点动作，并传入当前上下文；</p>
    <p>[0072]	(4344)所述的单元调度器调用当前节点行为对象的执行后行为，触发对应的用户 定制行为，并传入当前上下文；</p>
    <p>[0073]	(4345)所述的单元调度器获取执行上下文的“是否继续”属性；</p>
    <p>[0074]	(4346)如果该属性为“不继续”，则直接退出，并返回步骤（45)；</p>
    <p>[0075]	(4347)如果该属性为“继续”，则调用当前节点行为的获取后继方法，获取到后续节点。</p>
    <p>[0076]	(4348)所述的单元调度器记录当前可执行请求处理完成的日志。</p>
    <p>[0077]	该实现支持多种流程运行的图形执行虚拟机的方法中的步骤（4347)之后还包括 以下处理步骤：</p>
    <p>[0078]	(a)循环为获取到的后续节点产生迁移类型的指令，并追加到当前上下文的执行 队列当中。</p>
    <p>[0079]	该实现支持多种流程运行的图形执行虚拟机的方法中的单元调度器执行自己的 传送过程，包括以下步骤：</p>
    <p>[0080]	(4351)所述的单元调度器从节点注册器获取适合于当前处理指令的节点行为实 现对象，作为当前节点行为；</p>
    <p>[0081]	(4352)所述的单元调度器通过调用当前节点行为对象的迁移前方法，触发对应的 用户定制行为；</p>
    <p>[0082]	(4353)所述的单元调度器通过调用当前节点行为对象迁移传送动作，获取到后续 节点列表，并判断是否能够获取到；</p>
    <p>[0083]	(4354)如果否，则当前节点是图中最后一个节点，也即结束节点，查找该节点的父 节点，且该单元调度器为父节点产生一个新的指令，加入到当前上下文的执行队列当中，指 定执行阶段为结束；[0084]	(4355)如果是，则当前节点是一个中间节点，所述的单元调度器顺次为后续节点 创建新的指令，加入到当前上下文的执行队列当中；</p>
    <p>[0085]	(4356)所述的单元调度器记录当前指令处理完成的日志。</p>
    <p>[0086]	该实现支持多种流程运行的图形执行虚拟机的方法中的节点行为为分阶段节点 行为，所述的单元调度器运行自己的执行过程，包括以下步骤：</p>
    <p>[0087]	(51)所述的分阶段节点行为从当前执行上下文中获取到当前执行单元，并获取到 执行阶段信息；</p>
    <p>[0088]	(52)如果执行阶段是开始，则进行开始阶段操作处理；</p>
    <p>[0089]	(53)如果执行阶段是指令，则进行指令阶段操作处理；</p>
    <p>[0090]	(54)如果执行阶段是结束，则进行结束阶段操作处理。</p>
    <p>[0091]	该实现支持多种流程运行的图形执行虚拟机的方法中的进行开始阶段操作处理， 包括以下步骤：</p>
    <p>[0092]	(521)所述的分阶段节点行为设定指令上下文ExecutionContext的继续运行属 性为真；</p>
    <p>[0093]	(522)所述的分阶段节点行为调用节点开始动作；</p>
    <p>[0094]	(523)所述的单元调度器判断是否继续；</p>
    <p>[0095]	(524)如果是，则设定下一个命令为执行，并继续回到开始的判断；如果否，则退</p>
    <p>出ο</p>
    <p>[0096]	该实现支持多种流程运行的图形执行虚拟机的方法中的进行指令阶段操作处理， 包括以下步骤：</p>
    <p>[0097]	(531)所述的分阶段节点行为设定指令上下文ExecutionContext继续运行属性 为真；</p>
    <p>[0098]	(532)所述的分阶段节点行为调用节点执行动作；</p>
    <p>[0099]	(533)所述的单元调度器判断是否继续；</p>
    <p>[0100]	(534)如果是，则设定下一个命令为结束，继续回到开始的判断；如果否，则退出。</p>
    <p>[0101]	该实现支持多种流程运行的图形执行虚拟机的方法中的结束阶段操作处理，包括 以下步骤：</p>
    <p>[0102]	(541)所述的分阶段节点行为设定指令上下文ExecutionContext继续运行属性 为真；</p>
    <p>[0103]	(542)所述的分阶段节点行为调用节点完成动作；</p>
    <p>[0104]	(543)结束阶段处理完毕，退出执行。</p>
    <p>[0105]	该实现支持多种流程运行的图形执行虚拟机的方法中的节点行为为块节点行为， 所述的块节点行为的父类为分阶段节点行为，所述的单元调度器运行自己的执行过程，包 括以下步骤：</p>
    <p>[0106]	(61)所述的块节点行为调用分阶段节点行为的步骤（51)至（54)；</p>
    <p>[0107]	(62)所述的块节点行为从当前执行上下文中获取到当前执行单元，并获取到执行 阶段信息；</p>
    <p>[0108]	(63)如果该执行阶段信息不是执行，则直接退出；</p>
    <p>[0109]	(64)如果该执行阶段信息是执行，则所述的块节点行为获取已经设定的开始节点；[0110]	(65)所述的块节点行为对获取到的开始节点创建新的执行单元指令；</p>
    <p>[0111]	(66)所述的块节点行为把新创建的指令加入到当前执行上下文的执行队列当中， 并完成。</p>
    <p>[0112]	该实现支持多种流程运行的图形执行虚拟机的方法中的外观控制器调用核心调 度器的停止动作，包括以下步骤：</p>
    <p>[0113]	(321)所述的核心调度器给核心调度线程池发送中断信号，停止各线程工作；</p>
    <p>[0114]	(322)所述的核心调度器销毁该核心调度线程池对象。</p>
    <p>[0115]	采用了该发明的实现支持多种流程运行的图形执行虚拟机系统及其方法，由于其 中对基于图形的流程产品的引擎进行了抽象，提取出了图形调度机制，实现了图形执行虚 拟机GEVM，该图形执行虚拟机GEVM可以提高流程产品的松耦合能力和可扩展能力，有助于 快速开发出稳定可靠的流程引擎产品，从软件技术上抽象出了可供多种流程实现的基础调 度公共机制，减少了流程引擎开发的工作量，提高了软件重用度，节省了工作量；同时通过 GEVM主动加载各种节点插件行为的方法，各种节点行为之间开发不存在任何必然依赖性， 流程引擎的各个部分可以交给不同技能的人去实现，降低了流程引擎的实现门槛，降低了 模块耦合度，提高并行开发能力；而且基于GEVM可以以开发扩展“插件”的形式扩充引擎 的能力；对于新增节点功能只需要实现一些新的扩展插件即可，提高了流程引擎的扩展性； 不仅如此，一般的功能的变更只局限在特定的节点插件当中，有效避免了少量变动引起整 个流程引擎的不稳定，提高了流程引擎的稳定性和易维护性，降低了维护成本，适用范围较 为广泛。</p>
    <p>附图说明</p>
    <p>[0116]	图1为本发明的实现支持多种流程运行的图形执行虚拟机系统中的基于流程执 行框架GEVM的流程引擎的结构示意图。</p>
    <p>[0117]	图2为本发明的实现支持多种流程运行的图形执行虚拟机系统中的GEVM框架的 各主要组成部分以及各部分之间的关系示意图。</p>
    <p>[0118]	图3为本发明的实现支持多种流程运行的图形执行虚拟机的方法中基于GEVM抽 象的各类节点、各类节点之间的行为以及关系。</p>
    <p>[0119]	图4为本发明的实现支持多种流程运行的图形执行虚拟机的方法中的块活动示 意图。</p>
    <p>[0120]	图5为本发明的实现支持多种流程运行的图形执行虚拟机的方法中的GEVM框架 主要概念类图。</p>
    <p>具体实施方式</p>
    <p>[0121]	为了能够更清楚地理解本发明的技术内容，特举以下实施例详细说明。</p>
    <p>[0122]	请参阅图1和图2所示，该实现支持多种流程运行的图形执行虚拟机系统，其中包 括：</p>
    <p>[0123]	外观控制器，负责图形执行虚拟机的启动、加载和停止，并接收外部请求的响应， 调用其他部件处理请求；[0124]	上下文容器，维护节点行为处理过程中可以访问的上下文，确保用户获取到当前 的执行单元、以及当前的执行队列；</p>
    <p>[0125]	节点行为注册器，维护一个不同类型节点行为的注册表；</p>
    <p>[0126]	核心调度器，分别与所述的外观控制器和上下文容器相连接，对所述的外观控制 器传递过来的每一个请求分配一个线程进行调度；其中包括：</p>
    <p>[0127]	&#8226;核心调度线程池，用于容纳该核心调度器所分配的线程；</p>
    <p>[0128]	&#8226;执行队列处理器，分别与所述的核心调度线程池和单元调度器相连接，对应一 个线程的实现，从执行上下文获取执行队列，并依次处理该执行队列中的每一个执行单元， 对于每一个执行单元，该执行队列处理器调用所述的单元调度器进行处理。</p>
    <p>[0129]	单元调度器，分别与所述的上下文容器、节点行为注册器、核心调度器相连接，接 收所述的核心调度器的请求，进行一次执行，其中每一次执行，先从所述的节点行为注册器 中获取对应的节点的行为实现类，再从所述的上下文容器中获取对应的上下文，并传入上 下文调用节点行为的对应方法。</p>
    <p>[0130]	在实际使用当中，针对现有技术中的流程引擎研发中的各种问题和困难，其中的 关键点在于没有把“流程图运转”本身的控制逻辑与“流程环节的具体业务内涵”处理区分 开来。因此，针对所有以“图形运转”为基础的流程系统，本发明的基本思想是一种可用于支 撑多种流程运行的图形执行虚拟机（Graph Execution Virtual Machine，下文简称GEVM) 的实现方法，具体的流程实现可以通过扩展的方式把流程的业务行为扩展到GEVM中，通过 二者结合完成完整的流程调度目标。</p>
    <p>[0131]	对于GEVM为何可降低流程引擎实现的复杂度和风险，请参阅图1所示。GEVM作 为“图形”执行的基础设施，提供扩展接口供具体的节点做扩展。通过GEVM，各个环节以相 对独立的方式实现自己的职责，针对背景技术中描述的几个问题，解决的情况如下：</p>
    <p>[0132]	(1)各种活动插件都依赖于GEVM，避免了各种活动实现之间的强依赖性，有效解 决了流程引擎各个部分紧密耦合的问题，有利于实现并行开发。各种活动的调度分别可以 安排不同的开发人员独立研发。同时，GEVM本身的可重用性也可节省一部分工作量。</p>
    <p>[0133]	(2)如果流程需要有功能修改，只需要修改单个“活动扩展插件”即可，不会造成全 局影响；如果需要增加一些活动类型的支持，只需要要增加和注册对应的插件即可。</p>
    <p>[0134]	(3)由于GEVM的作用，各种类型的环境的行为机制相互独立，减轻了代码的耦合 度，代码易读易维护。</p>
    <p>[0135]	GEVM作为图形处理虚拟机，其中定义了一些抽象的模型，分别表示节点、分阶段节 点、块节点、图等基本数据结构。另外包含若干基本部件，这些部件基于这些数据结构相互 协作推进各个节点的执行。下面先描述基本工作原理；再描述主要部件；然后描述各部件 的工作过程。</p>
    <p>[0136]	GEVM基本工作原理如下：</p>
    <p>[0137]	无论是哪一种流程，只要是以图为基础的流程，都符合图执行的基本原则。图的基 本组成单位是节点；由于图中的节点也可能是块（块包含一到多个节点），所以GEVM中块 节点也是一种特殊的节点；图可以看作不属于任何上级图的块节点，所以在GEVM中图也是 为一种特殊的节点。（具体请参阅图1所示）</p>
    <p>[0138]	本发明的GEVM的具体实施方案中用到的基础数据概念如下：[0139]	节点（Node)：节点是GEVM调度的基本单位，也就是说GEVM调度的对象是节点。节 点是分类型的，各类型节点提供其对应的行为接口，环节扩展插件都扩展节点提供的接口。 在业务流程领域，节点对应一种活动，比如“人工活动”。</p>
    <p>[0140]	分阶段节点（StagedNode)：分阶段节点是一种特殊的节点，支持在节点运行期间 进行中断，然后在适当的时机继续运行。分阶段节点可以分为开始、执行、完成三个阶段。人 工环节是一种典型的分阶段节点，人工任务创建完毕以后流程即暂停，等待任务处理完毕 以后再通知流程继续执行。</p>
    <p>[0141]	块节点（BlockNode)：块节点是一种特殊的“分阶段节点”。块节点在运行的时候 暂停自己的工作，转而去执行块中的节点。等块中包含的节点（可以内嵌子流程）全部运 行完毕以后，再推动块节点继续执行后续节点。块节点可以包含其他节点，包含的节点也可 以是块节点。在业务流程领域，块节点对应块活动（或称为内嵌子流程）</p>
    <p>[0142]	图（Graph)：图也是一种节点，并且是一种特殊的块节点。图中可以包含各种类型 的节点。在业务流程领域，图对应到一个完整的流程。</p>
    <p>[0143]	执行单元（Execution)：执行单元代表GEVM的一个基本处理单位，一个节点的处 理会产生两个执行单元，分别是类型为Perform类型和Transmit类型。Perform类型的 Execution负责处理节点本身的业务职能（比如：发送一个消息），Transmit类型负责计算 节点将要迁移到的后续节点。</p>
    <p>[0144]	执行队列（ExecutionQueue)：执行队列是执行单元（Execution)组成的一个队 列，节点扩展插件在工作过程中可以从执行上下文中获取到执行队列，并可对往执行队列 中加入新的执行单元（Execution)。GEVM会获取到新增的Execution，并依次进行处理。</p>
    <p>[0145]	以上各概念的类图请参阅图5所示。</p>
    <p>[0146]	GEVM提供一种可扩展性的框架，用户可以基于该框架进行扩展，用户扩展的实现 方式针对不同类型的节点扩展不同的节点行为。下面为节点行为的种类。（具体请参阅图 3所示）</p>
    <p>[0147]	1、基本节点行为（INodeBehavior)</p>
    <p>[0148]	图的执行是令牌顺着有向图的正向路径依次传递的过程，这便决定了图中节点的 基本行为是“执行（perform)”和“转移（transmit)”。</p>
    <p>[0149]	(1) “执行”完成节点自身的行为，比如“调用一个TOB服务”、“创建子流程”、“创</p>
    <p>建人工任务&#8212;&#8212;等待任务执行&#8212;&#8212;完成”。</p>
    <p>[0150]	(2) “转移”过程中，节点会提供转移的目标（后续活动），框架支持对后续活动的 运行。</p>
    <p>[0151]	2、分阶段节点行为（StagedNodeBehavior)</p>
    <p>[0152]	很多情况下，节点的“操作”行为是分阶段进行的，节点可能在运行过程中暂停，过 一段时间再继续。为了应对这种情况，引入“分阶段节点行为”。每一个阶段运行完毕以后 都可以暂停或继续，整个活动可能持续很长一段时间。在业务流程中执行的阶段包括“启动 (start)”、“执行(execute)”、“完成(finish)，，。</p>
    <p>[0153]	(1) “启动”过程一般可完成对实例的创建和激活等动作。启动以后可暂停等待， 也可直接运行。</p>
    <p>[0154]	(2) “执行”过程中实例进入运行状态，并执行对应的业务动作。运行以后可暂停等待，也可直接进入“完成”。</p>
    <p>[0155]	(3) “完成”以后实例进入完成状态。完成以后可直接开始“转移”也可暂停等待。</p>
    <p>[0156]	GEVM框架就是按照以上的节点行为特点，按照拓扑顺序调用每一个节点的行为， 从而达到推进图的执行的目的。</p>
    <p>[0157]	3、±&#22828;节点行为（BlockNodeBehavior)</p>
    <p>[0158]	块节点有其特殊性，块节点运行到的时候，不会立即运行到后续活动，而是去执行 块内的活动，所以块节点行为是一种特殊的分阶段节点行为，并且在执行过程中需要提供 需要从块中哪一个节点开始运行。（参见图3)</p>
    <p>[0159]	构成GEVM的主要部件如下：</p>
    <p>[0160]	(1)外观控制器（Enginelnstance)：外观控制器负责GEVM的启动、加载和停止，并 接收外部请求的响应，并调用其他部件处理请求。在外部调用者看来，外观控制器代表GEVM 引擎。（该部件之所以叫做“外观控制器”是因为这里采用了 Facade设计模式，外观控制器 对外代表引擎）</p>
    <p>[0161]	(2)核心调度器（KernelProcessor)：核心调度器维护一个线程池，对“外观控制 器”传递过来的每一个请求分配一个线程进行调度。线程池中每一个线程的实现，都是一个 执行队列处理器，从执行上下文获取执行队列，并依次处理队列中的每一个执行单元。对与 每一个执行单元，执行队列处理器会调用单元调度器进行处理。</p>
    <p>[0162]	(3)单元调度器（ExecutionHandler)：单元调度器接收核心调度器的请求，进行 一次执行。单元调度器的每一次执行，先从节点注册器获取对应的节点的行为实现类，再从 上下文容器中获取对应的上下文容器，然后传入上下文调用节点行为的对应方法。</p>
    <p>[0163]	(4)上下文容器（ExecutionContext)：上下文容器维护节点行为处理过程中可以 访问的上下文（Context)，用户可以从ExecutionContext中获取到当前的执行单元，以及 当前的执行队列。</p>
    <p>[0164]	(5)节点注册器（BehaviorRegistry):节点注册器维护一个不同类型节点行为的 注册表，单元调度器每一次调度都首先从这里获取对应的节点实现类。</p>
    <p>[0165]	以上各部件及其关系请参阅图2所示。</p>
    <p>[0166]	再请参阅图3至图5所示，该基于上述的系统实现支持多种流程运行的图形执行 虚拟机的方法，其主要特点是，所述的方法包括图形执行虚拟机启动操作、图形执行虚拟机 请求处理操作和图形执行虚拟机停止操作，所述的图形执行虚拟机启动操作，包括以下步 骤：</p>
    <p>[0167]	(11)所述的外观控制器检查系统引擎的状态，并对系统引擎的启动过程进行加 锁；</p>
    <p>[0168]	(12)所述的外观控制器创建节点行为注册器，并调用节点注册器的初始化，包括 以下步骤：</p>
    <p>[0169]	(a)所述的外观控制器创建节点行为注册器对象；</p>
    <p>[0170]	(b)所述的节点行为注册器创建节点行为缓存映射结构；</p>
    <p>[0171]	(c)所述的节点行为注册器从配置文件获取各类型节点行为实现类，创建类的实 例，并加载到缓存映射结构当中；</p>
    <p>[0172]	(13)所述的外观控制器创建上下文容器；[0173]	(14)所述的外观控制器创建单元调度器；</p>
    <p>[0174]	(15)所述的外观控制器创建核心调度器，并调用核心调度器的初始化，包括以下 步骤：</p>
    <p>[0175]	(a)所述的外观控制器创建所述的核心调度器；</p>
    <p>[0176]	(b)所述的核心调度器创建核心调度线程池；</p>
    <p>[0177]	(c)所述的核心调度器从该外观控制器获取并设置好对应的上下文容器；</p>
    <p>[0178]	(d)所述的核心调度器启动对应的核心调度线程池，准备好接收外部请求；</p>
    <p>[0179]	(16)解锁并标记该图形执行虚拟机启动完成，系统可接收外部请求；</p>
    <p>[0180]	所述的图形执行虚拟机请求处理操作，包括以下步骤：</p>
    <p>[0181]	(21)所述的外观控制器从外部请求中获取IGraph参数、INode参数、处理阶段参 数，并组装成指令对象；</p>
    <p>[0182]	(22)所述的外观控制器调用该核心调度器对该外部请求进行处理，包括以下步 骤：</p>
    <p>[0183]	(a)所述的核心调度器调用所述的上下文容器的创建方法，创建请求上下文；</p>
    <p>[0184]	(b)所述的核心调度器把上下文编号ID传递给核心调度线程池，所述的核心调度 线程池选择一个线程执行该外部请求；该核心调度线程池中被选择的线程为处理线程，所 述的线程的执行该外部请求，包括以下步骤：</p>
    <p>[0185]	(i)所述的处理线程从所述的上下文容器获取到对应的上下文，作为当前上下 文；</p>
    <p>[0186]	(ii)所述的处理线程判断当前上下文是否还有更多的指令；</p>
    <p>[0187]	(iii)如果是，则调用所述的单元调度器的处理过程，并传入上下文ID，包括以下 步骤：</p>
    <p>[0188]	(A)所述的单元调度器从该上下文容器中获取到对应的上下文；</p>
    <p>[0189]	(B)所述的单元调度器从步骤（A)中获取到的上下文中获取下一个指令，作为当 前指令；</p>
    <p>[0190]	(C)所述的单元调度器判断当前的指令的类型；</p>
    <p>[0191]	(D)如果该可执行请求是Perform类型，则所述的单元调度器运行自己的执行过 程，包括以下步骤：</p>
    <p>[0192]	(aa)所述的单元调度器从节点注册器获取到适合于当前处理指令的节点行为实 现对象，作为当前节点行为；</p>
    <p>[0193]	(bb)所述的单元调度器调用当前节点行为对象的执行前方法，触发对应的用户定 制行为，并传入当前上下文；</p>
    <p>[0194]	(CC)所述的单元调度器调用当前节点行为对象的执行方法，触发用户定义的节点 动作，并传入当前上下文；</p>
    <p>[0195]	(dd)所述的单元调度器调用当前节点行为对象的执行后行为，触发对应的用户定 制行为，并传入当前上下文；</p>
    <p>[0196]	(ee)所述的单元调度器获取执行上下文的“是否继续”属性；</p>
    <p>[0197]	(ff)如果该属性为“不继续”，则直接退出，并返回步骤（45)；</p>
    <p>[0198]	(gg)如果该属性为“继续”，则调用当前节点行为的获取后继方法，获取到后续节点</p>
    <p>[0199]	(hh)循环为获取到的后续节点产生迁移类型的指令，并追加到当前上下文的执行 队列当中；</p>
    <p>[0200]	(jj)所述的单元调度器记录当前可执行请求处理完成的日志；</p>
    <p>[0201]	(E)如果该可执行请求是Transmit类型，则所述的单元调度器执行自己的传送过 程，包括以下步骤：</p>
    <p>[0202]	(aa)所述的单元调度器从节点注册器获取适合于当前处理指令的节点行为实现 对象，作为当前节点行为；</p>
    <p>[0203]	(bb)所述的单元调度器通过调用当前节点行为对象的迁移前方法，触发对应的用 户定制行为；</p>
    <p>[0204]	(CC)所述的单元调度器通过调用当前节点行为对象迁移传送动作，获取到后续节 点列表，并判断是否能够获取到；</p>
    <p>[0205]	(dd)如果否，则当前节点是图中最后一个节点，也即结束节点，查找该节点的父节 点，且该单元调度器为父节点产生一个新的指令，加入到当前上下文的执行队列当中，指定 执行阶段为结束；</p>
    <p>[0206]	(ee)如果是，则当前节点是一个中间节点，所述的单元调度器顺次为后续节点创 建新的指令，加入到当前上下文的执行队列当中；</p>
    <p>[0207]	(ff)所述的单元调度器记录当前指令处理完成的日志；</p>
    <p>[0208]	(iv)如果否，则对该外部请求的处理已经完成，并退出；</p>
    <p>[0209]	(ν)重复上述步骤（ii)；</p>
    <p>[0210]	所述的图形执行虚拟机停止操作，包括以下步骤：</p>
    <p>[0211]	(31)校验系统引擎的状态，对该系统引擎的停止过程进行加锁；</p>
    <p>[0212]	(32)所述的外观控制器调用该核心调度器的停止动作，包括以下步骤：</p>
    <p>[0213]	(a)所述的核心调度器给核心调度线程池发送中断信号，停止各线程工作；</p>
    <p>[0214]	(b)所述的核心调度器销毁该核心调度线程池对象；</p>
    <p>[0215]	(33)取消所述的节点行为注册器中各个已注册的节点行为；</p>
    <p>[0216]	(34)所述的外观控制器调用清空所述的上下文容器中当前的上下文；</p>
    <p>[0217]	(35)标记该系统引擎状态为已停止。</p>
    <p>[0218]	不仅如此，当所述的节点行为为分阶段节点行为时，所述的单元调度器运行自己 的执行过程，包括以下步骤：</p>
    <p>[0219]	(51)所述的分阶段节点行为从当前执行上下文中获取到当前执行单元，并获取到 执行阶段信息；</p>
    <p>[0220]	(52)如果执行阶段是开始，则进行开始阶段操作处理，包括以下步骤：</p>
    <p>[0221]	(a)所述的分阶段节点行为设定指令上下文ExecutionContext的继续运行属性 为真；</p>
    <p>[0222]	(b)所述的分阶段节点行为调用节点开始动作；</p>
    <p>[0223]	(c)所述的单元调度器判断是否继续；</p>
    <p>[0224]	(d)如果是，则设定下一个命令为执行，并继续回到开始的判断；如果否，则退出；</p>
    <p>[0225]	(53)如果执行阶段是指令，则进行指令阶段操作处理，包括以下步骤：[0226]	(a)所述的分阶段节点行为设定指令上下文ExecutionContext继续运行属性为 真；</p>
    <p>[0227]	(b)所述的分阶段节点行为调用节点执行动作；</p>
    <p>[0228]	(c)所述的单元调度器判断是否继续；</p>
    <p>[0229]	(d)如果是，则设定下一个命令为结束，继续回到开始的判断；如果否，则退出；</p>
    <p>[0230]	(54)如果执行阶段是结束，则进行结束阶段操作处理，包括以下步骤：</p>
    <p>[0231]	(a)所述的分阶段节点行为设定指令上下文ExecutionContext继续运行属性为 真；</p>
    <p>[0232]	(b)所述的分阶段节点行为调用节点完成动作；</p>
    <p>[0233]	(c)结束阶段处理完毕，退出执行。</p>
    <p>[0234]	同时，当所述的节点行为为块节点行为，所述的块节点行为的父类为分阶段节点 行为，所述的单元调度器运行自己的执行过程，包括以下步骤：</p>
    <p>[0235]	(61)所述的块节点行为调用分阶段节点行为的上述步骤（51)至（54)；</p>
    <p>[0236]	(62)所述的块节点行为从当前执行上下文中获取到当前执行单元，并获取到执行 阶段信息；</p>
    <p>[0237]	(63)如果该执行阶段信息不是执行，则直接退出；</p>
    <p>[0238]	(64)如果该执行阶段信息是执行，则所述的块节点行为获取已经设定的开始节</p>
    <p> 点；</p>
    <p>[0239]	(65)所述的块节点行为对获取到的开始节点创建新的执行单元指令；</p>
    <p>[0240]	(66)所述的块节点行为把新创建的指令加入到当前执行上下文的执行队列当中， 并完成。</p>
    <p>[0241]	在实际使用当中，本发明的图形执行虚拟机GEVM的总体包括启动、处理请求、停 止三个主要过程。三个过程都以外观控制器为开始点，各过程分别描述如下：</p>
    <p>[0242]	过程一 ：GEVM启动过程如下：</p>
    <p>[0243]	(1)外观控制器检查引擎状态，并对引擎的启动过程进行加锁。</p>
    <p>[0244]	(2)外观控制器创建节点行为注册器，并调用节点注册器的初始化。</p>
    <p>[0245]	(3)外观控制器创建上下文容器。</p>
    <p>[0246]	(4)外观控制器创建单元调度器。</p>
    <p>[0247]	(5)外观控制器创建核心调度器，并调用核心调度器的初始化。</p>
    <p>[0248]	(6)解锁并标记GEVM启动完成，系统可接收外部请求。</p>
    <p>[0249]	所述的“外观控制器创建节点行为注册器，并调用节点注册器的初始化”包括以下 步骤：</p>
    <p>[0250]	(1)外观控制器创建节点行为注册器对象。</p>
    <p>[0251]	(2)节点行为注册器创建节点行为缓存映射结构。</p>
    <p>[0252]	(3)节点行为注册器从配置文件获取各类型节点行为实现类，创建类的实例，并加 载到缓存映射结构当中。</p>
    <p>[0253]	所述的“外观控制器创建核心调度器，并调用核心调度器的初始化”包括以下步 骤：</p>
    <p>[0254]	(1)外观控制器创建核心调度器。[0255]	(2)核心调度器创建核心调度线程池。</p>
    <p>[0256]	(3)核心调度器从外观控制器获取并设置好对应的上下文容器。</p>
    <p>[0257]	(4)核心调度器启动应线程池，准备好接收外部请求。</p>
    <p>[0258]	过程二 ：GEVM处理请求过程如下：</p>
    <p>[0259]	(1)外观控制器从外部请求中获取IGraph参数、INode参数、处理阶段（Stage)参 数，并组装成Execution对象。</p>
    <p>[0260]	(2)外观控制器调用核心调度器的process方法，对该请求进行处理。</p>
    <p>[0261]	所述的“外观控制器调用核心调度器的process方法，对该请求进行处理”包括以 下步骤：</p>
    <p>[0262]	(1)核心调度器调用上下文容器的“创建”方法，创建请求上下文。</p>
    <p>[0263]	(2)核心调度器把上下文编号（ID)传递给线程池，线程池选择一个线程执行该请 求。</p>
    <p>[0264]	所述的“核心调度器把上下文编号传递给线程池，线程池选择一个线程执行该请 求”中，线程池中线程的处理过程如下（命名线程池中被选中的线程为“处理线程”）：</p>
    <p>[0265]	(1)处理线程从上下文容器获取到对应的上下文，作为当前上下文。</p>
    <p>[0266]	(2)处理线程判断当前上下文是否还有更多的Execution。</p>
    <p>[0267]	(3)如果步骤（2)的判断结果是“有”，则处理如下：</p>
    <p>[0268]	(a)调用单元调度器的处理过程，传入上下文ID ；</p>
    <p>[0269]	(4)如果步骤（2)的判断结果是“没有”，则表示对当前请求的处理已经完成，退出 循环。</p>
    <p>[0270]	(5)处理线程循环进行（2)的判断。</p>
    <p>[0271]	所述的“调用单元调度器的处理过程，传入上下文ID”中，包括以下步骤（步骤序 列A)：</p>
    <p>[0272]	(1)单元调度器从上下文容器中获取到对应的上下文。</p>
    <p>[0273]	(2)单元调度器从（1)中获取到的上下文获取下一个Execution，作为当前 Execution。</p>
    <p>[0274]	(3)单元调度器判断当前Execution类型，并根据类型走（4)或者（5)。</p>
    <p>[0275]	(4)如果步骤（3)判断结果是Perform类型，则处理如下：</p>
    <p>[0276]	(a)调度器执行自己的Perform过程；</p>
    <p>[0277]	(5)如果步骤（3)判断结果是Transmit类型，则处理如下：</p>
    <p>[0278]	(a)单元调度器执行自己的Transmit过程。</p>
    <p>[0279]	所述的“单元调度器执行自己的Perform过程”过程包括以下步骤（步骤序列B)：</p>
    <p>[0280]	(1)单元调度器从节点注册器获取到适合于当前处理Execution的节点行为实现 对象，作为当前节点行为。</p>
    <p>[0281]	(2)单元调度器调用当前节点行为对象的“执行前”方法，触发对应的用户定制行 为，并传入当前上下文。</p>
    <p>[0282]	(3)单元调度器调用当前节点行为对象的“执行（Perform) ”方法，触发用户定义 的节点动作，并传入当前上下文。</p>
    <p>[0283]	(4)单元调度器调用当前节点行为对象的“执行后”行为，触发对应的用户定制行为，并传入当前上下文。</p>
    <p>[0284]	(5)单元调度器获取执行上下文的“是否继续”属性。</p>
    <p>[0285]	(6)如果步骤（5)的获取结果是“不继续”，则退出本过程序列，忽略后续步骤。</p>
    <p>[0286]	(7)如果步骤（5)的获取结果是“继续”，则调用当前节点行为的“获取后继”方法， 获取到后续节点。并处理子过程：</p>
    <p>[0287]	(a)循环为获取到的后续节点产生迁移类型的指令（Execution)，并追加到当前 上下文的执行队列当中。</p>
    <p>[0288]	(8)单元调度器记录当前Execution处理完成的日志。</p>
    <p>[0289]	步骤序列A所述的“单元调度器执行自己的Transmit过程”，包括以下步骤：</p>
    <p>[0290]	(1)单元调度器从节点注册器获取适合于当前处理Execution的节点行为实现对 象，作为当前节点行为。</p>
    <p>[0291]	(2)单元调度器通过调用当前节点行为对象的“迁移前”方法，触发对应的用户定 制行为。</p>
    <p>[0292]	(3)单元调度器通过调用当前节点行为对象“迁移Transmit动作”，获取到后续节 点列表。</p>
    <p>[0293]	(4)如果步骤（3)获取的结果为空，则说明当前节点是图中最后一个节点（结束节 点），查找该节点的父节点，并执行以下子过程：</p>
    <p>[0294]	(a)单元调度器为父节点产生一个新的Execution，加入到当前上下文的执行队 列当中，指定执行阶段为finish ；</p>
    <p>[0295]	(5)如果步骤（3)获取的结果不为空，则说明当前节点是一个中间节点。执行如下 子过程：</p>
    <p>[0296]	(a)单元调度器顺次为后续节点创建新的Execution，加入到当前上下文的执行 队列当中；</p>
    <p>[0297]	(6)单元调度器记录当前Execution处理完成的日志。</p>
    <p>[0298]	下面将描述分阶段节点行为和块活动节点行为的Perform过程，针对这二者和前 述过程的关系，说明如下：</p>
    <p>[0299]	根据前文原理中所述，用户是“通过实现节点行为接口”来实现对GEVM的扩展的。 对于普通节点（比如BPM中调用自动服务的节点），用户直接实现节点行为接口即可，对于 分阶段节点行为（比如，人工处理环节），用户可通过继承“分阶段节点行为”抽象类来更方 便的进行实现；同样的，对于块活动节点，用户可继承“块活动节点行为”抽象类来更方便的 实现。</p>
    <p>[0300]	所以，分段节点perform方法的处理过程、块活动节点的peform方法并非独立的 过程，如果用户继承了对应的抽象基类来实现节点行为扩展，则在步骤序列B-3中就完成 了这些过程。</p>
    <p>[0301]	分阶段节点行为是一种特殊的节点行为，重载了节点行为的perform方法，分段 节点perform方法的处理过程如下：</p>
    <p>[0302]	(1)分阶段节点行为从当前执行上下文中获取到当前执行单元，并获取到执行阶 段。</p>
    <p>[0303]	(2)如果执行阶段是START，则：[0304]	(a)分阶段节点行为设定ExecutionContext继续运行属性为true。</p>
    <p>[0305]	(b)分阶段节点行为调用节点开始动作。</p>
    <p>[0306]	(c)判断是否继续，如果继续则设定下一个命令为EXECUTE，继续回到开始的判 断，否则退出；</p>
    <p>[0307]	(3)如果执行阶段是EXECUTE，则</p>
    <p>[0308]	(a)分阶段节点行为设定ExecutionContext继续运行属性为true。</p>
    <p>[0309]	(b)分阶段节点行为调用节点执行动作。</p>
    <p>[0310]	(c)判断是否继续，如果继续则设定下一个命令为FINISH，继续回到开始的判断， 否则退出；</p>
    <p>[0311]	(4)如果执行阶段为FINISH，则</p>
    <p>[0312]	(a)分阶段节点行为设定ExecutionContext继续运行属性为true。</p>
    <p>[0313]	(b)分阶段节点行为调用节点完成动作。</p>
    <p>[0314]	(C)Finish处理完毕，退出执行。</p>
    <p>[0315]	块活动行为节点是一种特殊的分阶段行为节点，其实现了器perform方法，块活 动节点的Perform方法处过程如下：</p>
    <p>[0316]	(1)块节点行为调用父类（分阶段节点行为）实现的perform方法。</p>
    <p>[0317]	(2)块节点行为从当前执行上下文中获取到当前执行单元，并获取到执行阶段。</p>
    <p>[0318]	(3)如果不是EXECUTE，则直接退出。</p>
    <p>[0319]	(4)如果是EXE⑶TE，则块节点行为获取已经设定的开始节点，并继续下面的操作。</p>
    <p>[0320]	(5)块节点行为对获取到的开始节点创建新的执行单元Execution。</p>
    <p>[0321]	(6)块节点行为把新创建的Execution加入到当前执行上下文的执行队列当中， 完成。</p>
    <p>[0322]	过程三：GEVM停止过程如下：</p>
    <p>[0323]	(1)校验引擎状态，对引擎的停止过程进行加锁。</p>
    <p>[0324]	(2)外观控制器调用核心调度器的停止动作。</p>
    <p>[0325]	(3)取消节点行为注册器中各个已注册的节点行为。</p>
    <p>[0326]	(4)外观控制器调用清空上下文容器中当前的上下文。</p>
    <p>[0327]	(5)标记引擎状态为已停止。</p>
    <p>[0328]	所述的“外观控制器调用核心调度器的停止动作”包含以下步骤：</p>
    <p>[0329]	(1)核心调度器给线程池发送中断信号，停止各线程工作。</p>
    <p>[0330]	(2)核心调度器销毁线程池对象。</p>
    <p>[0331]	以下实施例总采用JDK 1.5为基础环境。</p>
    <p>[0332]	GEVM启动过程如下：</p>
    <p>[0333]	(1)外观控制器检查引擎状态，并对引擎的启动过程进行加锁。包括以下步骤：</p>
    <p>[0334]	(a)外观控制器判断引擎状态，如果状态为1，启动失败。</p>
    <p>[0335]	i.说明：引擎状态类型为整数，可选值包括：0 ：非活动状态1 ：活动状态</p>
    <p>[0336]	&#971;说明：对引擎加锁和修改引擎状态的操作下同，碰到不再详述</p>
    <p>[0337]	(b)对外观控制器中的lock对象实施synchronize操作。[0338]	(2)外观控制器创建节点行为注册器，并调用节点注册器的初始化。</p>
    <p>[0339]	(3)外观控制器创建上下文容器。</p>
    <p>[0340]	(4)外观控制器创建单元调度器。</p>
    <p>[0341]	(5)外观控制器创建核心调度器，并调用核心调度器的初始化。</p>
    <p>[0342]	(6)解锁并标记GEVM启动完成，系统可接收外部请求。包括以下步骤：</p>
    <p>[0343]	(a)修改引擎状态为1</p>
    <p>[0344]	(b)退出 synchronize 锁定状态</p>
    <p>[0345]	所述的“外观控制器创建节点行为注册器，并调用节点注册器的初始化”包括以下 步骤：</p>
    <p>[0346]	(1)外观控制器创建节点行为注册器对象。</p>
    <p>[0347]	(2)节点行为注册器创建节点行为缓存映射结构。</p>
    <p>[0348]	(3)节点行为注册器从配置文件获取各类型节点行为实现类，创建类的实例，并加 载到缓存映射结构当中。包括以下步骤：</p>
    <p>[0349]	(a)从当前目录获取GEVM-plugins. xml，从中获取所有的插件行为类，并分别创 建实例</p>
    <p>[0350]	(b)把创建的节点行为插件实例增加到节点行为注册表中</p>
    <p>[0351]	i.说明：节点行为插件配置文件GEVM-plugins. xml文件结构如下为：</p>
    <p>[0352]	&lt; ？ xml version = " 1.0〃 encoding = " utf-8" ？ &gt;</p>
    <p>[0353]	&lt;root&gt;</p>
    <p>[0354]	&lt;behavior</p>
    <p>[0355]	nodeType =" manual" &gt;gevm. nodebehavior. ManualTaskBehavior&lt;/behavior&gt;</p>
    <p>[0356]	&lt;behavior</p>
    <p>[0357]	nodeType = " service " &gt;gevm. nodeBehavior. ServiceTaskBehavior&lt;/ behavior&gt;</p>
    <p>[0358]	......</p>
    <p>[0359]	&lt;/root&gt;</p>
    <p>[0360]	(c)分别调用每个节点行为插件的start方法</p>
    <p>[0361]	所述的“外观控制器创建核心调度器，并调用核心调度器的初始化”包括以下步 骤：</p>
    <p>[0362]	(1)外观控制器创建核心调度器。</p>
    <p>[0363]	(2)核心调度器创建核心调度线程池。</p>
    <p>[0364]	(a)线程池使用 JDK1. 5 中 java. util. concurrent. ThreadPoolExecutor。采用如 下构造函数构造：</p>
    <p>[0365]	public ThreadPoolExecutor (int corePoolSize,//线禾呈数</p>
    <p>[0366]	int maximumPoolSize，//最/J、线程数</p>
    <p>[0367]	long ke印AliveTime，//线程保持活跃时间</p>
    <p>[0368]	TimeUnit unit，//时间的单元</p>
    <p>[0369]	BlockingQueue&lt;Runnable&gt;workQueue)// 消息队列</p>
    <p>[0370] (3)核心调度器从外观控制器获取并设置好对应的上下文容器。[0371]	(4)核心调度器启动应线程池，准备好接收外部请求。</p>
    <p>[0372]	GEVM处理外部请求的过程如下：</p>
    <p>[0373]	(1)外观控制器从外部请求中获取IGraph参数、INode参数、处理阶段（Stage)参 数，并组装成Execution对象。</p>
    <p>[0374]	(2)外观控制器调用核心调度器的process方法，对该请求进行处理。</p>
    <p>[0375]	所述的“外观控制器调用核心调度器的process方法，对该请求进行处理”包括以 下步骤：</p>
    <p>[0376]	(1)核心调度器调用上下文容器的“创建”方法，创建请求上下文。包括以下步骤：</p>
    <p>[0377]	(a)上下文容器创建一个新的执行上下文ExecutionContext，并初始化其执行队 列ExecutionQueue为空队列。</p>
    <p>[0378]	(b)ExecutionQueue 的当前 Excution 指针指向空（null)。</p>
    <p>[0379]	(c)上下文容器把当前Execution放入该ExecutionContext的执行上队列当中， 作为该队列的第一个Execution。</p>
    <p>[0380]	(d)ExecutionQueue 的当前 Excution 指针指向新力口入的 Execution。</p>
    <p>[0381]	(e)上下文容器产生一个新的上下文ID，把以此ID为key，把新创建的 ExecutionContext放入容器当中。</p>
    <p>[0382]备注：上下文容器的	Mapping 结构采用 JDK1. 5 的 java. util. concurrent. ConcurrentHashMap 类。</p>
    <p>[0383]	(2)核心调度器把上下文编号（ID)传递给线程池，线程池选择一个线程执行该请 求。</p>
    <p>[0384]	说明：调用的方法为 ThreadPoolExecutor 类的“public void execute (Runnable command)，，方法。</p>
    <p>[0385]	所述的“核心调度器把上下文编号传递给线程池，线程池选择一个线程执行该请 求”中，线程池中线程的处理过程如下（命名线程池中被选中的线程为“处理线程”）：</p>
    <p>[0386]	(1)处理线程从上下文容器获取到对应的上下文，作为当前上下文。</p>
    <p>[0387]	(2)处理线程判断当前上下文是否还有更多的Execution</p>
    <p>[0388]	(3)如果步骤（2)的判断结果是“有”，则处理如下：</p>
    <p>[0389]	(a)调用单元调度器的处理过程，传入上下文ID。</p>
    <p>[0390]	(4)如果步骤（2)的判断结果是“没有”，则表示对当前请求的处理已经完成，退出 循环。</p>
    <p>[0391]	(5)处理线程继续进行（2)的判断。</p>
    <p>[0392]	所述的“调用单元调度器的处理过程，传入上下文ID”中，包括以下步骤（步骤序 列A)：</p>
    <p>[0393]	(1)单元调度器从上下文容器中获取到对应的上下文。</p>
    <p>[0394]	(2)单元调度器从（1)中获取到的上下文获取下一个Execution，作为当前 Execution。</p>
    <p>[0395]	(3)单元调度器判断当前Execution类型，并根据类型走（4)或者（5)。</p>
    <p>[0396]	(4)如果步骤（3)判断结果是Perform类型，则处理如下：</p>
    <p>[0397]	(a)单元调度器执行自己的Perform过程。[0398]	(5)如果步骤（3)判断结果是Transmit类型，则处理如下：</p>
    <p>[0399]	(a)单元调度器执行自己的Transmit过程。</p>
    <p>[0400]	所述的“单元调度器执行自己的Perform过程”过程包括以下步骤（步骤序列B)：</p>
    <p>[0401]	(1)单元调度器从节点注册器获取到适合于当前处理Execution的节点行为实现 对象，作为当前节点行为。包括以下步骤：</p>
    <p>[0402]	(a)单元调度器获取当前的Execution</p>
    <p>[0403]	i. IitIX^Iir Execution 白勺ctx. getCurrentExecution 0 , ctx 夕卜力夕去 调用传入的参数。</p>
    <p>[0404]	(b)单元调度器从当前的Execution，进而获取到当前节点（INode)的类型。</p>
    <p>[0405]	(c)单元调度器从节点注册表（nodeRegistry)当中获取到对应的节点行为对象。 (如果获取到空，该调度异常结束）</p>
    <p>[0406]	(2)单元调度器调用当前节点行为对象的“执行前”方法，触发对应的用户定制行 为，并传入当前上下文。包括如下步骤：</p>
    <p>[0407]	(a)调用监听器的onBeforePerform方法，触发“行为将要发生”的信号。</p>
    <p>[0408]	(b)从上下文（ExecutionContext)中判断是否继续，如果不继续，则退出。</p>
    <p>[0409]	(3)单元调度器调用当前节点行为对象的“执行（Perform) ”方法，触发用户定义 的节点动作，并传入当前上下文。</p>
    <p>[0410]	(4)单元调度器调用当前节点行为对象的“执行后”行为，触发对应的用户定制行 为，并传入当前上下文。</p>
    <p>[0411]	(5)单元调度器获取执行上下文的“是否继续”属性。</p>
    <p>[0412]	(6)如果步骤（5)的获取结果是“不继续”，则退出本过程序列，忽略后续步骤。</p>
    <p>[0413]	(7)如果步骤（5)的获取结果是“继续”，则调用当前节点行为的“获取后继”方法， 获取到后续节点。并处理子过程</p>
    <p>[0414]	(a)循环为获取到的后续节点产生迁移类型的指令（Execution)，并追加到当前 上下文的执行队列当中。</p>
    <p>[0415]	(8)单元调度器记录当前Execution处理完成的日志。</p>
    <p>[0416]	以上“单元调度器执行自己的Perform过程”，示例代码如下：</p>
    <p>[0417]	public void perform(ExecutionContext ctx){</p>
    <p>[0418]	H步骤1 ：单元调度器获取到适合于当前处理Execution的节点处理器</p>
    <p>[0419]	Execution param = ctx. getCurrentExecution()；</p>
    <p>[0420]	INode nd = param. getCurrentNode ()；</p>
    <p>[0421]	String nt = nd. getNodeType ()；</p>
    <p>[0422]	INodeBehavior	nodeBehavior =nodeBehaviorRegistry. getNodeBehavior (nt)；</p>
    <p>[0423]	if (nodeBehavior == null)</p>
    <p>[0424]	throw new RuntimeException ( " Can ' t find the node behavior ：	" +nt)；</p>
    <p>[0425]	Il步骤2 ：触发其注册的节点行为监听器的"执行前"行为通知节点行为 监听器[0426]	listener. onBeforePerform(ctx)；</p>
    <p>[0427]	if( ！ ctx. isContinueO)</p>
    <p>[0428]	return ；</p>
    <p>[0429]	H步骤3 ：单元调度器调用该节点行为对象的执行（Perform)行为</p>
    <p>[0430]	nodeBehavior. perform (ctx)；</p>
    <p>[0431]	H步骤4 ：单元调度器通过触发其注册的节点行为监听器的"执行后"行 为通知</p>
    <p>[0432]	listener. onAfterPerform(ctx)；</p>
    <p>[0433]	H步骤5 ：单元调度器获取执行上下文的是否继续属性</p>
    <p>[0434]	if( ！ ctx. isContinueO)</p>
    <p>[0435]	//步骤6 ：不继续则返回</p>
    <p>[0436]	return ；</p>
    <p>[0437]	else {</p>
    <p>[0438]	H步骤7 ：针对当前运行的环节产生迁移类型的指令（Execution)，并加 入到执行队列当中</p>
    <p>[0439]	ctx. getExecutionQueue (). insertExecution (</p>
    <p>[0440]	ExecutionFactory. createExecution(ExecutionType. TRANSIMIT,</p>
    <p>[0441]	param. getCurrentGraph (), param</p>
    <p>[0442]	. getCurrentNode (),...)；</p>
    <p>[0443]	}</p>
    <p>[0444]	//步骤8:记录日志</p>
    <p>[0445]	EngineInstanceLogger. log (ctx)；</p>
    <p>[0446]	}</p>
    <p>[0447]	步骤序列A所述的“单元调度器执行自己的Transmit过程”，包括以下步骤：</p>
    <p>[0448]	(1)单元调度器从节点注册器获取适合于当前处理Execution的节点行为实现对 象，作为当前节点行为。</p>
    <p>[0449]	(2)单元调度器通过调用当前节点行为对象的“迁移前”方法，触发对应的用户定 制行为。</p>
    <p>[0450]	(3)单元调度器通过调用当前节点行为对象“迁移Transmit动作”，获取到后续节 点列表。</p>
    <p>[0451]	(4)如果步骤（3)获取的结果为空，则说明当前节点是图中最后一个节点（结束节 点），查找该节点的父节点，并执行以下子过程：</p>
    <p>[0452]	(a)单元调度器为父节点产生一个新的Execution，加入到当前上下文的执行队 列当中，指定执行阶段为finish。</p>
    <p>[0453]	(5)如果步骤（3)获取的结果不为空，则说明当前节点是一个中间节点。执行如下 子过程：</p>
    <p>[0454]	(a)单元调度器顺次为后续节点创建新的Execution，加入到当前上下文的执行 队列当中。</p>
    <p>[0455]	(6)单元调度器记录当前Execution处理完成的日志。[0456]	分阶段节点行为是一种特殊的节点行为，重载了节点行为的perform方法，分段 节点perform方法的处理过程如下：</p>
    <p>[0457]	(1)分阶段节点行为从当前执行上下文中获取到当前执行单元，并获取到执行阶 段。</p>
    <p>[0458]	(2)如果执行阶段是START，则</p>
    <p>[0459]	(a)分阶段节点行为设定ExecutionContext继续运行属性为true。</p>
    <p>[0460]	(b)分阶段节点行为调用节点开始动作。</p>
    <p>[0461]	(c)判断是否继续，如果继续则设定下一个命令为EXECUTE，继续回到开始的判 断，否则退出。</p>
    <p>[0462]	(3)如果执行阶段是EXECUTE，则</p>
    <p>[0463]	(a)分阶段节点行为设定ExecutionContext继续运行属性为true。</p>
    <p>[0464]	(b)分阶段节点行为调用节点执行动作。</p>
    <p>[0465]	(c)判断是否继续，如果继续则设定下一个命令为FINISH，继续回到开始的判断， 否则退出；</p>
    <p>[0466]	(4)如果执行阶段为FINISH，则</p>
    <p>[0467]	(a)分阶段节点行为设定ExecutionContext继续运行属性为true。</p>
    <p>[0468]	(b)分阶段节点行为调用节点完成动作。</p>
    <p>[0469]	(C)Finish处理完毕，退出执行。</p>
    <p>[0470]	针对以上分阶段节点的perform方法，使用Java代码描述如下：</p>
    <p>[0471]	public void perform(IExecutionContext ctx) {</p>
    <p>[0472]	H步骤1 ：分阶段节点行为从当前执行上下文中获取到当前执行单元， 并获取到执行阶段</p>
    <p>[0473]	PerformStage	command =ctx. getCurrentExecution(). getPerformStage ()；</p>
    <p>[0474]	while (command ！ = null) {</p>
    <p>[0475]	switch (command) {</p>
    <p>[0476]	case START ：// 步骤 2 ：对 Start 的处理</p>
    <p>[0477]	ctx. setContinue (true)；</p>
    <p>[0478]	startNode (ctx)；</p>
    <p>[0479]	if (ctx. isContinueO) {</p>
    <p>[0480]	command = PerformStage. EXECUTE ；</p>
    <p>[0481]	ctx. getCurrentExecution ().</p>
    <p>[0482]	setPerformStage(PerformStage. EXECUTE)；</p>
    <p>[0483]	{</p>
    <p>[0484]	else command = null ；</p>
    <p>[0485]	break ；</p>
    <p>[0486]	case EXECUTE ：// 步骤 3 ：对 Execute 的处理</p>
    <p>[0487]	ctx. setContinue (true)；</p>
    <p>[0488]	executeNode(ctx)；[0489]	if (ctx. isContinue ()) {</p>
    <p>[0490]	command = PerformStage. FINI SH ；</p>
    <p>[0491]	ctx. getCurrentExecution ().</p>
    <p>[0492]	setPerformStage(PerformStage. FINISH)；</p>
    <p>[0493]	{</p>
    <p>[0494]	else command = null ；</p>
    <p>[0495]	break ；</p>
    <p>[0496]	case FINISH ：// 步骤 4 ：对 FINISH 的处理</p>
    <p>[0497]	ctx. setContinue (true)；</p>
    <p>[0498]	finishNode(ctx)；</p>
    <p>[0499]	command = null ；</p>
    <p>[0500]	break ；</p>
    <p>[0501]	}</p>
    <p>[0502]	}</p>
    <p>[0503]	块活动行为节点是一种特殊的分阶段行为节点，其实现了其perform方法，块活 动节点的Perform方法处过程如下：</p>
    <p>[0504]	(1)块节点行为调用父类（分阶段节点行为）实现的perform方法。</p>
    <p>[0505]	(2)块节点行为从当前执行上下文中获取到当前执行单元，并获取到执行阶段。</p>
    <p>[0506]	(3)如果不是EXECUTE，则直接退出。</p>
    <p>[0507]	(4)如果是EXE⑶TE，则块节点行为获取已经设定的开始节点，并继续下面的操作。</p>
    <p>[0508]	(5)块节点行为对获取到的开始节点创建新的执行单元Execution。</p>
    <p>[0509]	(6)块节点行为把新创建的Execution加入到当前执行上下文的执行队列当中， 完成。</p>
    <p>[0510]	GEVM停止过程如下：</p>
    <p>[0511]	(1)校验引擎状态，对引擎的停止过程进行加锁。</p>
    <p>[0512]	(2)外观控制器调用核心调度器的停止动作。</p>
    <p>[0513]	(3)取消节点行为注册器中各个已注册的节点行为。</p>
    <p>[0514]	(4)外观控制器调用清空上下文容器中当前的上下文。</p>
    <p>[0515]	(5)标记引擎状态为已停止。</p>
    <p>[0516]	备注：引擎停止的状态标记为：0</p>
    <p>[0517]	所述的“外观控制器调用核心调度器的停止动作”包含以下步骤：</p>
    <p>[0518]	(1)核心调度器给线程池发送中断信号，停止各线程工作。</p>
    <p>[0519]说明：调用线程池	ThreadPooIExecutor 类的 shutdown 方法。</p>
    <p>[0520]	(2)核心调度器销毁线程池对象。</p>
    <p>[0521]	说明：设置线程池对象为null。</p>
    <p>[0522]	采用了本发明所提出的流程执行的基础框架（GEVM)，由于其技术特点，必然具备 以下几方面的优势：</p>
    <p>[0523]	(1)提高软件重用度，节省工作量。[0524]	从软件技术上来说，抽象出了可供多种流程实现的基础调度公共机制，减少了流 程引擎开发的工作量。</p>
    <p>[0525]	(2)降低模块耦合度，提高并行开发能力。</p>
    <p>[0526]	通过GEVM主动加载各种节点插件行为的方法，各种节点行为之间开发不存在任 何必然依赖性，流程引擎的各个部分可以交给不同技能的人去实现，降低了流程引擎的实 现门槛。</p>
    <p>[0527]	(3)提高流程引擎的扩展性。</p>
    <p>[0528]	基于GEVM可以以开发扩展“插件”的形式扩充引擎的能力；对于新增节点功能只 需要实现一些新的扩展插件即可，提高了流程引擎的扩展性。</p>
    <p>[0529]	(4)提高流程引擎的稳定性和易维护性。</p>
    <p>[0530]	一般的功能的变更只局限在特定的节点插件当中，可有效避免少量变动引起整个 流程引擎的不稳定，提高了流程引擎的稳定性和易维护性，降低维护成本。</p>
    <p>[0531]	采用了上述的实现支持多种流程运行的图形执行虚拟机系统及其方法，由于其中 对基于图形的流程产品的引擎进行了抽象，提取出了图形调度机制，实现了图形执行虚拟 机GEVM，该图形执行虚拟机GEVM可以提高流程产品的松耦合能力和可扩展能力，有助于 快速开发出稳定可靠的流程引擎产品，从软件技术上抽象出了可供多种流程实现的基础调 度公共机制，减少了流程引擎开发的工作量，提高了软件重用度，节省了工作量；同时通过 GEVM主动加载各种节点插件行为的方法，各种节点行为之间开发不存在任何必然依赖性， 流程引擎的各个部分可以交给不同技能的人去实现，降低了流程引擎的实现门槛，降低了 模块耦合度，提高并行开发能力；而且基于GEVM可以以开发扩展“插件”的形式扩充引擎 的能力；对于新增节点功能只需要实现一些新的扩展插件即可，提高了流程引擎的扩展性； 不仅如此，一般的功能的变更只局限在特定的节点插件当中，有效避免了少量变动引起整 个流程引擎的不稳定，提高了流程引擎的稳定性和易维护性，降低了维护成本，适用范围较 为广泛。</p>
    <p>[0532]	在此说明书中，本发明已参照其特定的实施例作了描述。但是，很显然仍可以作出 各种修改和变换而不背离本发明的精神和范围。因此，说明书和附图应被认为是说明性的 而非限制性的。</p>
  </div>
  </div></div><div class="patent-section patent-tabular-section"><a id="backward-citations"></a><div class="patent-section-header"><span class="patent-section-title">专利引用</span></div><table class="patent-data-table"><thead class="patent-data-table-thead"><tr class="patent-data-table"><th class="patent-data-table-th">引用的专利</th><th class="patent-data-table-th"> 申请日期</th><th class="patent-data-table-th">公开日</th><th class="patent-data-table-th"> 申请人</th><th class="patent-data-table-th">专利名</th></tr></thead><tr><td class="patent-data-table-td citation-patent"><a href="/patents/CN101277304A?cl=zh">CN101277304A</a><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td patent-date-value">2008年3月21日</td><td class="patent-data-table-td patent-date-value">2008年10月1日</td><td class="patent-data-table-td ">北京航空航天大学</td><td class="patent-data-table-td ">基于规则的Web服务运行环境管理系统及管理方法</td></tr><tr><td class="patent-data-table-td citation-patent"><a href="/patents/US20080232690">US20080232690</a><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td patent-date-value">2007年3月23日</td><td class="patent-data-table-td patent-date-value">2008年9月25日</td><td class="patent-data-table-td ">Palo Alto Research Center Incorporated</td><td class="patent-data-table-td ">Method and apparatus for creating and editing node-link diagrams in pen computing systems</td></tr></table><div class="patent-section-footer">* 由审查员引用</div></div><div class="patent-section patent-tabular-section"><a id="npl-citations"></a><div class="patent-section-header"><span class="patent-section-title">非专利引用</span></div><table class="patent-data-table"><thead class="patent-data-table-thead"><tr class="patent-data-table"><th colspan="3"class="patent-data-table-th">参考文献</th></tr></thead><tr><td class="patent-data-table-td ">1</td><td class="patent-data-table-td "><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td ">苏阳等: "<a href='http://scholar.google.com/scholar?q="J2EE%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%9A%84%E4%BA%A4%E4%BA%92%E6%80%A7%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%AE%9E%E7%8E%B0"'>J2EE工作流的交互性研究与实现</a>", 《计算机技术与发展》, vol. 18, no. 6, 30 June 2008 (2008-06-30), pages 86 - 89</td></tr><tr><td class="patent-data-table-td ">2</td><td class="patent-data-table-td "><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td ">荣洁: "<a href='http://scholar.google.com/scholar?q="%E3%80%8AJBPM4%E7%9A%84%E6%B5%81%E7%A8%8B%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%8B"'>《JBPM4的流程虚拟机》</a>", 《程序员》, 31 August 2009 (2009-08-31), pages 101 - 104</td></tr></table><div class="patent-section-footer">* 由审查员引用</div></div><div class="patent-section patent-tabular-section"><a id="forward-citations"></a><div class="patent-section-header"><span class="patent-section-title"> 被以下专利引用</span></div><table class="patent-data-table"><thead class="patent-data-table-thead"><tr class="patent-data-table"><th class="patent-data-table-th">引用专利</th><th class="patent-data-table-th"> 申请日期</th><th class="patent-data-table-th">公开日</th><th class="patent-data-table-th"> 申请人</th><th class="patent-data-table-th">专利名</th></tr></thead><tr><td class="patent-data-table-td citation-patent"><a href="/patents/CN102915250A?cl=zh">CN102915250A</a><span class='patent-tooltip-anchor' data-tooltip-text="由审查员引用"> *</span></td><td class="patent-data-table-td patent-date-value">2012年9月17日</td><td class="patent-data-table-td patent-date-value">2013年2月6日</td><td class="patent-data-table-td ">北京中电普华信息技术有限公司</td><td class="patent-data-table-td ">基于图形虚拟机的流程虚拟机及流程实现方法</td></tr></table><div class="patent-section-footer">* 由审查员引用</div></div><div class="patent-section patent-tabular-section"><a id="classifications"></a><div class="patent-section-header"><span class="patent-section-title">分类</span></div><table class="patent-data-table"><thead class="patent-data-table-thead"><tr class="patent-data-table"><th class="patent-data-table-th"> </th><th class="patent-data-table-th"> </th></tr></thead><tr><td class="patent-data-table-td ">国际分类号</td><td class="patent-data-table-td "><span class="nested-value"><a href="https://www.google.com/url?id=HchyBwABERAJ&amp;q=http://web2.wipo.int/ipcpub/&amp;usg=AFQjCNER44F5jlVoswCkvW3YEcB5lW4moA#refresh=page&amp;notion=scheme&amp;version=20130101&amp;symbol=G06F0009455000">G06F9/455</a></span></td></tr></table><div class="patent-section-footer"></div></div><div class="patent-section patent-tabular-section"><a id="legal-events"></a><div class="patent-section-header"><span class="patent-section-title">法律事件</span></div><table class="patent-data-table"><thead class="patent-data-table-thead"><tr class="patent-data-table"><th class="patent-data-table-th"> 日期</th><th class="patent-data-table-th">代码</th><th class="patent-data-table-th">事件</th><th class="patent-data-table-th">说明</th></tr></thead><tr><td class="patent-data-table-td patent-date-value">2011年3月30日</td><td class="patent-data-table-td ">C06</td><td class="patent-data-table-td ">Publication</td><td class="patent-data-table-td "></td></tr><tr><td class="patent-data-table-td patent-date-value">2011年5月18日</td><td class="patent-data-table-td ">C10</td><td class="patent-data-table-td ">Entry into substantive examination</td><td class="patent-data-table-td "></td></tr><tr><td class="patent-data-table-td patent-date-value">2013年5月8日</td><td class="patent-data-table-td ">C14</td><td class="patent-data-table-td ">Grant of patent or utility model</td><td class="patent-data-table-td "></td></tr><tr><td class="patent-data-table-td patent-date-value">2013年11月20日</td><td class="patent-data-table-td ">C56</td><td class="patent-data-table-td ">Change in the name or address of the patentee</td><td class="patent-data-table-td "><div class="nested-key-value"><span class="nested-key">Owner name: </span><span class="nested-value">PRIMETON INFORMATION TECHNOLOGY CO., LTD.</span></div><div class="nested-key-value"><span class="nested-key">Free format text: </span><span class="nested-value">FORMER NAME: PRIMETON TECHNOLOGIES LTD.</span></div></td></tr></table><div class="patent-section-footer"></div></div><div class="modal-dialog" id="patent-images-lightbox"><div class="patent-lightbox-controls"><div class="patent-lightbox-rotate-controls"><div class="patent-lightbox-rotation-text">旋转</div><div class="rotate-icon rotate-ccw-icon"></div><div class="rotate-icon rotate-cw-icon"></div></div><div class="patent-lightbox-index-counter"></div><a class="patent-lightbox-fullsize-link" target="_blank">原始图片</a><div class="patent-drawings-control patent-drawings-next"><img class="patent-drawings-button-img"src="/googlebooks/images/kennedy/page_right.png" alt="Next page"width="21" height="21" /></div><div class="patent-drawings-control patent-drawings-prev"><img class="patent-drawings-button-img"src="/googlebooks/images/kennedy/page_left.png" alt="Previous page"width="21" height="21" /></div></div><div class="modal-dialog-content"><div class="patent-lightbox-image-holder"><div class="patent-lightbox-placeholder"></div></div></div></div><script>_OC_initPatentsAtb({image_not_available_html: " 未提供图片。\x3ca href\x3d//docs.google.com/viewer?url\x3dpatentimages.storage.googleapis.com/pdfs/2b8e2734468d3946fdc1/CN101996091A.pdf\x3e查看 PDF\x3c/a\x3e"});</script></div></div></div></div></div><script>(function() {var href = window.location.href;if (href.indexOf('?') !== -1) {var parameters = href.split('?')[1].split('&');for (var i = 0; i < parameters.length; i++) {var param = parameters[i].split('=');if (param[0] == 'focus') {var elem = document.getElementById(param[1]);if (elem) {elem.focus();}}}}})();</script><script>_OC_addFlags({LockSrc:"/books/javascript/lock_50a6672b5f82ffbd39b7a9e87fd4594c.js", Host:"https://www.google.com/", IsBooksRentalEnabled:1, IsBrowsingHistoryEnabled:1, IsWebReaderSvgEnabled:0, IsImageModeNotesEnabled:1, IsOfflineBubbleEnabled:1, IsFutureOnSaleVolumesEnabled:1, IsBooksUnifiedLeftNavEnabled:1, IsMobileRequest:0, IsZipitFolderCollectionEnabled:1, IsAdsDisabled:0, IsEmbeddedMediaEnabled:1, IsImageModeAnnotationsEnabled:1, IsMyLibraryGooglePlusEnabled:1, IsImagePageProviderEnabled:1, IsBookcardListPriceSmall:0, IsInternalUser:0, IsBooksShareButtonEnabled:0, IsDisabledRandomBookshelves:0});_OC_Run({"enable_p13n":false,"is_cobrand":false,"sign_in_url":"https://www.google.com/accounts/Login?service=\u0026continue=https://www.google.com/patents%3Fcl%3Dzh%26hl%3Dzh-CN\u0026hl=zh-CN"}, {"volume_id":"","is_ebook":true,"volumeresult":{"has_flowing_text":false,"has_scanned_text":true,"can_download_pdf":false,"can_download_epub":false,"is_pdf_drm_enabled":false,"is_epub_drm_enabled":false,"download_pdf_url":"https://www.google.com/patents/download/%E5%AE%9E%E7%8E%B0%E6%94%AF%E6%8C%81%E5%A4%9A%E7%A7%8D%E6%B5%81%E7%A8%8B%E8%BF%90%E8%A1%8C%E7%9A%84%E5%9B%BE%E5%BD%A2.pdf?id=HchyBwABERAJ\u0026hl=zh-CN\u0026output=pdf\u0026sig=ACfU3U2G27yzxCqm6I093vOvwpMQqSkBZg"},"sample_url":"https://www.google.com/patents/reader?id=HchyBwABERAJ\u0026hl=zh-CN\u0026printsec=frontcover\u0026output=reader\u0026source=gbs_atb_hover","is_browsable":true,"is_public_domain":true}, {});</script><div id="footer_table" style="font-size:83%;text-align:center;position:relative;top:20px;height:4.5em;margin-top:2em"><div style="margin-bottom:8px"><a href="https://www.google.com/search?hl=zh-CN"><nobr>Google&nbsp;首页</nobr></a> - <a href="//www.google.com/patents/sitemap/"><nobr>站点地图</nobr></a> - <a href="http://www.google.com/googlebooks/uspto.html"><nobr>美国专利商标局 (USPTO) 专利信息批量下载</nobr></a> - <a href="/intl/zh-CN/privacy/"><nobr>隐私权政策</nobr></a> - <a href="/intl/zh-CN/policies/terms/"><nobr>服务条款</nobr></a> - <a href="https://support.google.com/faqs/answer/2539193?hl=zh-CN"><nobr> 关于 Google 专利</nobr></a> - <a href="//www.google.com/tools/feedback/intl/zh-CN/error.html" onclick="try{_OC_startFeedback({productId: '72792',locale: 'zh-CN'});return false;}catch(e){}"><nobr>发送反馈</nobr></a></div></div> <script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script><script type="text/javascript">var pageTracker = _gat._getTracker("UA-27188110-1");pageTracker._setCookiePath("/patents/");pageTracker._trackPageview();</script> </body></html>